/**<p>The webinos Navigation API provides mechanism to interact with on-board navigation software.</p>
 * It is a spin-off of the Vehicle API. The navigation related methods were removed in v0.8 
 * \name Navigation API.
 *
 * 
 *
 *
 * \def-api-feature http://webinos.org/api/navigation
 * Identifies the static information about the vehicle 
 *
 * 
 * \author Simon Isenberg (BMW Forschung \& Technik) &lt;Simon.Isenberg@bmw.de&gt;
 * \version 0.1
 */

	/**
	* \brief This interface defines the address properties, which can be passed to the navigation system using the requestGuidance() function.   The <a href="http://dev.w3.org/geo/api/spec-source-v2.html#address_interface" target="_blank">Address interface</a> defined in the v2 of the W3C Geolocation API is used for this purpose.
	*
	*/ 
	dictionary Address{
		/**
		* \brief Attribute is specified by using the two-letter [ISO 3166-1] code.
		*/
		DOMString country;
		/**
		* \brief Attribute denotes the name of a country subdivision (e.g. the state name in the US).
		*/		
		DOMString? region;
		/**
		* \brief Attribute denotes the name of a land area within a larger region.
		*/		
		DOMString? county;
		/**
		* \brief Attribute reflects the name of the city.
		*/		
		DOMString city;
		/**
		* \brief Attribute reflects the name of the street.
		*/		
		DOMString street;
		/**
		* \brief Attribute describes the location's street number.
		*/		
		 DOMString streetNumber;
		/**
		* \brief Attribute denotes the details of the premises, such as a building name, block of flats, etc.
		*/		
		DOMString? premises;
		/**
		* \brief Attribute contains other address details that are not captured by the rest of the attributes in this interface. Examples include a floor number in a building, an apartment number, the name of an office occupant, etc..
		*/		
		DOMString additionalInformation;
		/**
		* \brief Attribute reflects the postal code of the location (e.g. the zip code in the US).
		*/		
		DOMString postalCode;
	};
	
	/**
	* \brief The interface defines a generic data object for navigation specific data.
	*
	*/ 
	[NoInterfaceObject]
	interface NavigationData{
		/**
		* \brief Attribute defines the type NavigationData.
		*/
		readonly attribute DOMString type;
		/**
		* \brief Attribute defines the creation time of the data object.
		*/
		readonly attribute Integer timestamp; 
	};
	/**
	* \brief This dictionary defines the LatLng properties, which can be passed to the navigation system using the requestGuidance() function. The format is WGS84. 
	* <em>Note: The <a href="http://dev.w3.org/geo/api/spec-source-v2.html#coordinates">coordinate</a> interface from the Geolocation API v2 includes attributes, which are not feasible for beeing handled by the navigation system (accurancy, alitude accurency, heading, speed). In some special cases (destination is on a bridge, which crosses another street) it might make sense to add the altitude to LatLng interface at a later stage.</em> 
	* 
	*
	*/ 
	dictionary LatLng{
		/**
		* \brief Attribute reflect the latitude of a geolocation in WGS84.
		*/
		double latitude;
		/**
		* \brief Attribute reflect the Longitude of a geolocation in WGS84.
		*/			
		double longitude;
	};
	/**
	* \brief This dictionary defines a Point of Interest (POI). 
	*  The dictionary contains the name of a POI and its address and/or geolocation as a LatLng object. <em> Note: The <a href="http://www.w3.org/2010/POI/" target="_blank">W3C POI WG</a> has published a <a href="http://www.w3.org/TR/2011/WD-poi-core-20110512/" target="_blank">first working draft</a> for the POI handling. The draft focuses on a XML representation of a POI and does not seem handy for beeing handled by a navigation system.</em>
	*/ 
	dictionary POI{
		/**
		* \brief Attribute denotes the name of the POI.
		*/		
		DOMString? name;
		/**
		* \brief Attribute reflects the geolocation of the POI as LatLng object.
		*/		
		LatLng? position;
		/**
		* \brief Attribute denotes the address of the POI.
		*/		
		Address address;
	};

	/**
	* \brief callback for a success from requestGuidance.
	*
	*/
	callback NavigationSuccessCallback = void ();

	/**
	* \brief callback for a failure from requestGuidance, get, or findDestination
	* \param error a <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> containing information about the error (e.g. SecurityError if permission is denied).
	*
	*/
	callback NavigationErrorCallback = void (DOMError error);
	
	/**
	* \brief callback method to receive vehicle data in a non-recurring and asynchronous way.
	*/ 	
	callback NavigationDataHandler = void (NavigationData data);
	
	/**
	* \brief The interface defines general information about the vehicle and is the object, where the event listener for vehicle related data can be registered. The interface is accessible through the webinos.vehicle object. 
	* 
	*/
	[NoInterfaceObject]
	interface NavigationInterface{
		/**
		* \brief TODO
		* \code
		*	TODO
		* \endcode

		* \param successCallback callback, if the POIs are succesully transferred.
		* \param errorCallback callback, if the address could not be transferred. 
		* \param destinations in form of an POI array. The last POI in the array is the destination point. The other POIs are intermediate stops along the route.
		*/
		void requestGuidance(NavigationSuccessCallback successCallback, NavigationErrorCallback errorCallback, POI[] destinations);
		/**
		* \brief Queries the navigation system to retrieve POIs for a given search string.
		*
		* \code
		*	var destinations =new Array();
		*      webinos.vehicle.findDestination(destinationCB, errorCB,"BMW");
		*      function destinationCB(pois){
		*	if(destinations.length > 0){
		*      	webinos.requestGuidance(successCB, errorCB, destinations);            
		*	else{
		*		console.log("No POI found");
		*	}		
		*}
		* 
		* \endcode
		*
		* \param destinationCallback callback to handle the results to the search string.
		* \param errorCallback callback to handle errors.
		* \param search search string for resolving a address.
		*/
		void findDestination(DestinationCallback destinationCallback, NavigationErrorCallback errorCallback, DOMString search);
	};
	
	/**
	* \brief The Vehicle interface describes the part of the Vehicle API accessible through the webinos object. 
	*
	*/
	[NoInterfaceObject] interface Navigation {
                readonly attribute NavigationInterface navigation;
        };
	Webinos implements Navigation;
	/**
	* \brief callback for the asynchronous findDestination method.
	* \param pois Parameter provides an array of POIs.
	*/
 	callback DestinationCallback = void (POI[] pois);


