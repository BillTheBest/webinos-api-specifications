/**<p>Context API client side reference.</p>
 * \name Context API 
 *
 * The Context API defines the high-level interfaces required to obtain access to a user's context data. User must enable Context Manager on his device in order to keep track of his context objects. 
 * The API supports two basic ways of accessing context data:
 * 
 * 1. executing a query against the context data storage and retrieving context data through the query results.
 * 2. subscribing to receive real time context data updates as soon as a context related event happens (via the ContextRuleManager).
 * 
 * The API also offers the ability to schedule API calls in order to update the context data store even if the application is not running.
 *
 *
 * \def-instantiated 
 * \def-api-feature http://webinos.org/api/context
 * Acccess to the entire module. This feature provides access to the whole API.
 * Security and Privacy enforcement may depend on the query or subscription requested by the developer.
 * \def-api-feature http://webinos.org/api/context/query
 * Access to the query mechanism.
 * \def-api-feature http://webinos.org/api/context/app
 * Access to the Application context manager. Enables an application to create a new Application ContextObject and retrieve ContextObjects created by the application
 * \def-api-feature http://webinos.org/api/context/app/read
 * Access to read an Application ContextObject from an application
 * \def-api-feature http://webinos.org/api/context/schedule/read
 * Access to the scheduling API in order to query for existing scheduled API calls
 * \def-api-feature http://webinos.org/api/context/schedule/create
 * Enables the application to schedule a new API call
 * \def-api-feature http://webinos.org/api/context/rules/read
 * Read context rules and execute them
 * \def-api-feature http://webinos.org/api/context/rules/create
 * Allows the application to create context rules.
 *
 * \author Christos Botsikas (NTUA) &lt;cbot@epu.ntua.gr&gt;
 * \author Christos Ntanos (NTUA) &lt;cntanos@epu.ntua.gr&gt;
 * \author Dimitrios Sdrallis (NTUA) &lt;sdrallis@epu.ntua.gr&gt;
 *
 * \version 1.0 
 */
 
/**
 * \brief This interface defines context properties. It is a context specific extension to the interface Service in the ServiceDiscovery module. This is the main interface for querying data stored in the context database. 
 */
interface Context : Service {
	/**
	 * \brief The entry point for the Application ContextObject management.
	 */
	readonly attribute ApplicationContextManager app;
	
	/**
	 * \brief The entry point for the ContextRule management.
	 */
	readonly attribute ContextRuleManager rules;
	
	/**
	 * \brief The entry point for the Scheduled API calls management.
	 */
	readonly attribute ScheduleManager schedule;

	/**
	 * \brief Performs a ContextQuery against the context database.
	 *
	 * When this method is invoked, it executes the provided query against the context storage. The context storage is a collection of context objects, each one with specific attributes, which hold context data that have been acquired over time, by identifying a number of context related events. The Query parameter that this method uses specifies what context data (i.e. from which context objects) should be retrieved. 
	 *
	 * Mediation by policy and security: this method, as it provides application with data (context) about the user, is expected to have privacy considerations. Therefore the system is able to ignore the request of an app to receive context data if the User Privacy Policy dictates so (i.e. the user has not authorised the application to access the context data it asked for in the Query parameters).
	 *
	 * \param query The ContextQuery to execute against the Context Storage.
	 * \param successCallback Function to be invoked if the asynchronous query operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous query operation results in errors.
	 */
	void executeQuery(ContextQuery query, ContextQuerySuccessCB successCallback, optional ContextQueryErrorCB? errorCallback);
	
	/**
	 * \brief Check if the Context schema is defined.
	 * 
	 * \param uri The unique URI of an Application or API depending on the uriIsApplication value.
	 * \param uriIsApplication The URI provided is for an Application ContextObject if true. Otherwise it refers to an API ContextObject.
	 * \param contextObjectName The alias of the Application ContextObject that will be checked for existence.
	 * \param callback The callback function that passes the result of the search.
	 * \param errorCallback Function to be invoked if the asynchronous query operation results in errors.
	 */ 
	void schemaExists(DOMString uri, boolean uriIsApplication, DOMString contextObjectName, SchemaExistsCB callback, optional ErrorCB? errorCallback);
};

/**
 * \brief A ContextObject is a unit for carrying data that uniquely defines a piece of contextual information.
 *
 */
interface ContextObject{
	/**
	 * \brief The alias of the ContextObject. This is a short description of the contained information. For webinos APIs an indicative list is the following:
	 *<ul>
	 *<li>MyContacts</li>
	 *<li>MyPositions</li>
	 *<li>MyTVChannels</li>
	 *<li>MyClimates</li>
	 *</ul>
	 *
	 * Each name aggregates the same data from various APIs and applications. An example of this is the MyPositions which is a ContextObjectName that aggregates the location data from both the Geolocation API and the Vehicle API.
	 */
	readonly attribute DOMString name;
	/**
	* \brief If this ContextObject was extracted from a webinos API, this is the webinos API URI, otherwise (in the case of application ContextObject) this is null.
	*/
	readonly attribute DOMString? apiUri;
	/**
	 * \brief If this ContextObject was saved from an application, this is the unique application URI. Otherwise, this is null.
	 */
	readonly attribute ApplicationURI? applicationUri;
	/**
	 * \brief The device id that initiated the request for this ContextObject
	 */
	readonly attribute DOMString deviceId;
	/**
	 * \brief The session id from which this ContextObject was extracted.
	 */
	readonly attribute DOMString sessionId;
	/**
	 * \brief The timestamp when the specific ContextObject was saved.
	 */
	readonly attribute DOMTimeStamp timestamp;
	/**
	 * \brief The version of the Application ContextObject schema. This can be null in case there is no version info available.
	 */
	readonly attribute DOMString? version;
	/**
	 * \brief The contextual data.
	 */
	readonly attribute ContextObjectValueArray values;
};

/**
 * \brief ContextObjectField definition. This is the definition of a field in the ContextObject
 *
 */
interface ContextObjectField{
	/**
	 * \brief The name of the property
	 */
	attribute DOMString name;
	/**
	 * \brief A description of the data type of the value
	 *
	 * The developer will be able to cast the value based on this attribute. Example of possible values are:
	 * <ul>
	 * <li>
	 * double: The value can contain decimals separated by a dot</li>
	 * <li>
	 * short, long, number: The value is an integer with the specified precision</li>
	 * <li>
	 * DOMString: The value is a DOMString</li>
	 * <li>
	 * DOMTimeStamp: The value is a DOMTimeStamp</li>
	 * <li>
	 * boolean: The value is boolean (true, false)</li>
	 * <li>
	 * object: The value is a JSON object</li>
	 * <li>
	 * array: The value is an array</li>
	 * </ul>
	 */
	attribute DOMString type;
};

/**
 * \brief Array of ContextObjectField.
 */
typedef ContextObjectField[] ContextObjectFieldArray;
 
/**
 * \brief Array of objects. This array will contain one or more objects, that consist of field:value elements.
 */
typedef Object[] ContextObjectValueArray;
 
/**
 * \brief Generic callback function when a function completed successfully.
 *
 */
callback SuccessCB = void ();

/**
 * \brief Generic callback function when a function fails.
 *
 * \param error A DOMError that describes the error occurred.
 */
callback ErrorCB = void (DOMError error);
 
 
/**
 * \brief Callback function when the Context calls the schemaExists() function.
 *
 * \param found A boolean that determines if the schema is defined.
 * \param version A DOMString with the current registered version of the Application or API ContextObject. If the version info is unavailable, this is null .
 */
callback SchemaExistsCB = void (boolean found, DOMString? version);

/**
 * \brief Callback function when an error occurs while ContextQuery is being executed.
 * 
 * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#interface-domerror">DOMError</a> object detailing what went wrong; e.g. SecurityError if a security error originating from Policy Manager, NotFoundError if the requested Context Object is not found in Context DB, SyntaxError if the query was not well formed and can not be parsed, InsuficientData if aggregated Context Object can not be created due to insufficient data, or TimeoutError if context manager did not respond in time.
 */
callback ContextQueryErrorCB = void (DOMError error);

/**
 * \brief Array of ContextObject.
 */
typedef ContextObject[] ContextObjectArray;


/**
 * \brief Callback function when ContextQuery executes successfully.
 *
 * \param data An array of ContextObject type that contains the results of the Context Query.
 */
callback ContextQuerySuccessCB = void (ContextObjectArray data);


/**
 * \brief The query structure of the Context Manager. 
 *
 * The querying language that is used by the Context Queries is based on mongoDB. You can find a useful <a href="http://docs.mongodb.org/manual/reference/sql-comparison/">comparison to the SQL syntax</a>.
 */
interface ContextQuery{
	/**
	 * \brief Specifies selection criteria for ContextObject's properties (except values).
	 */
	attribute QueryFilter filter;
	/**
	 * \brief Specifies the selection criteria for the ContextObject values using <a href="http://docs.mongodb.org/manual/reference/operator/query/">mongoDB's query operators</a>. To return the entire ContextObjectArray, omit this attribute. Refer to <a href="http://docs.mongodb.org/manual/tutorial/query-documents/">mongoDB's query tutorial</a> for more info.
	 */
	attribute Object? criteria;
	/**
	 * \brief Specifies the ContextObject fields to return using <a href="http://docs.mongodb.org/manual/reference/operator/projection/">mongoDB's projection operators</a>. To return all fields in the matching ContextObject, omit this attribute. Refer to <a href="http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#projection">mongoDB's projection tutorial</a> for more info.
	 */
	attribute Object? projection;
	/**
	 * \brief Specifies the modifications (sort, limit, skip) to apply to the results. This attribute can be omitted.
	 */
	attribute QueryModifier? modifier;
};

/**
 * \brief A filter clause to limit the result set of the query based on the ContextObject parameters. 
 * 
 * Always provide an apiUri OR an applicationUri along with the name of the ContextObject. This object can use <a href="http://docs.mongodb.org/manual/reference/operator/query/">mongoDB's query operators</a> to describe filters, except for the name, apiUri and applicationUri which must be provided in plane &lt;field&gt;: &lt;value&gt; format.
 */
interface QueryFilter{
	/**
	 * \brief The name of the ContextObject to be queried.
	 */
	attribute DOMString name;
	/**
	 * \brief The API URI for which the ContextObject name to be queried. This argument can be omitted only when searching for Application ContextObject, providing the applicationUri.
	 */
	attribute DOMString? apiUri;
	/**
	 * \brief The application URI for which the ContextObject name to be queried. This argument can be omitted only when searching for API ContextObject, providing the apiUri.
	 */
	attribute ApplicationURI? applicationUri;
	/**
	 * \brief The device id by which results should be filtered.
	 */
	attribute (DOMString or object)? deviceId;
	/**
	 * \brief The session id by which results should be filtered.
	 */
	attribute (DOMString or object)? sessionId;
	/**
	 * \brief The timestamp by which results should be filtered.
	 */
	attribute (DOMString or object)? timestamp;
	/**
	 * \brief The ContextObject schema version by which results should be filtered.
	 */
	attribute (DOMString or object)? version;
};

/**
 * \brief The modifiers (sort, limit, skip) to apply to the result set of ContextObject. 
 */
interface QueryModifier{
	/**
	 * \brief The maximum number of ContextObjects for the result ContextObjectArray. This attribute can be omitted.
	 */
	attribute integer? limit;
	/**
	 * \brief The number of ContextObjects to skip for the result ContextObjectArray. This attribute can be omitted.
	 */
	attribute integer? skip;
	/**
	 * \brief The sort order for the result ContextObjectArray. The object is expected in <a href="http://docs.mongodb.org/manual/reference/method/cursor.sort/#cursor.sort">mongoDB's sort format</a>. This attribute can be omitted.
	 */
	attribute object? sort;
};

/**
 * \brief This is the entry point for the Application ContextObject management. 
 *
 * Application developers may register their own ContextObject data by defining a schema. The application may save this kind of ContextObject which will be shared among applications and devices for later processing.
 * The end user will be able to give access to these data based on policy manager rules. The main concept is that although the application is able to store data, the data are not owned by the application rather the user. So the user can share this kind of data either with another user or another application. 
 */
interface ApplicationContextManager{
	/**
	 * \brief Register the schema of an Application ContextObject that will be available for the application to store its contextual information.
	 *
	 * This function updates or creates the schema of the Application ContextObject. If the schema is already defined, then it overrides it with the given one. Note that the current implementation doesn't do any version checking.
	 *
	 * \param applicationUri The unique identifier of the Application. This will not be required when this information will be available through the Session.
	 * \param contextObjectName The alias of the ContextObject, in order to be able to retrieve it and insert it later on.
	 * \param version The version of the Application ContextObject schema. It is advised to use the Semantic Versioning (http://semver.org/) schema (e.g. 0.5.1) although currently this is not taken into account.
	 * \param fields The array of ContextObjectField that describes the data that will be stored and retrieved.
	 * \param successCallback Function to be invoked if the asynchronous registration operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous registration operation results in errors.
	 */
	void registerSchema(ApplicationURI applicationUri, DOMString contextObjectName, DOMString version, ContextObjectFieldArray fields, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);

	/**
	 * \brief Insert an Application ContextObject in the Context database.
	 *
	 * An error may occur if the data that are being inserted does not match the register Application ContextObject schema.
	 *
	 * \param applicationUri The unique identifier of the Application. This will not be required when this information will be available through the Session.
	 * \param contextObjectName The alias of the ContextObject, in order to be able to retrieve it later on.
	 * \param values The array of ContextObjectValue that contains the data that will be stored.
	 * \param successCallback Function to be invoked if the asynchronous insert operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous insert operation results in errors.
	 */
	void addData(ApplicationURI applicationUri, DOMString contextObjectName, ContextObjectValueArray values, optional SuccessCB successCallback, optional ErrorCB? errorCallback);
};

/**
 * \brief This is the entry point for the ContextRule management. 
 *
 * Application developers may create new ContextRule in order to trigger events based on those rules. 
 * If a ContextRule is not used for a period more than a month, then it is automatically deleted. In order to renew the ContextRule, the application must call the renew() function of the ContextRule
 */
interface ContextRuleManager{
	/**
	 * \brief Retrieve the ContextRule with the specific ContextRuleURI
	 * 
	 * \param contextRuleUri The unique identifier of the ContextRule. 
	 * \param successCallback Function to parse the results of the search operation. This will have either one result or null.
	 * \param errorCallback Function to be invoked if the asynchronous search operation results in errors.
	 */ 
	void search(ContextRuleURI contextRuleUri, ContextRuleSearchCB successCallback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Insert or update a ContextRule.
	 *
	 * \param rule The new ContextRule to insert. If the ContextRule already exists and the owner application is the same as the caller, the ContextRule gets updated. Otherwise an error occurs.
	 * \param saveCallback Function to be invoked if the asynchronous insert operation completes successfully. The ContextRule that was saved is returned with possible modifications.
	 * \param errorCallback Function to be invoked if the asynchronous insert operation results in errors.
	 */
	void save(ContextRule rule, optional ContextRuleSaveCB? saveCallback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Remove a ContextRule.
	 *
	 * \param contextRuleUri The unique identifier of the ContextRule to delete. The ContextRule must exists and the owner application must be the same as the caller, otherwise an error occurs.
	 * \param successCallback Function to be invoked if the asynchronous delete operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous delete operation results in errors.
	 */
	void remove(ContextRuleURI contextRuleUri, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Extends the validUntil of a ContextRule for a month.
	 *
	 * \param contextRuleUri The unique identifier of the ContextRule to renew.
	 * \param successCallback Function to be invoked if the asynchronous renew operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous renew operation results in errors.
	 */
	void renew(ContextRuleURI contextRuleUri, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
	
	
	/**
	 * \brief Register a listener for a specific ContextRule
	 * \param contextRuleURI The URI or the ContextRule to monitor.
	 * \param listenerName The name of the listener to add. This name is used to identify the callback so that the application can remove or override the listener.
	 * \param callback The callback function to process the incoming data when the ContextRule has been triggered.
	 * \param successCallback Function to be invoked if the asynchronous registration operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous registration operation results in errors.
	 */
	void addListener(ContextRuleURI contextRuleURI, DOMString listenerName, ContextRuleEventHandler callback, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Unregister a listener for a specific ContextRule.
	 * \param contextRuleURI The URI or the ContextRule to monitor.
	 * \param listenerName The listener name to remove.
	 * \param successCallback Function to be invoked if the asynchronous unregistration operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous unregistration operation results in errors.
	 */
	void removeListener(ContextRuleURI contextRuleURI, DOMString listenerName, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
};

/**
 * \brief Callback function when a search for ContextRule executes successfully.
 *
 * \param rules An array of ContextRule type that contains the results of the search.
 */
callback ContextRuleSearchCB = void (ContextRule[] rules);

/**
 * \brief Callback function when a save for ContextRule executes successfully.
 *
 * \param savedRule The saved ContextRule with all possible modifications. If the interval provided is too low, an overridden value can be determined from this ContextRule.
 */
callback ContextRuleSaveCB = void (ContextRule savedRule);

/**
 * \brief This is the definition of a ContextRule object
 */
interface ContextRule{
	/**
	 * \brief The URI of the ContextRule that was triggered.
	 */
	attribute ContextRuleURI contextRuleUri;
	
	/**
	 * \brief The application URI that is the owner of this ContextRule.
	 */
	attribute ApplicationURI applicationUri;
	
	/**
	 * \brief A description of the ContextRule.
	 */
	attribute DOMString description;
	
	/**
	 * \brief The query that when data are retrieved, the ContextRule is being triggered.
	 */
	attribute ContextQuery ruleQuery;
	
	/**
	 * \brief The interval in seconds between each ContextRule evaluation. This interval might be overridden by the Context API to avoid performance issues. ContextRuleSaveCB should be used when saving to determine the overridden value.
	 */
	attribute integer interval;
	
	/**
	 * \brief The timestamp until when this ContextRule is available. After that it will be removed. This is automatically set for new ContextRule to a month after the creation date.
	 */
	attribute DOMTimeStamp validUntil;
};

/**
 * \brief The event that is fired when a ContextRule has been triggered.
 *
 * The application may register to listen ContextRuleEvent via the ContextRuleManager.addListener() function.
 */
interface ContextRuleEvent {
	/**
	 * \brief The URI of the ContextRule that was triggered.
	 */
	readonly attribute ContextRuleURI contextRuleUri;
	/** 
	 * \brief The possible resulting array of ContextObject that may occur from the ContextRule.
	 */
	readonly attribute ContextObjectArray? result;
};

/**
 * \brief Callback function when a ContextRule has been triggered.
 *
 */
callback ContextRuleEventHandler = void (ContextRuleEvent event);

 
/**
 * \brief The unique URI that represents a ContextRule eg. "http://epu.ntua.gr/context/rules/homeLocation".
 */
typedef DOMString ContextRuleURI;

/**
 * \brief The unique URI that represents an Application eg. "http://epu.ntua.gr/contextDemoApp".
 */
typedef DOMString ApplicationURI;

/**
 * \brief This is the entry point for the Scheduled API calls management. 
 *
 * Application developers may request a scheduled API call on Interval in order to force update of the context database. Scheduled API calls may not return fresh information if the implementation of an API imposes its own rate limits.
 */
interface ScheduleManager{
	/**
	 * \brief Search for a Schedule
	 * 
	 * \param apiUri The API URI to search for. This will be ignored if null is passed, but then, onlyOwnSchedules must be set to True.
	 * \param onlyOwnSchedules If true is passed, Search will return only the Schedules that are owned by this application.
	 * \param callback Function to parse the results of the search operation.
	 * \param errorCallback Function to be invoked if the asynchronous search operation results in errors.
	 */ 
	void search(DOMString? apiUri, boolean onlyOwnSchedules, ScheduleSearchCB callback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Insert or update a Schedule. 
	 *
	 * \param schedule The new Schedule to insert. If the Schedule already exists and the owner application is the same as the caller, the Schedule gets updated. Otherwise an error occurs.
	 * \param successCallback Function to be invoked if the asynchronous insert operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous insert operation results in errors.
	 */
	void save(Schedule schedule, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Remove a Schedule.
	 *
	 * \param schedule The Schedule to delete. The Schedule must exist and the owner application must be the same as the caller, otherwise an error occurs.
	 * \param successCallback Function to be invoked if the asynchronous delete operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous delete operation results in errors.
	 */
	void remove(Schedule schedule, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
	
	/**
	 * \brief Extends the validUntil of a Schedule for a month.
	 *
	 * \param schedule The Schedule to renew.
	 * \param successCallback Function to be invoked if the asynchronous renew operation completes successfully.
	 * \param errorCallback Function to be invoked if the asynchronous renew operation results in errors.
	 */
	void renew(Schedule schedule, optional SuccessCB? successCallback, optional ErrorCB? errorCallback);
};

/**
 * \brief Callback function when a search for Schedule executes successfully.
 *
 * \param schedules An array of Schedule that contains the results of the search
 */
callback ScheduleSearchCB = void (Schedule[] schedules);

/**
 * \brief This is the definition of a Schedule object
 */
interface Schedule{
	
	/**
	 * \brief The application URI that is the owner of this Schedule.
	 */
	attribute ApplicationURI applicationUri;
	
	/**
	 * \brief The webinos API URI to call
	 */
	attribute DOMString apiUri;
	
	/**
	 * \brief The webinos API method to call. The developer will be allowed to add only a specific list of methods and will not be allowed to add methods like the addEventListener.
	 */
	attribute DOMString method;
	
	/**
	 * \brief The parameters to pass to the API
	 */
	attribute object[] params;
	
	/**
	 * \brief The device id where the API call will occur.
	 */
	attribute DOMString deviceId;
	
	/**
	 * \brief The Interval between each API call
	 */
	attribute Interval interval;
	
	/**
	 * \brief The timestamp until when this ScheduledAPICall is valid. After that it will be removed. This is automatically set for new ScheduledAPICall to a month after the creation date.
	 */
	attribute DOMTimeStamp validUntil;
};
