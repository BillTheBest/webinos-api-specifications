/**<p>Allows to obtain access to a userâ€™s context data</p>
 * \name Context API 
 *
 * The Context API defines the high-level interfaces required to obtain access to a user's context data. The API supports two basic ways of accessing context data:
 * <ul>
 * <li>1. executing a query against the context data storage and retrieving context data through the query results.</li>
 * <li>2. subscribing to receive real time context data updates as soon as a context related event happens.</li>
 * </ul>
 *
 * \def-api-feature http://webinos.org/api/context
 * Acccess to all the module. This feature provides access to the whole API.
 * Security and Privacy enforcement may depend on the query or subscription requested by the developer.
 *
 * \author Heiko Desruelle &lt;heiko.desruelle@intec.ugent.be&gt;
 * \author Dieter Blomme &lt;dieter.blomme@intec.ugent.be&gt;
 * \author George Gionis &lt;gionis@epu.ntua.gr&gt;
 * \version 0.1 
 */
  /**
   * \brief Defines what is instantiated in initialization. 
   * 
   * There will be a webinos.context object that allows accessing the    * functionality of this module.
   * 
   * \def-instantiated 
   * \api-feature http://webinos.org/api/context
   */
  [NoInterfaceObject] interface ContextManagerHook {
    readonly attribute ContextManager context; 
  };
  webinos implements ContextManager;

  /**
   * \brief This is the entry point for the context API. The interface provides the two basic methods to access the User's context data, i.e. query or subscribe to updates. 
   *
   * TODO: Long description
   *
   * \code
   * TODO
   * \endcode
   */
  [NoInterfaceObject] interface ContextManager {

    /**
     * \brief Performs a context query against the context storage.
     *
     * When this method is invoked it executes the provided query against the context storage. The context storage is a collection context objects, each one with specific attributes, which hold context data that have been acquired over time by identifying a number of context related events. The Query parameter that this method uses specifies what context data (i.e. from which context objects) should be retrieved. 
	 *
	 * Mediation by policy and security: this method, as it provides application with data (context) about the user, is expected to have privacy considerations. Therefore the system is able to ignore the request of an app to receive context data if the User Privacy Policy dictates so (i.e. the user has not authorized the app to access the context data it ask for in the Query parameter).
     *
     * \code
	 * TODO
     * \endcode
     *
     * \param successCallback Function to be invoked if the asynchronous query operation completes successfully.
     * \param errorCallback Function to be invoked if the asynchronous query operation results in errors.
     * \param query The Query object describing the query to be executed against the context storage.
     * \return void call
     */
    void executeQuery(QuerySuccessCallback successCallback,
                      QueryErrorCallback? errorCallback,
                      Query query);
  
  /**
     * \brief Registers the function to be notifies when a context related event occurs.
     *
     * When this method is invoked, the implementation must register the (app) function that is passed in the eventHandler argument as the hander function that will be notified when the context related event, which in turn is identified in the eventIdentifier, happens. This function will be invoked every time the indicated event occurs until the unsubscribe method is invoked to cancel the subscription. 
	 *
	 * If the subscription is successfully created, an identifier for the handler is created and returned in subscriptionSuccessCallback so that it is possible to cancel the subscription. If the subscription cannot be created, the subscriptionErrorCallback contains an error code that describes the reason for the error. 
	 *
	 * Mediation by policy and security: this method, as it can provide an application with real-time data (context) about the user, is expected to have privacy considerations. Therefore the system is able to ignore the request of an app to receive context data if the User Privacy Policy dictates so (i.e. the user has not authorized the app to access the context data of the dictated event).
     *
     * \code
	 * TODO
     * \endcode
     *
     * \param subscribeSuccessCallback Function to be invoked if the asynchronous subscribe request completes successfully.
     * \param subscribeErrorCallback Function to be invoked if the asynchronous subscribe request results in errors.
     * \param eventHandler The function to be invoked when the dictated event occurs.
	 * \param eventIdentifier The event identifier, for example "UserProfileUpdate", "ShoppingBasketCheckout".
     * \return void
     */
    void subscribeContextEvent(SubscribeSuccessCallback subscribeSuccessCallback,
                      SubscribeErrorCallback? subscribeErrorCallback,
                      OccuringEvent eventHandler,
					  DOMString eventIdentifier);
  
  /**
     * \brief Cancels a subscription to a context related event.
     *
     * If the subscriptionIdentifier argument is valid and corresponds to a subscription already in place the subscription process MUST be effectivelly stoped. If the subscriptionHandler argument does not correspond to a valid subscription, the method should return without any further action.
     *
     * \code
	 * TODO
     * \endcode
     *
     * \param subscriptionIdentifier The identifier of the subscription, obtained via the success callback of subscribeContextEvent().
     * \return void
     */
    void unsubscribe(unsigned long subscriptionIdentifier);
  };

  /**
   * \brief Query interface,
   *
   * TODO: Detail if this the right content for the query 
   */
   dictionary Query {

    /**
     * \brief query content in xml format
     *
     * <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL query language for RDF</a>
     */
    SPARQLquery xmlQuery;
  };
  

  /**
   * \brief Callback indicating success of executeQuery() operation. 
   * \param queryResult Result of the query operation serialized as a json string, see <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL query language for RDF</a>. 
   *
   */         
  callback QuerySuccessCallback = void (SPARQLquery queryResult);
        
  /**
   * \brief Callback indicating error of executeQuery() operation. 
   * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> matching the type of error:  SecurityError if forbidden, SyntaxError if the query is invalid
   */         
  callback QueryErrorCallback = void (DOMError error);
  };
  
   /**
   * \brief Callback indicating success of subscribeContextEvent() operation. 
   * \param subscriptionIdentifier A subscription handler that can be later used to cancel the subscription. 
   */         
  callback SubscribeSuccessCallback = void (unsigned long subscriptionIdentifier);
  
  /**
   * \brief Callback indicating error of subscribeContextEvent() operation. 
   * \param error A <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> object capturing the type of the error. (e.g. SecurityError for permission denied)
   */         
  callback SubscribeErrorCallback = void onerror (DOMError error);
  
   /**
   * \brief callback called when a new context related event occurs. 
   *
   * This interface specifies a function that provides a serialized json string of the context data retrieved from the happening of a context related event.
     * \param eventContextData The context data acquired by the event. 
   */         
  callback OccuringEvent = void (DOMString eventContextData);

