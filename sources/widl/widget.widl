/**<p>Webinos specific extensions to <a href="http://www.w3.org/TR/widgets-apis/">W3C Widget Interface</a></p>
 * \name Widget API
 *
 * This specification defines the common widget interface. The webinos application packaging
 * is based on <a href="http://www.w3.org/TR/widgets/">W3C Widget Specifications</a>, and this API completes the <a href="http://www.w3.org/TR/widgets-apis/">W3C Widget Interface</a>.
 *
 * \author Andre Paul andre.paul@fokus.fraunhofer.de;
 * \version 0.1 
 */
   /**
    * \brief Callback for successfull notifications
    * \param id the id of the notification request or null if no id was provided.
   */
   callback NotifySuccessCallback = void (DOMString? id);
  
   /**
    * \brief Callback for failed notifications
     * \param id the id of the notification request or null if no id was provided.    * 
   */
   callback NotifyErrorCallback = void (DOMString? id);
  
   /**
    * \brief Callback for successfull installations
    * \param childID is the application id which was used during deployChild and declared in the manifest
    * \param serviceID is the unique application instance id that can be used to explicitly address
    *                  the deployed service within webinos service discovery
    * 
   */
   callback DeploymentSuccessCallback = void (DOMString childID, DOMString serviceID);
   
   /**
    * \brief Callback for failed installations
    * \param applicationID The application ID the error relates to.
    * \param error A <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> explaining what failed: SecurityError if permission has been denied, NetworkError if the device is not reachable, NotFoundError if the application id is unknown, InvalidStateError if the application is already installed
   */
   callback DeploymentErrorCallback = void (DOMString applicationID, DOMError error);

    /**
     * \brief Callback definition for changed life cycle states. 
     * 
    */
	callback LifecycleChangeHandler = void ();

  /**
   * \brief Widget Interface
   * 
   * Defines that the webinos interface is part of the window global object.
   *
  */
  partial interface Widget {
    
    /**
     * \brief An distributor attribute that represents people or an organization that distributed the widget.
    */
    readonly attribute DOMString     distributor;
    
    /**
     * \brief A string attribute that represents an email address associated with the distributor.
    */
    readonly attribute DOMString     distributorEmail;
    
    /**
     * \brief A string attribute that represents an email address associated with the distributor.
    */
    readonly attribute DOMString     distributorHref;
    
    /**
     * \brief A human readable version name.
    */
    readonly attribute DOMString     versionName;
    
    /**
     * \brief The validFor attributed defines a time interval until when the application is valid and can be used.
     *
     * The time frame is specified in elapsed milliseconds after the first application execution.
    */
    readonly attribute unsigned long long validFor;
    
    /**
     * \brief The validUntil attributed defines a date and time until the application is valid and can be used.
    */
    readonly attribute Date validUntil;

    /**
     * \brief Close the running application.
     *
     * Allows an application to trigger calling destroy from the runtime which results in stopping the
     * application execution and closing the application.
     *
     * \code
     * 
     * //terminate the widget by its own
     * window.widget.exit();
     *
     * \endcode
    */
    void exit();

    /**
     * \brief Hide the running application.
     *
     * Sends the application to background if possible so that it is not visible to the user anymore
     * if possible by the platform the application execution goes on
     *
     * \code
     * 
     * //the widget is not visible anymore if possible
     * window.widget.hide();
     *
     * \endcode
    */
    void hide();

    /**
     * \brief Checks visibility status.
     *
     * Asks the WRT wheather the application is currently hidden (not visible to the user) or not
     * if the application is hidden and want to come to foreground it may notify an event to
     * the user.
     *
     * \code
     * 
     * if (window.widget.isHidden()){
     *    //do things, e.g., create a notification
     * };
     *
     * \endcode
    */
    boolean isHidden();

    /**
     * \brief Issues a notification to the user.
     *
     * Triggers the WRT to notify occurence of an event, as described using the parameters, to the user
     * The user can click the event. If the application is in background the application must be brought to foreground.
     * After that onSuccess is called.
     *
     * Triggers the WRT to notify occurrence of an event, as described using the parameters, to the user
     * The user can click the event or reject it. If the application is in background and the user accepted
     * the event, e.g., by clicking on it, the application must be brought back to foreground. The notify
     * success callback is then called after onForeground was called.
     *
     * \code
     *
     * function error(id){ 
     *    if (id == "1"){
     *   	//e.g, clear new e-mail list
     *   }
     * }
     *
     * function success(id){
     *   if (id == "1"){
     *   	//e.g, show new e-mails
     *   }
     *   else{
     *      if (id == "2"){
     *         //e.g, show new SMS messages
     *      }
     *   }
     * }
     * 
     * window.widget.notify(success, error, "New Emails", "You have 5 new E-Mails", 1);
     *
     * \endcode
     *
     * \param title A short title describing the notification.
     * \param onSuccess NotifySuccessCallback issued when the user accepts the notification.
     * \param onError ErrorCallback issued when the notification is discarded.
     * \param shortDescription A short description about the notification.
     * \param icon A relative path within the application package to an icon describing the notification. 
     * \param id An local identifier that represents the event and can be used to cancel the event or to
     *        take actions within the callbacks. 
    */
    void notify(NotifySuccessCallback onSuccess, NotifyErrorCallback onError, DOMString title, optional DOMString shortDescription, optional DOMString id, optional DOMString icon);

    /**
     * \brief Cancels an ongoing notification.
     *
     * To cancel a previous notify because it is updated or expired (if ongoing / not clicked by the user)
     *
     * \code
     * 
     * //cancel notifications with id 1
     * window.widget.cancelNotify("1");
     *
     * \endcode
     *
     * \param id The notification id to cancel.
    */
    void cancelNotify(DOMString id);

    /**
     * \brief Asynchronous callback indicating that the application will be terminated. 
     *
     * Callback function which is called if the application will be shut down by the WRT.
     * All application memory assigned to the application will be freed after returning
     * out of this function.
     * 
    */
    attribute LifecycleChangeHandler onDestroy;

    /**
     * \brief Asynchronous callback indicating that the application is gone to background. 
     *
     * Callback function which is called after the application was put to background, e.g., another application
     * goes to foreground and the application is not visible any more. After calling onBackground the application
     * is still running but not visible anymore.
     * 
    */
    attribute LifecycleChangeHandler onBackground;

    /**
     * \brief Asynchronous callback indicating that the application is gone to foreground. 
     *
     * Application goes to foreground after previously going to background.
    */
    attribute LifecycleChangeHandler onForeground;

    /**
     * \brief Asynchronous callback indicating that application execution is going to be stopped. 
     *
     * Application execution is stopped aftern returning out of this function.
    */
    attribute LifecycleChangeHandler onStop;

    /**
     * \brief Asynchronous callback indicating that application execution is continued. 
     *
     * Application execution is continued after previously stopped.
     */
    attribute LifecycleChangeHandler onStart;
    
    /**
     * \brief Requests to install an application on another device.
     *
     * Deploys a child application known to the WRT through the definition in the application s manifest
     * file on another device. If local = false or not specified the WRT has to provide a list of available
     * devices to the user where the application should be installed on, if local = true the WRT has to
     * install the selected child on the same device as the API is bound to.
     *
     * \code
     *
     * function error(){ 
     *   //installation failed
     * }
     *
     * function success(childID, serviceID){
     *   //application was successfully deployed
     *   //serviceID can be used for discovery to bind directly to this application
     *   //if functions are exposed by the application
     * }
     *
     * //installing child application with name child1.wgt on the same device 
     * window.widget.deployChild(success, error, "child1.wgt", true);
     *
     * \endcode
     *
     * \param onSuccess SuccessCallback called after successfull installation.
     * \param onError ErrorCallback called if installation was not possible.
     * \param childApplicationID the application ID of the child package to be installed.
     * \param local Indicates if application should be installed on the same device as the requesting application or not.
    */
    void deployChild(DeploymentSuccessCallback onSuccess, DeploymentErrorCallback onError, DOMString childApplicationID, optional boolean local);
  };
  
