/**<p> The Webinos Generic Actuator API provides applications with an API to control actuators.</p> 
 * \name The Generic Actuator API 
 *
 *
 *
 * The Webinos Generic Actuator API provides applications with an API to control actuators in the device, 
 * connected to the device or in another device.
 *
 * The API is agnostic to underlying low level methods for actuator discovery and communication with 
 * actuators. However, the Actuator API should be used in combination with the general Webinos service 
 * discovery methods findServices() and bind(). The actuator services can be located in the user's 
 * personal zone or be shared on the current network.
 *
 * Currently several different actuator types are defined but the API could easily be extended with 
 * additional actuator types.
 * 
 * This is an experimental API and security and privacy issues are not specifically addressed in the 
 * specification. If access to security or privacy
 * sensitive actuators are provided the user agent must either acquire access permission through a 
 * user interface or control access through a prearranged
 * trust relationship with users. 
 *
 *
 * \def-api-feature http://webinos.org/api/actuators
 * Identifies all the actuator types. 
 *
 * \def-api-feature http://webinos.org/api/actuators.switch
 * Identifies the switch actuator type. A switch actuator has only one input pin which represents the state of the switch.
 * range = {0,1} (OFF = 0, ON = 1).
 *
 * \def-api-feature http://webinos.org/api/actuators.linearmotor
 * Identifies the linear motor actuator type. A linear motor actuator has only one input pin which represents the speed and the direction of the movement.
 * Positive values for forward direction, negative values for backwards direction. the absolute value represents the speed of the movement in km/h.
 *
 * \def-api-feature http://webinos.org/api/actuators.rotationalmotor
 * Identifies the rotational motor actuator type. A rotational motor actuator has only one input pin which represents the speed and the direction of the rotation.
 * Positive values for clockwise rotational direction, negative values for counter clockwise rotational direction. the absolute value represents the rotational speed in Hz (Herz = cycles per second).
 *
 * \def-api-feature http://webinos.org/api/actuators.vibratingmotor
 * Identifies the vibrating motor actuator type. A vibrating motor actuator has only one input pin which represents the normalized intensity of the vibration.
 * only values in interval [0, 1] are valid. 0 means no vibration, 1 for maximal intensity.
 *
 * \def-api-feature http://webinos.org/api/actuators.servomotor
 * Identifies the servo motor actuator type. A servo motor actuator has only one input pin which represents the angular position of the output shaft in degree.
 * The min und max values define the lower and upper bound for valid values of the angle
 *
 * \def-api-feature http://webinos.org/api/actuators.swivelmotor
 * Identifies the swivel motor actuator type. A swivel motor actuator has three input pins which represent the coordinate (x-y-z) of the swivel arm.
 * The min und max values of each input pin define the lower and upper bound for valid values of each coordinate
 *
 * \def-api-feature http://webinos.org/api/actuators.thermostat
 * Identifies the thermostat actuator type. A thermostat has only one input pin which represents the desired temperature in &deg;C.
 * The min und max values define the lower and upper bound for valid temperature values
 *
 * \author Louay Bassbouss &lt;louay.bassbouss@fokus.fraunhofer.de&gt;
 * \author Update to new WIDL format by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 2.0
 */

        /**
        * \brief Defines the  error codes for this module
        */
        exception ActuatorException {

                /**
                * \brief Unknown error.
                *
                */
                const unsigned short UNKNOWN_ERR = 0;

                /**
                * \brief An invalid parameter was provided when the requested method was invoked.
                *
                */
                const unsigned short INVALID_ARGUMENT_ERR       = 1;

                /**
                * \brief Exception code
                */
                unsigned short code;

                /**
                * \brief Exception message
                */
                DOMString message;
        };

        /**
        * \brief ActuatorError interface definition
        */
        [NoInterfaceObject] interface ActuatorError {

                /**
                * \brief Uknown error
                */
                const unsigned short UNKNOWN_ERROR = 0;

                /**
                * \brief Illegal actuator type
                */
                const unsigned short ILLEGAL_ACTUATOR_TYPE_ERROR = 2;

                /**
                * \brief actuator type not supported
                */
                const unsigned short ACTUATOR_TYPE_NOT_SUPPORTED_ERROR = 3;

                /**
                * \brief Illegal sensor id
                */
                const unsigned short ILLEGAL_ACTUATOR_ID_ERROR = 4;

                /**
                * \brief Other illegal input arguments
                */
                const unsigned short OTHER_ILLEGAL_INPUT_ARGUMENT_ERROR = 5;

                /**
                * \brief Actuator is already in use
                */
                const unsigned short ACTUATOR_IN_USE_ERROR = 6;

                /**
                * \brief Permission denied
                */
                const unsigned short PERMISSION_DENIED_ERROR = 50;

                /**
                * \brief Error code assigned when an error has occurred.
                */
                readonly attribute unsigned short code;

                /**
                * \brief Human readable message assigned when an error has occurred.
                */
                readonly attribute DOMString message;
    };
        
        /**
        * \brief This interface defines an abstract class representing the range of the actuator values. 
        * The actuator range can be an interval (e.g. temperature is in interval [0°C,27°C]) or a set of 
        * valid values (e.g. a switch accepts only the values {0,1} representing the ON and OFF state). 
        */ 
        interface ActuatorRange {
                //this interface is abstract and therefore it dosent consist any attribute.
        };

        /**
        * \brief This interface defines an interval as a sub class of the actuator range. 
        * all valid values of the associated actuator must be between the min and max value.
        * if the min/max value is undefined means that the lower/upper bound of actuator values 
        * is not limited
        */
        [Constructor(float minValue), Constructor(float minValue,float maxValue)]
        interface Interval: ActuatorRange {
                /**
                * \brief Min range of actuator in the actuator unit.
                * undefined min value means that the lower bound is not limited
                */
                attribute float minValue;
                /**
                * \brief Max range of actuator in the actuator unit.
                * undefined max value means that the upper bound is not limited
                */
                attribute float maxValue;
        };

        /**
        * \brief This interface defines a set of valid values as a sub class of the actuator range.
        * a valid value of the actuator must be one of the values array.
        */
        [Constructor(float[] validValues)]
        interface Enum: Range {
                /**
                * \brief valid values in the actuator unit
                */
                attribute float[] validValues;
        };

  
        /**
        * \brief This interface defines the actuator properties. 
        * It is an actuator specific extension to the interface Service in the ServiceDiscovery module.
        */ 
 
        [NoInterfaceObject] interface Actuator : Service {

                /**
                * \brief the range of each actuator value.
                * the size of the range array must be the same as the number of input pins of the actuator
                */
                readonly attribute Range[] range;
 
                /**
                * \brief the unit of each actuator value.
                * the unit array and the range array must have the same size, 
                * which represents the number of input pins of the actuator
                */
                readonly attribute DOMString[] unit;

                /**
                * \brief The type of the actuator. This is an URI defining the actuator type according to the defined actuator "feature" URI strings.\n
                * e.g. the URI string http://webinos.org/api/actuators.switch represents all switch actuators. 
                */
                readonly attribute DOMString actuatorType;

                /**
                * \brief the id of the actuator.
                * The identifier is in general an URI string
                */
                readonly attribute DOMString? actuatorId;

                /**
                * \brief the display name of the actuator.
                */
                readonly attribute DOMString? displayName;

                /**
                * \brief Vendor string of this actuator.
                */
                readonly attribute DOMString? vendor;  

                /**
                * \brief Version of the actuators module.
                */ 
                readonly attribute unsigned long?  version;

                /**
                * \brief set a new actuator value.
                *
                * Throws ActuatorException
                * 
                * \param value an array of new actuator values. The size of the value array is the same as the number of input pins of the actuator.
                * \param successCB the success callback called with an ActuatorEvent object as input in case the setValue call succeeded.
                * \param errorCB the error callback
                */
                PendingOperation setValue (float[] value, optional ActuatorSuccessCB successCB, optional ActuatorErrorCB errorCB);
        };

        /**
        * \brief ActuatorSuccessCB interface definition
        */
        [Callback=FunctionOnly, NoInterfaceObject] interface ActuatorSuccessCB {

                /**
                * \brief onSuccess The onSuccess method is called after the setValue succeeded.  
                *
                * \param event The event object associated to the asynchnonous operation setValue
                */
                void onSuccess(ActuatorEvent event); 
        };

        /**
        * \brief ActuatorErrorCB interface definition
        */
        [Callback=FunctionOnly, NoInterfaceObject] interface ActuatorErrorCB {

                /**
                * \brief onError The onError method is called if an error occurs during the setValue() process.  
                *
                * \param error The error object of an unsuccessful setValue() asynchronous operation.
                */
                void onError(ActuatorError error); 
        };

        /**
        * \brief The PendingOperation interface
        *
        * The PendingOperation interface describes objects that are returned by asynchronous methods that are cancellable. It makes it possible to bring 
        * these operations to a stop if they haven't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
        */
        [NoInterfaceObject] interface PendingOperation {

                /**
                * \brief Method Cancel
                *
                *  Cancel the pending asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return. 
                *  No success or error callback for the pending operation will be invoked.
                */
                void cancel ();
        };


        /**
        * \brief This interface defines the actuator data type.
        */

        interface ActuatorEvent {
                /**
                * \brief The type of the actuator. This is a URI defining the actuator type according to the defined actuator "feature" URI strings.\n
                * For the defined actuator types the actualValue array contains the following data:\n
                *\n
                * http://webinos.org/api/actuators.switch:\n
                * actualValue[0] = the actual state of the switch. OFF=0, ON=1\n
                * 
                */
                readonly attribute DOMString actuatorType;

                /**
                * \brief The unique identity of the of the specific actuator
                */
                readonly attribute DOMString? actuatorId;

                /**
                * \brief Array of actual values representing the current state of the actuator
                */
                readonly attribute float[] actualValue;

                /**
                * \brief Method to set initial values of actuator event.  
                *   
                * \param type Event type i.e. 'actuator'
                * \param actuatorType Actuator type as a feature URI
                * \param actuatorId The unique identity of the specific actuator
                * \param actualValue Array of actual value
                */
                void initActuatorEvent(DOMString type, DOMString actuatorType, DOMString actuatorId, float[] actualValue); 
        };
