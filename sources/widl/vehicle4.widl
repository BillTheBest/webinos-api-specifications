/**
 * \brief webinos Vehicle interface.
 *
 * The webinos vehicle interface provides access to specific vehicle data. The API is based on the DOM Level 3 Events model and defines event types for retrieving information about the vehicle including bordcomputer data, gears or park sensors. Furthermore  it ptovides methods for interacting with the on-board navigation system. The geolocation, speed and acceleation can be retrieved using the geolocation and device orientation API. 
 *
 *
 * \def-api-feature http://webinos.org/api/vehicle
 * Identifies the light sensor type. 
 *
 * \def-api-feature http://webinos.org/api/vehicle.climate
 * Identifies vehicle data related to climate controls. 
 *
 * \def-api-feature http://webinos.org/api/vehicle.navigation
 * Identifies navigation module of a vehicle
 *
 * \def-api-feature http://webinos.org/api/vehicle.parksensors
 * Identifies park sensor modules of a vehicle
 *
 * \def-api-feature http://webinos.org/api/vehicle.bordcomputer
 * Identifies  bordcomputer information of a vehicle
 *
 * \def-api-feature http://webinos.org/api/vehicle.controls
 * Identifies control data (e.g. whipers and lights) of a vehicle
 * 
 * \author Simon Isenberg &lt;Simon.Isenberg@bmw.de&gt;
 * \version 0.3
 */
module vehicle{
	/**
	* \brief Defines error codes for this module
	*
	*/
	interface VehicleError : Error{
		/**
		* \brief A const describing that the access to this feature has been denied
		*/
		const short ACCESS_DENIED = 1;
		/**
		* \brief A const describing that the feature is not available
		*/	
		const short NOT_AVAILABLE = 2;
	};
	/**
	* \brief This interface defines the address properties, which can be passed to the navigation system using the requestGuidance() function.   The <a href="http://dev.w3.org/geo/api/spec-source-v2.html#address_interface">Address interface</a> defined in the v2 of the W3C Geolocation API is beeing used for this purpose.
	*
	*/  
	interface Address{
		/**
		* \brief attribute is specified using the two-letter [ISO 3166-1] code.
		*/
		attribute DOMString country;
		/**
		* \brief attribute denotes the name of a country subdivision (e.g. the state name in the US).
		*/		
		attribute DOMString region;
		/**
		* \brief attribute denotes the name of a land area within the larger region.
		*/		
		attribute DOMString county;
		/**
		* \brief attribute reflects the name of the city.
		*/		
		attribute DOMString city;
		/**
		* \brief attribute reflects the name of the street.
		*/		
		attribute DOMString street;
		/**
		* \brief attribute reflects the location's street number.
		*/		
		attribute DOMString streetNumber;
		/**
		* \brief attribute denotes the details of the premises, such as a building name, block of flats, etc.
		*/		
		attribute DOMString premises;
		/**
		* \brief attribute contains other address details that are not captured by the rest of the attributes in this interface. Examples include a floor number in a building, an apartment number, the name of an office occupant, etc..
		*/		
		attribute DOMString additionalInformation;
		/**
		* \brief attribute reflects the postal code of the location (e.g. the zip code in the US).
		*/		
		attribute DOMString postalCode;
	};
	/**
	* \brief This interface defines the LatLng properties, which can be passed to the navigation system using the requestGuidance() function. The format is WGS84
	* 
	*
	*/  
	interface LatLng{
		/**
		* \brief Latitude of a geolocation in WGS84
		*/
		attribute double latitude;
		/**
		* \brief Longitude of a geolocation in WGS84
		*/			
		attribute double longitude;
	};
	/**
	* \brief This interface defines a Point of Interest (POI)
	*  The interface contains the name of "POI" and its address and/or geolocation as a LatLng object.
	*/  
	interface POI{
		/**
		* \brief denotes the name of the POI
		*/		
		attribute DOMString name;
		/**
		* \brief denotes the geolocation  of the POI in WGS84 format
		*/		
		attribute LatLng position;
		/**
		* \brief denotes the address of the POI
		*/		
		attribute Address address;
	};

	/**
	* \brief This interface defines the callback for a asynchronous function call
	*
	*/
	[Callback=FunctionOnly, NoInterfaceObject]
	interface SuccessCallback{
		/**
		* \brief method is triggered, if function has been succesfully called.
		*
		*/
		void onSuccess();
	};
	/**
	* \brief This interface defines the callback for a failed asynchronous function call
	*
	*/
	[Callback=FunctionOnly, NoInterfaceObject]
	interface ErrorCallback{
		/**
		* \brief method is triggered, if asychronous function call fails.
		* 
		* \param error contains information about the error 
		*/		
		void onError(in VehicleError error);
	};
	/**
	* \brief This interface defines general information about the vehicle.
	* \code
	*
	* \endcode
	*/
	interface vehicle{
		/**
		* \brief A const describing the fuel type unleaded
		*/		
		const DOMString FUEL_UNLEADED = "unleaded";
		/**
		* \brief A const describing the fuel type premium
		*/		
		const DOMString FUEL_PREMIUM = "premium";
		/**
		* \brief A const describing the fuel type diesel
		*/		
		const DOMString FUEL_DIESEL = "diesel";
		/**
		* \brief A const describing the transmission type automatic
		*/		
		const DOMString TRANSMISSION_AUTOMATIC = "automatic";
		/**
		* \brief A const describing the transmission type manual
		*/		
		const DOMString TRANSMISSION_MANUAL = "manual";		
		/**
		* \brief brand name of vehicle
		*/					
		readonly attribute DOMString brand;
		/**
		* \brief model name of the vehicle
		*/		
		readonly attribute DOMString model;
		/**
		* \brief production year of the vehicle
		*/		
		readonly attribute DOMString year;
		/**
		* \brief fuel type of the vehicle
		*/		
		readonly attribute DOMString fuel;
		/**
		* \brief transmission type of the vehicle
		*/		
		readonly attribute DOMString transmission;
		/**
		* \brief Sets the given addresses as the next destinations of the build-in navigation systems. The method is able to handle intermediate stops.
		*
		* \param successCallback callback, if the address is succesully transferred
		* \param errorCallback callback, if the address could not be transferred  
		* \param destinations in form of an Address array. The last address in the array is the destination point. The other destinations are  intermediate stops along the route.
		*/
		void requestGuidance(in SuccessCallback successCallback, in ErrorCallback errorCallback, in Address[] destinations);
		/**
		* \brief Sets the given geolocation point as the new destination of the build in-car navigation system
		*
		* \code
		*	var destinations =new Array();
		*	destination[0] = new webinos.Address("Petuelring 130", "80788", "MÜNCHEN", "DE");
		*      destination[1] = new webinos.Address("Hanauer Strasse 46", "80992", "MÜNCHEN", "DE");
		*      webinos.vehicle.requestGuidance(succesCB, null, destinations);
		*  	webinos.vehicle.addEventListener("destination-reached", handleDestinations, false);
		*      
		*	function handleDestinations(event){
		*           	if(event.type == "destination-reached"){
		*			switch(event.address){
		*				case destination[0]:
		*					console.log("Reached the HQ");
		*				case destination[1]:
		*					console.log("Reached the research center");
		*			}
		*		}
		*	}
		*      
		* 
		* \endcode
		*
		* \param successCallback callback, if the address is succesully transferred
		* \param errorCallback callback, if the address could not be transferred  
		* \param destinations new destinations in form of a Geolocation LatLng array. The last address in the array is the destination point.
		*/
		void requestGuidance(in SuccessCallback successCallback, in ErrorCallback errorCallback, in LatLng[] destinations);
		 /**
		* \brief Queries the navigation system to retrieve POIs for a given search string.
		*
		* \code
		*	var destinations =new Array();
		*      webinos.vehicle.findDestination(destinationCB, errorCB,"BMW");
		*      function destinationCB(pois){
		*	    destinations[0] == pois[0].latlng
		*          webinos.requestGuidance(successCB, errorCB, destinations);            
		*
		*	}
		* 
		* \endcode
		*
		* \param destinationCallback callback to handle the results to the search string
		* \param errorCallback callback to handle erros
		* \param search search string for resolving a address 
		*/
		void findDestination(in DestinationCallback destinationCallback, in ErrorCallback errorCallback, DOMString search);

			
	};
	/**
	* \brief This interface defines callback, for successfull asynchronous function call
	*
	*/
	[Callback=FunctionOnly, NoInterfaceObject]
 	interface DestinationCallback {
		/**
		* \brief function is called, when the results for a POI search are retrieved
		*
		* \param pois array of Point of interests
		*/
   		 void handleResults(in POI[] pois);
  	};
	
	/**
	* \brief This interface defines the "navigation" event type.
	*
	*  Registration for navigation events is achieved by calling navigation.addEventListener with event type set to NavigationEventTypeId.
	*/
	[NoInterfaceObject]
	interface NavigationEvent : Event{
		/**
		* \brief A const describing the event that the destination has been reached.
		*/		
		const DOMString DESTINATION_REACHED = "destination-reached";
		/**
		* \brief A const describing the event that a new destination has been set.
		*/		
		const DOMString DESTINATION_CHANGED = "destination-changed";
		/**
		* \brief A const describing the event that the navigation to a destination has been cancelled.
		*/			
		const DOMString DESTINATION_CANCELLED = "destination-cancelled";	
		
		/**
		* \brief attribute defining the type of the NavigationEvent. The type canbe the "destination-reached", "destination-changed" and "destination-cancelled".
		*/			
		readonly attribute DOMString type;
		
		/**
		* \brief attribute defining the event for which the address the event occured.	
		*/
		readonly attribute Address address;

		/**
		* \brief Method to set initial values of Navigation event
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param navigationEventId Sensor type
		* \param destination destination for which the event occured
		*/
		void initNavigationEvent(boolean bubbles, boolean cancelable, DOMString navigationEventId, Address destination);	
	};
	/**
	* \brief This interface defines a Boardcomputer Event. 
	* A listener can registered by vehicle.addEventLister("boardcomputer",listener,false);
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface BoardComputerEvent : Event{
		/**
		* \brief average consumption 1 of the vehicle in l/100km 
		*/		
		attribute float averageConsumption1;
		/**
		* \brief average consumption 2 of the vehicle in l/100km 
		*/		
		attribute float averageConsumption2;
		/**
		* \brief avergage speed of the vehicle in kmph
		*/
		attribute float averageSpeed1;
		/**
		* \brief avergage speed of the vehicle in kmph
		*/		
		attribute float averageSpeed2;
		/**
		* \brief tripdistance in km
		*/
		attribute float tripDistance;
		/**
		* \brief milage in km
		*/
		attribute float milage;
		/**
		* \brief range in km
		*/
		attribute float range;
		/**
		* \brief Method to set initial values of Boardcomputer event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param averageConsumption1 average consumption 1 of the vehicle in l/100km 
		* \param averageConsumption2 average consumption 2 of the vehicle in l/100km 
		* \param averageSpeed1 average speed of the vehicle in kmph 
		* \param averageSpeed2 average speed of the vehicle in kmph 
		* \param tripDistance distance of the current trip in km
		* \param mileage overall driven distance in km
		* \param range range of the vehicle in km 
		*/
		void initBoardComputerEvent(boolean bubbles, boolean cancelable, float averageConsumption1, float averageConsumption2, float averageSpeed1, float averageSpeed2, float tripDistance, float mileage, float range);
	};
	/**
	* \brief This interface defines a ParkSensor Event. 
	* A listener can registered by vehicle.addEventLister("parksensor-front",listener,false);
	* \code
	*	webinos.vehicle.addEventListener("parksensor-front", psHandler, false);
	*	webinos.vehicle.addEventListener("parksensor-rear", psHandler, false);
	*	function psHandler(psEvent){
	*		if(psEvent.left == 20){
	*			console.log("obstacle on the left in" + psEvent.position + "is pretty close");
	*		}
	*	}
	* \endcode
	*/
	[NoInterfaceObject]
	interface ParkSensorsEvent : Event{
		/**
		* \brief constant describing Event is emitted by the ParkSensors in the front  
		*/
		const DOMString PARKSENSENSORS_FRONT = "front";
		/**
		* \brief constant describing Event is emitted by the ParkSensors in the rear  
		*/
		const DOMString PARKSENSENSORS_REAR = "rear";
		/**
		* \brief Defining the position of the sensor. values: front or rear
		*/
		attribute DOMString position;
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/    		
		attribute unsigned short left;
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/
		attribute unsigned short midLeft;	
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/
		attribute unsigned short midRigth;
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/
		attribute unsigned short rigth;

		/**
		* \brief Method to set initial values of ParkSensor event
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param position position of the sensors: front or rear
		* \param left data from the left sensor
		* \param midLeft data from the middle left sensor
		* \param midRight data from the middle right sensor
		* \param right data from the right sensor
		*/
		void initParkSensorsEvent(boolean bubbles, boolean cancelable, DOMString position, short left, short midLeft, short midRight, short right);
	};
	/**
	* \brief This interface defines a shift Event. 
	* A listener can registered by vehicle.addEventLister("shift",listener,false);
	* Question: Can we use the device orientation event for that?
	* \code
	* // registering an Event for a Shift
	* webinos.vehicle.addEventListener("shift", shiftHandler, null);
	* function shiftHandler(e){
	*   document.getElementById("info").innerHTML = e.gear;
	*  webinos.vehicle.removeListener("shift");
	* }				
	* \endcode
	*/
	[NoInterfaceObject]
	interface ShiftEvent : Event{
		/**
		* \brief constant describing the first gear	
		*/	
		const short GEAR_ONE = 1;
		/**
		* \brief constant describing the second gear	
		*/	
		const short GEAR_TWO = 2;
		/**
		* \brief constant describing the third gear	
		*/	
		const short GEAR_THREE = 3;
		/**
		* \brief constant describing the fourth gear	
		*/	
		const short GEAR_FOUR = 4;		
		/**
		* \brief constant describing the fifth gear	
		*/	
		const short GEAR_FIFE = 5;
		/**
		* \brief constant describing the sixth gear	
		*/	
		const short GEAR_SIX = 6;
		/**
		* \brief constant describing the seventh gear	
		*/	
		const short GEAR_SEVEN = 7;
		/**
		* \brief constant describing the revers gear	
		*/	
		const short GEAR_REVERS = -1;
		/**
		* \brief constant describing the neutral gear	
		*/	
		const short GEAR_NEUTRAL = 0;
		/**
		* \brief constant describing the parking gear	
		*/	
		const short GEAR_PARKING = -2;		
		/**
		* \brief represents the current gear of the vehicle. 	
		*/	
		attribute short gear;
		/**
		* \brief Method to set initial values a shift event
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param gear current gear of the engine
		*/
		void initShiftEvent(boolean bubbles, boolean cancelable, short gear);
	};
	/**
	* \brief This interface defines a Control Event. 
	* Event signals a change for control inside the vehilce (e.g. lights, wiper, etc.)
	* \code
	*	webinos.vehicle.addEventListener("lights-hibeam", lightHandler, false);
	*      function lightHandler(cEvent){
	*		if(cEvent.controlId == "light-hibeam"){
	*			if(cEvent.active == true){
	*				console.log("Hibeam turned on");
	*			}else{
	*				console.log("Hibeam turned off");
	*			}
	*		}
	*	}
	* \endcode
	*/
	[NoInterfaceObject]
	interface ControlEvent : Event{
		/**
		* \brief constant indicates change for the fog light in the front
		*/	
		const DOMString LIGHTS_FOG_FRONT = "lights-fog-front";
		/**
		* \brief constant indicates change for the fog light in the rear
		*/	
		const DOMString LIGHTS_FOG_REAR = "lights-fog-rear";
		/**
		* \brief constant indicates change for left turn signal
		*/	
		const DOMString LIGHTS_SIGNAL_LEFT = "lights-signal-left";
		/**
		* \brief constant indicates change for right turn signal
		*/	
		const DOMString LIGHTS_SIGNAL_RIGHT = "lights-signal-right";
		/**
		* \brief constant indicates change for warn signal
		*/	
		const DOMString LIGHTS_SIGNAL_WARN = "lights-signal-warn";	
		/**
		* \brief constant indicates change for the parking lights
		*/	
		const DOMString LIGHTS_PARKING = "lights-parking";
		/**
		* \brief constant indicates change for the hibeam
		*/	
		const DOMString LIGHTS_HIBEAM = "lights-hibeam";
		/**
		* \brief constant indicates change for the headlight
		*/	
		const DOMString LIGHTS_HEAD = "lights-head";
		/**
		* \brief constant indicates front window is beeing washed
		*/	
		const DOMString WHIPER_FRONT_WASH = "whiper-front-wash";
		/**
		* \brief constant indicates rear window is beeing washed
		*/	
		const DOMString WHIPER_REAR_WASH = "whiper-rear-wash";
		/**
		* \brief constant indicates whiper is in automatic mode
		*/	
		const DOMString WHIPER_AUTOMATIC = "whiper-automatic";
		/**
		* \brief constant indicates front whiper is beeing used once
		*/	
		const DOMString WHIPER_FRONT_ONCE = "whiper-front-once";
		/**
		* \brief constant indicates rear whiper is beeing used once
		*/	
		const DOMString WHIPER_REAR_ONCE = "whiper-front-once";
		/**
		* \brief constant indicates front whiper is on level1
		*/	
		const DOMString WHIPER_FRONT_LEVEL1 = "whiper-front-level1";
		/**
		* \brief constant indicates front whiper is on level2
		*/	
		const DOMString WHIPER_FRONT_LEVEL2 = "whiper-front-level2";
		/**
		* \brief describes the source of the event	
		*/	
		attribute DOMString conrolId;
		/**
		* \brief describes the status of the control unit	
		*/	
		attribute boolean active;
		/**
		* \brief Method to set initial values of controll event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param controlId specifies the control unit
		* \param active specifies if the unit is active or not
		*/
		void initControlEvent(boolean bubbles, boolean cancelable, DOMString controlId, boolean active);
	};
	
	
};


