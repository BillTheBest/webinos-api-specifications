/**
 * \brief webinos Vehicle interface.
 *
 * The webinos Vehicle interface provides access to vehicle data. The API is based on the DOM3 Event model.
 *
 * 
 * \author Simon Isenberg &lt;Simon.Isenberg@bmw.de&gt;
 * \version 0.1
 */
module vehicle{
	/**
	* \brief Defines error codes for this module
	*
	*/
	interface VehicleError : Error{
		/**
		* \brief A const describing that the access to this feature has been denied
		*/
		const short ACCESS_DENIED = 1;
		/**
		* \brief A const describing that the feature is not available
		*/	
		const short NOT_AVAILABLE = 2;
	};
	/**
	* \brief This interface defines the address properties, which can be passed to the navigation system using the requestGuidance() function.   The <a href="http://dev.w3.org/geo/api/spec-source-v2.html#address_interface">Address interface</a> defined in the v2 of the W3C Geolocation API is beeing used for that?
	* 
	* Description to be completed with code examples
	*
	*/  
	interface Address{
		/**
		* \brief attribute is specified using the two-letter [ISO 3166-1] code.
		*/
		attribute DOMString country;
		/**
		* \brief attribute denotes the name of a country subdivision (e.g. the state name in the US).
		*/		
		attribute DOMString region;
		/**
		* \brief attribute denotes the name of a land area within the larger region.
		*/		
		attribute DOMString county;
		/**
		* \brief attribute reflects the name of the city.
		*/		
		attribute DOMString city;
		/**
		* \brief attribute reflects the name of the street.
		*/		
		attribute DOMString street;
		/**
		* \brief attribute reflects the location's street number.
		*/		
		attribute DOMString streetNumber;
		/**
		* \brief attribute denotes the details of the premises, such as a building name, block of flats, etc.
		*/		
		attribute DOMString premises;
		/**
		* \brief attribute contains other address details that are not captured by the rest of the attributes in this interface. Examples include a floor number in a building, an apartment number, the name of an office occupant, etc..
		*/		
		attribute DOMString additionalInformation;
		/**
		* \brief attribute reflects the postal code of the location (e.g. the zip code in the US).
		*/		
		attribute DOMString postalCode;
	};
	/**
	* \brief This interface defines the LatLng properties, which can be passed to the navigation system using the requestGuidance() function. The format is WGS84
	* 
	* Description to be completed with code examples
	*
	*/  
	interface LatLng{
		/**
		* \brief Latitude of a geolocation in WGS84
		*/
		attribute double latitude;
		/**
		* \brief Longitude of a geolocation in WGS84
		*/			
		attribute double longitude;
	};
	/**
	* \brief This interface defines a Point of Interest (POI)
	* 
	* Description to be completed with code examples
	*
	*/  
	interface POI{
		/**
		* \brief denotes the name of the POI
		*/		
		attribute DOMString name;
		/**
		* \brief denotes the geolocation  of the POI in WGS84 format
		*/		
		attribute LatLng position;
		/**
		* \brief denotes the address of the POI
		*/		
		attribute Address address;
	};

	/**
	* \brief This interface defines callback, for successfull asynchronous function call
	*
	*/
	[Callback=FunctionOnly, NoInterfaceObject]
	interface SuccessCallback{
		/**
		* \brief method is triggered, if function has been succesfully called
		*
		*/
		void onSuccess();
	};
	/**
	* \brief This interface defines callback, for successfull asynchronous function call
	*
	*/
	[Callback=FunctionOnly, NoInterfaceObject]
	interface ErrorCallback{
		/**
		* \brief method is triggered, if asychronous function call fails...
		* 
		* \param error contains information about the error 
		*/		
		void onError(in VehicleError error);
	};
	/**
	* \brief This interface defines some general information about the vehicle
	* \code
	*
	* \endcode
	*/
	interface vehicle{
		/**
		* \brief A const describing the fuel type unleaded
		*/		
		const DOMString FUEL_UNLEADED = "unleaded";
		/**
		* \brief A const describing the fuel type premium
		*/		
		const DOMString FUEL_PREMIUM = "premium";
		/**
		* \brief A const describing the fuel type diesel
		*/		
		const DOMString FUEL_DIESEL = "diesel";
		/**
		* \brief A const describing the transmission type automatic
		*/		
		const DOMString TRANSMISSION_AUTOMATIC = "automatic";
		/**
		* \brief A const describing the transmission type manual
		*/		
		const DOMString TRANSMISSION_MANUAL = "manual";		
		/**
		* \brief brand name of vehicle
		*/					
		readonly attribute DOMString brand;
		/**
		* \brief model name of the vehicle
		*/		
		readonly attribute DOMString model;
		/**
		* \brief production year of the vehicle
		*/		
		readonly attribute DOMString year;
		/**
		* \brief fuel type of the vehicle
		*/		
		readonly attribute DOMString fuel;
		/**
		* \brief transmission type of the vehicle
		*/		
		readonly attribute DOMString transmission;
		/**
		* \brief Adds a navigation event listener identified by the NavigationEventId.
		*
		* \code
		*
		* 
		* \endcode
		*
		* \param eventId Unique id of the Event 
		* \param listener Event listener call back function (see http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/)
		* \param useCapture If true, useCapture indicates that the user wishes to add the event listener for the capture phase only,
		* i.e. this event listener will not be triggered during the target and bubbling phases. If false, the event listener will only be
		* triggered during the target and bubbling phases (see http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/)			*/
		void addEventListener(in DOMString eventId, in EventListener listener, in boolean useCapture);
		/**
		* \brief Sets the given address as the new destination of the build in-car navigation system
		*
		* \code
		*
		* 
		* \endcode
		*
		* \param successCallback callback, if the address is succesully transferred
		* \param errorCallback callback, if the address could not be transferred  
		* \param destinations  in form of an Address array. The last address in the array is the destination point.  
		*/
		void requestGuidance(in SuccessCallback successCallback, in ErrorCallback errorCallback, in Address[] destinations);
		/**
		* \brief Sets the given geolocation point as the new destination of the build in-car navigation system
		*
		* \code
		*
		* 
		* \endcode
		*
		* \param successCallback callback, if the address is succesully transferred
		* \param errorCallback callback, if the address could not be transferred  
		* \param destinations new destinations in form of a Geolocation LatLng array. The last address in the array is the destination point.
		*/
		void requestGuidance(in SuccessCallback successCallback, in ErrorCallback errorCallback, in LatLng[] destinations);
		 /**
		* \brief Cancels the guidance to the current destination
		*
		* \code
		*
		* 
		* \endcode
		*
		* \param destinationCallback callback to handle the results to the search string
		* \param errorCallback callback to handle erros
		* \param search search string for resolving a address 
		*/
		void findDestination(in DestinationCallback destinationCallback, in ErrorCallback errorCallback, DOMString search);

			
	};
	/**
	* \brief This interface defines callback, for successfull asynchronous function call
	*
	*/
	[Callback=FunctionOnly, NoInterfaceObject]
 	interface DestinationCallback {
   		 void handleEvent(in POI[] pois);
  	};
	
	/**
	* \brief This interface defines the "navigation" event type.
	*
	*  Registration for navigation events is achieved by calling navigation.addEventListener with event type set to NavigationEventTypeId.
	*/
	[NoInterfaceObject]
	interface NavigationEvent : Event{
		/**
		* \brief A const describing the event that the destination has been reached.
		*/		
		const DOMString DESTINATION_REACHED = "destination-reached";
		/**
		* \brief A const describing the event that a new destination has been set.
		*/		
		const DOMString DESTINATION_CHANGED = "destination-changed";
		/**
		* \brief A const describing the event that the navigation to a destination has been cancelled.
		*/			
		const DOMString DESTINATION_CANCELLED = "destination-cancelled";	
		/**
		* \brief Method to set initial values of Navigation event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param navigationEventId Sensor type
		* \param destination destination for which the event occured
		*/
		void initNavigationEvent(boolean bubbles, boolean cancelable, DOMString navigationEventId, Address destination);	
	};
	/**
	* \brief This interface defines a Boardcomputer Event. 
	* A listener can registered by vehicle.addEventLister("boardcomputer",listener,false);
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface BoardComputerEvent : Event{
		/**
		* \brief average consumption 1 of the vehicle in l/100km 
		*/		
		attribute float averageConsumption1;
		/**
		* \brief average consumption 2 of the vehicle in l/100km 
		*/		
		attribute float averageConsumption2;
		/**
		* \brief avergage speed of the vehicle in kmph
		*/
		attribute float averageSpeed1;
		/**
		* \brief avergage speed of the vehicle in kmph
		*/		
		attribute float averageSpeed2;
		/**
		* \brief tripdistance in km
		*/
		attribute float tripDistance;
		/**
		* \brief milage in km
		*/
		attribute float milage;
		/**
		* \brief range in km
		*/
		attribute float range;
		/**
		* \brief Method to set initial values of Boardcomputer event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param averageConsumption1 average consumption 1 of the vehicle in l/100km 
		* \param averageConsumption2 average consumption 2 of the vehicle in l/100km 
		* \param averageSpeed1 average speed of the vehicle in kmph 
		* \param averageSpeed2 average speed of the vehicle in kmph 
		* \param tripDistance distance of the current trip in km
		* \param mileage overall driven distance in km
		* \param range range of the vehicle in km 
		*/
		void initBoardComputerEvent(boolean bubbles, boolean cancelable, float averageConsumption1, float averageConsumption2, float averageSpeed1, float averageSpeed2, float tripDistance, float mileage, float range);
	};
	/**
	* \brief This interface defines a ParkSensor Event. 
	* A listener can registered by vehicle.addEventLister("parksensors-front",listener,false);
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface ParkControllEvent : Event{
		/**
		* \brief constant describing Event is emitted by the ParkSensors in the front  
		*/
		const DOMString PARKSENSENSORS_FRONT = "front";
		/**
		* \brief constant describing Event is emitted by the ParkSensors in the rear  
		*/
		const DOMString PARKSENSENSORS_REAR = "rear";
		/**
		* \brief Defining the position of the sensor. values: front or rear
		*/
		attribute DOMString position;
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/    		
		attribute unsigned short left;
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/
		attribute unsigned short midLeft;	
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/
		attribute unsigned short midRigth;
		/**
		* \brief Destination to an object sensed by the sensor in cm. Minimum distance is 20 cm. Maximum distance is 250 cm. A value of 254 indiactes that no object has been sensed.
		*/
		attribute unsigned short rigth;

		/**
		* \brief Method to set initial values of ParkSensor event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param position position of the sensors: front or rear
		* \param left data from the left sensor
		* \param midLeft data from the middle left sensor
		* \param midRight data from the middle right sensor
		* \param right data from the right sensor
		*/
		void initParkControllEvent(boolean bubbles, boolean cancelable, DOMString position, short left, short midLeft, short midRight, short right);
	};
	/**
	* \brief This interface defines a Climate Controll Event. 
	* A listener can registered by vehicle.addEventLister("climatecontrol",listener,false);
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface ClimateControllEvent : Event{
		
		/**
		* \brief Method to set initial values of ParkSensor event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		*/
		void initParkControllEvent(boolean bubbles, boolean cancelable);
	};
	/**
	* \brief This interface defines a Acceleration Event. 
	* A listener can registered by vehicle.addEventLister("acceleration",listener,false);
	* Question: Can we use the device orientation event for that?
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface AccelerationEvent : Event{
		/**
		* \brief The current vehicle acceleration in lateral direction. The unit is is m/s². 	
		*/	
		attribute float lateral;
		/**
		* \brief The current vehicle acceleration in longitudinal direction. The unit is is m/s². 	
		*/	
		attribute float longitudinal;
		/**
		* \brief Method to set initial values of ParkSensor event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param lateral acceleration in lateral direction
		* \param longitudinal acceleration in longitudinal direction
		*/
		void initAccelerationEvent(boolean bubbles, boolean cancelable, float lateral, float longitudinal);
	};
	/**
	* \brief This interface defines a speed Event. 
	* A listener can registered by vehicle.addEventLister("speed",listener,false);
	* Question: Do we need this information? The Coordinates interface of the geolocation API already provides speed information (see http://dev.w3.org/geo/api/spec-source.html#coordinates_interface)
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface SpeedEvent : Event{
		/**
		* \brief The current speed of the vehicle. The unit is kmph/10. 	
		*/	
		attribute unsigned short speed;
		/**
		* \brief Method to set initial values of ParkSensor event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param speed current speed of the vehicle
		*/
		void initAccelerationEvent(boolean bubbles, boolean cancelable, short speed);
	};
	/**
	* \brief This interface defines a Wheel Speed Event. 
	* A listener can registered by vehicle.addEventLister("wheel-speed",listener,false);
	* Question: Do we need this? Or shall we just provide a singel speed Event or use the Geolocation API for speed?
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface WheelSpeedEvent : Event{
		/**
		* \brief The current speed of the front left wheel. The unit is kmph. 	
		*/	
		attribute unsigned short frontLeft;
		/**
		* \brief The current speed of the front right wheel. The unit is kmph. 	
		*/	
		attribute unsigned short frontRight;
		/**
		* \brief The current speed of the rear left wheel. The unit is kmph. 	
		*/	
		attribute unsigned short rearLeft;
		/**
		* \brief The current speed of the rear right wheel. The unit is kmph. 	
		*/	
		attribute unsigned short rearRight;
		/**
		* \brief Method to set initial values of ParkSensor event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param frontLeft speed of the front left wheel
		* \param frontRight speed of the front right wheel
		* \param rearLeft speed of the rear left wheel
		* \param rearRight speed of the rear wheel wheel
		*/
		void initAccelerationEvent(boolean bubbles, boolean cancelable, short frontLeft, short frontRight, short rearLeft, short rearRight);
	};
	/**
	* \brief This interface defines a shift Event. 
	* A listener can registered by vehicle.addEventLister("gear",listener,false);
	* Question: Can we use the device orientation event for that?
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface ShiftEvent : Event{
		/**
		* \brief constant describing the first gear	
		*/	
		const short GEAR_ONE = 1;
		/**
		* \brief constant describing the second gear	
		*/	
		const short GEAR_TWO = 2;
		/**
		* \brief constant describing the third gear	
		*/	
		const short GEAR_THREE = 3;
		/**
		* \brief constant describing the fourth gear	
		*/	
		const short GEAR_FOUR = 4;		
		/**
		* \brief constant describing the fifth gear	
		*/	
		const short GEAR_FIFE = 5;
		/**
		* \brief constant describing the sixth gear	
		*/	
		const short GEAR_SIX = 6;
		/**
		* \brief constant describing the seventh gear	
		*/	
		const short GEAR_SEVEN = 7;
		/**
		* \brief constant describing the revers gear	
		*/	
		const short GEAR_REVERS = -1;
		/**
		* \brief constant describing the neutral gear	
		*/	
		const short GEAR_NEUTRAL = 0;
		/**
		* \brief constant describing the parking gear	
		*/	
		const short GEAR_PARKING = -2;		
		/**
		* \brief The current speed of the vehicle. The unit is kmph/10. 	
		*/	
		attribute short gear;
		/**
		* \brief Method to set initial values a shift event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param gear current gear of the engine
		*/
		void initAccelerationEvent(boolean bubbles, boolean cancelable, short gear);
	};
		/**
	* \brief This interface defines a Controll Event. 
	* Event signals a change for controll inside the vehilce (e.g. lights, wiper, etc.)
	* \code
	*
	* \endcode
	*/
	[NoInterfaceObject]
	interface ControlEvent : Event{
		/**
		* \brief constant indicates change for the fog light in the front
		*/	
		const DOMString LIGHTS_FOG_FRONT = "lights-fog-front";
		/**
		* \brief constant indicates change for the fog light in the rear
		*/	
		const DOMString LIGHTS_FOG_REAR = "lights-fog-rear";
		/**
		* \brief constant indicates change for left turn signal
		*/	
		const DOMString LIGHTS_SIGNAL_LEFT = "lights-signal-left";
		/**
		* \brief constant indicates change for right turn signal
		*/	
		const DOMString LIGHTS_SIGNAL_RIGHT = "lights-signal-right";
		/**
		* \brief constant indicates change for warn signal
		*/	
		const DOMString LIGHTS_SIGNAL_WARN = "lights-signal-warn";	
		/**
		* \brief constant indicates change for the parking lights
		*/	
		const DOMString LIGHTS_PARKING = "lights-parking";
		/**
		* \brief constant indicates change for the hibeam
		*/	
		const DOMString LIGHTS_HIBEAM = "lights-hibeam";
		/**
		* \brief constant indicates change for the headlight
		*/	
		const DOMString LIGHTS_HEAD = "lights-head";
		/**
		* \brief constant indicates front window is beeing washed
		*/	
		const DOMString WHIPER_FRONT_WASH = "whiper-front-wash";
		/**
		* \brief constant indicates rear window is beeing washed
		*/	
		const DOMString WHIPER_REAR_WASH = "whiper-rear-wash";
		/**
		* \brief constant indicates whiper is in automatic mode
		*/	
		const DOMString WHIPER_AUTOMATIC = "whiper-automatic";
		/**
		* \brief constant indicates front whiper is beeing used once
		*/	
		const DOMString WHIPER_FRONT_ONCE = "whiper-front-once";
		/**
		* \brief constant indicates rear whiper is beeing used once
		*/	
		const DOMString WHIPER_REAR_ONCE = "whiper-front-once";
		/**
		* \brief constant indicates front whiper is on level1
		*/	
		const DOMString WHIPER_FRONT_LEVEL1 = "whiper-front-level1";
		/**
		* \brief constant indicates front whiper is on level2
		*/	
		const DOMString WHIPER_FRONT_LEVEL2 = "whiper-front-level2";
		

		/**
		* \brief describes the source of the event	
		*/	
		attribute DOMString conrolId;
		/**
		* \brief describes the status of the control unit	
		*/	
		attribute boolean active;
		/**
		* \brief Method to set initial values of controll event
		* \code
		* // TBD
		* \endcode
		* \param bubbles True if event bubbles
		* \param cancelable True if event cancelable
		* \param controlId specifies the control unit
		* \param active specifies if the unit is active or not
		*/
		void initControlEvent(boolean bubbles, boolean cancelable, DOMString controlId, boolean active);
	};
	
	
};


