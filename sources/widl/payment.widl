/**<p> Interface for Payment functions
 * \name Payment API
 * \brief Interface for Payment functions.
 *
 * This API provides generic shopping basket functionality to provide in-app payment.
 *
 * It is not linked to a specific payment service provider and is designed to be 
 * sufficiently generic to be mapable to various payment services like GSMA OneAPI,
 * Andoid Payment API or PayPal. 
 *
 * \def-api-feature http://webinos.org/api/payment
 * Identifies all payment interactions. 
 * 
 * \author Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 */
 
  /**
   * \brief The WebinosPayment interface describes the part of the payment API accessible through the webinos object.
   */
   [NoInterfaceObject] interface WebinosPayment {
     /**
      * \brief webinos.payment object.
      */
      readonly attribute Payment payment;
   };

    /**
   * \brief The Payment interface
   *
   * The Payment interface provides access to payment functionality.
   *
   * The API supports creation of a shopping basket, adding items to the shopping
   * basket, proceeding to checkout and releasing the shopping basket.
   *
   * This essentially echoes the usual 'shopping basket' system used on many web sites.
   *
   * The code example below refunds the user for a returned CD and charges for
   * the deluxe edition of that CD, demonstarting charging and refunding payments.
   *
   * \code
   *    
   *        webinons.payment.createShoppingBasket(openBasketSuccess, paymentFailure, "PayPal", "mymail@provider.com", "ShopName12345");
   *        var myBasket = null;
   *
   *        // Define the openBasketSuccess success callback.
   *        function openBasketSuccess(basket) {
   *                alert("Shopping basket was opened successfully");
   *                myBasket = basket;  
   *                // refound for a CD
   *                myBasket.addItem(CD2346278, paymentFailure,
   *                    {  productID: 'DCD2346233', 
   *                       description: 'Best of Ladytron 00-10 by Ladytron (Audio CD - 2011)', 
   *                       currency: 'EUR',
   *                       itemPrice: -14.99,
   *                       itemCount: 1}
   *        }
   *
   *        // Define the refundItemSuccess success callback.
   *        function refundSuccess() {
   *                alert("Adding of refunding item was handled successfully");
   *                // charge for the deluxe CD
   *                myBasket.addItem(addItemSuccess, paymentFailure,
   *                    {  productID: 'DCD2346233', 
   *                       description: 'Best of Ladytron 00-10 (Deluxe Edition) by Ladytron (Audio CD - 2011)', 
   *                       currency: 'EUR',
   *                       itemPrice: 17.98,
   *                       itemCount: 1}
   *        }
   *
   *        // Define the addItemSuccess success callback.
   *        function addItemSuccess() {
   *                alert("Adding of new item was handled successfully");
   *                // now close the bill and perform the actual payment
   *                myBasket.update(updateSuccess, paymentFailure);
   *        }
   *        
   *        // Define the updateSuccess success callback.
   *        function updateSuccess() {
   *                alert("Total amount is: "myBasket.totalAmount+" Tax is "+myBasket.tax);
   *                // now close the bill and perform the actual payment
   *                myBasket.checkout(checkoutSuccess, paymentFailure);
   *        }
   *        
   *        // Define the checkoutSuccess success callback.
   *        function checkoutSuccess() {
   *                alert("Checkout handled successfully - payment was performed.");
   *                 if (myBasket != null) myBasket.release();
   *        }        
   *
   *        // Define the paymentFailure failure callback.
   *        function paymentFailure(e) {   
   *                alert("Failure occured during payment.");
   *                 if (myBasket != null) myBasket.release();
   *        }
   *
   * \endcode
   *
   *
   */



 
[NoInterfaceObject] interface Payment { 
      /**
       * \brief Creates a shopping basket
       *
       * \param successCallback Callback issued when the shopping basket is created
       * \param errorCallback Callback issued if an error occurs during the creation of the shopping basket
       * \param serviceProviderID is the name of the payment provider to be used
       * \param customerID is identification of the person making the payment as known to the payment provider
       * \param shopID is the identification of the shop the payment is made to
       * \return PendingOperation enabling the requester to cancel this request.
       */
        PendingOperation createShoppingBasket(SuccessShoppingBasketCallback successCallback, PaymentErrorCB errorCallback,
        DOMString serviceProviderID, DOMString customerID, DOMString shopID);
  };
  
    /**
   * \brief The ShoppingBasket interface provides access to a shopping basket
   *
   * The shopping basket represents a current payment action and allows to 
   * add a number of items to the basket before proceeding to checkout.
   *
   **/
   
[NoInterfaceObject] interface ShoppingBasket {   

        /**
       * \brief List of items currently in the shopping basket. 
       * 
       * These are the items that have been added with addItem.
       *
       * No exceptions
       */
        readonly attribute ShoppingItem[] items; 
        /**
       * \brief Automatically generated extra items, typically rebates, taxes and shipping costs.
       *
       * These items are automatically added to the shopping basket by update()
       * (or after the addition of an item to the basket).
       * 
       * These items can contain such 'virtual' items as payback schemes, rebates, taxes,
       * shipping costs and other items that are calculated on the basis of the regular
       * items added.
       *
       * No exceptions
       */
        readonly attribute ShoppingItem[] extras; 
        /**
       * \brief The total amount that will be charged to the user on checkout.
       *
       * Will be updated by update(), may be updated by addItem().
       *
       * No exceptions
       */
        readonly attribute float totalBill; 
        
        /**
       * \brief Adds an item to a shopping basket.
       *
       * \param successCallback Callback issued when the adding of the item to the shopping basket is correctly finished.
       * \param errorCallback Callback issued if an error occurs during adding the amount       
       * \param item the item to purchase
       * \return PendingOperation enabling the requester to cancel this request.
       */
        PendingOperation addItem(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback, ShoppingItem item);

        /**
       * \brief Updates the shopping basket
       *
       * The update function updates the values in the shopping baskets, based on 
       * the added items. Such updates may include taxes, calculating the total
       * amount, shipping costs or rebate calculations. 
       *
       * While this, preferably, is internally updated after the adding of each item,
       * such an update might require communication with the payment service provider
       * and it might be undesireable in specific implementations to perform such
       * a query after each individual item, so a specifc update function is provided
       * to force such an update.
       *
       * The checkout function will always perform an update internally before
       * payment.              
       *
       * \param successCallback Callback issued when the update is performed
       * \param errorCallback Callback issued if an error occurs during update 
       * \return PendingOperation enabling the requester to cancel this request.
       */
        PendingOperation update(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback);

        /**
       * \brief Performs the checkout of the shopping basket.
       *
       * The items in the shopping basket will be charged to the shopper.
       *
       * Depending on the implementation of the actual payment service, this function
       * might cause the checkout screen of the payment service provider to be displayed.
       *
       * \param successCallback Callback issued when the checkout is performed and payment is made
       * \param errorCallback Callback issued if an error occurs during adding the amount       
       * \return PendingOperation enabling the requester to cancel this request.
       */
        PendingOperation checkout(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback);

        /**
       * \brief Releases a shopping basket.
       *
       * The current shopping basket will be released.
       *
       * If no checkout has been performed, the initiated shopping transaction will be cancelled.
       *
       * \return void
       */
        void release();
  };

    /**
   * \brief The ShoppingItem captures the attributes of a single shopping product
   *
   * The shopping basket represents a current payment action and allows to 
   * add a number of items to the basket before proceeding to checkout.
   *
   **/
   [NoInterfaceObject] interface ShoppingItem {
        /**
       * \brief An id that allows the shop to identify the purchased item
       *
       * No exceptions
       */
         attribute DOMString productID;
        /**
       * \brief A human-readable text to appear on the bill, so the user can easily see what they bought.
       *
       * No exceptions
       */
         attribute DOMString description;
        /**
       * \brief The 3-figure code as per ISO 4217.
       *
       * No exceptions
       */
         attribute DOMString currency;
        /**
       * \brief The price per individual item in the currency given above, a negative number represents a refund.
       *
       * No exceptions
       */
         attribute float itemPrice;
        /**
       * \brief The number of identical items purchased
       *
       * No exceptions
       */
         attribute unsigned long itemCount;
       /**
       * \brief Price for all products in this shopping item.
       *
       * Typically this is itemPrice*itemCount, but special '3 for 2' rebates might apply.
       *
       * Updated by the shopping basket update function.
       *
       * No exceptions
       *
       */
         readonly attribute unsigned long itemsPrice;
    };  

        /**
         * \brief Callback for successful creation of a shopping basket
         */
        [Callback=FunctionOnly, NoInterfaceObject]
        interface SuccessShoppingBasketCallback {
        /**
         * \brief Callback for successful creation of a shopping basket
         * \param basket The shopping basket to which items can be added.
         * \return void
         */
            void onSuccess  (ShoppingBasket basket);
        };
        
        /**
         * \brief Callback for successful payment related functions
         */
        [Callback=FunctionOnly, NoInterfaceObject]
        interface PaymentSuccessCB {
        /**
         * \brief Callback for successful of payment related functions
         * \return void
         */
            void onSuccess  ();
        };
                
        /**
         * \brief Callback for errors during payment related functions
         */
        [Callback=FunctionOnly, NoInterfaceObject]
        interface PaymentErrorCB {
        /**
         * \brief Callback for errors during payment related functions
         * \param error The Payment API related error object of an unsuccessful asynchronous operation. 
         * \return void
         */
            void onError (PaymentError error);
        };

    /**
     * \brief The PendingOperation interface
     *
     * The PendingOperation interface describes objects that are returned by asynchronous methods that are cancellable. It makes it possible to bring 
     * these operations to a stop if they haven't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.\n
     *
     */
     [NoInterfaceObject] interface PendingOperation {
    /**
     * \brief Method Cancel
     *
     *  Cancel the pending asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return. No success or error callback for the pending operation will be invoked.
     */
        void cancel ();
     };


        
        /**
         * \brief Payment specific errors.
         *
         * The PaymentError interface encapsulates all errors in the manipulation of payments objects in the Payment API. 
         */
        interface PaymentError {


                
                /**
                 * \brief Bill is already open
                 */
                const unsigned short PAYMENT_SHOPPING_BASKET_OPEN_ERROR = 1;

                /**
                 * \brief Bill is not open
                 */
                const unsigned short PAYMENT_SHOPPING_BASKET_NOT_OPEN_ERROR = 2;

                /**
                 * \brief Charging operation failed, the charge was not applied
                 */
                const unsigned short PAYMENT_CHARGE_FAILED = 3;                

                /**
                 * \brief Refunds not supported
                 */
                const unsigned short PAYMENT_REFUND_NOT_SUPPORTED = 4;

                /**
                 * \brief  Refund failed
                 */
                const unsigned short PAYMENT_REFUND_FAILED = 5;                

                /**
                 * \brief Chargeable amount exceeded
                 */
                const unsigned short PAYMENT_CHARGEABLE_EXCEEDED = 6;

                /**
                 * \brief Chargeable Authentication failed. Payment credentials are incorrect. 
                 */
                const unsigned short PAYMENT_AUTHENTICATION_FAILED = 7;

        /**
       * \brief An error code assigned by an implementation when an error has occurred in Payment processing.
       *
       * No exceptions.
       */
        readonly attribute unsigned short code;
        /**
       * \brief A text describing an error occuring in the Payment in human readable form.
       *
       * No exceptions.
       */    
             readonly attribute DOMString message;
  };  


     Webinos implements WebinosPayment;

