/**<p>The webinos The Device Interaction API allow you to control various components in the device. </p>
 * \name Device Interaction API 
 *
 *  This module provides a mechanism to interact with the end-user through features such as:
 *  \n    device vibrator,
 *  \n    device notifier,
 *  \n    screen backlight,
 *  \n    device Wallpaper.
 *
 * All the functionality of this module is accessed through the object deviceapis.deviceinteraction which is an instance of the DeviceInteractionManager interface. In case any functionality is not supported, a DOMException exception will be thrown with code NOT_SUPPORTED_ERR when the related method of the DeviceInteractionManager interface is invoked.
 *   
 * http://wacapps.net/api/deviceinteraction
 * 
 * Allows access to the device interaction module 
 *
 * \author WAC Device API Specifications 2.1, 30 April 2012
 * \author Normative: <a href="http://specs.wacapps.net/deviceinteraction/index.html">WAC Device Interaction API </a>
 * \author WIDL version for webinos created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 2.1
 */
 
 
/**
 * \brief There will be a deviceapis.deviceinteraction object that allows accessing the functionality of the deviceinteraction module. 
 */
interface DeviceapisDeviceInteractionManager {
    readonly attribute DeviceInteractionManager deviceinteraction;
};
 
Deviceapis implements DeviceapisDeviceInteractionManager;

/**
 * \brief This is the top-level interface for the deviceinteraction API that provides access to the module functionalities.
 *
 * Example
 * \code
var di = deviceapis.deviceinteraction;

di.lightOn(function() {
	console.log("Lighting for 1 second");
},
function() {
	console.log("Failed to light");
},
1000);

di.startNotify(
function() {
	console.log("Notifying for 1 second");
},
function() {
	console.log("Failed to notify");
},
1000);

di.startVibrate(
function() {
	console.log("Vibrating for 1 second");
},
function() {
	console.log("Failed to vibrate");
},
1000);
 * \endcode
 */

interface DeviceInteractionManager {

 
/**
 * \brief  Produces a beep/vibrate/backlight-on from the device for the supplied duration.
 * 
 * When this method is invoked, the notification MUST be based on the active profile:
 * \n 1. If the device volume is set to a value above 0, then device beeper MUST be activated for the time specified in the duration input parameter.
 * \n 2. If the device is in vibrate mode (i.e. sound volume is set to 0 and vibrator alert is active), the device MUST vibrate for the time specified.
 * \n 3. If the device is in silent mode (i.e. sound volume is 0 and vibrator alert is deactivated), the main screen backlight MUST be switched on for the time specified in the duration input parameter.
 *  
 * The implementation MAY impose a limit on the duration of a notification that causes the notification to stop before the specified duration expires. If the duration input argument is 0, the implementation MUST perform this operation until this limit is reached or the stopNotify method is invoked.
 * 
 * The success callback MUST be invoked as soon as the implementation determines that the notification can be realized. If for some reason (security or other) cannot be realized the error callback MUST be called with the appropriate error code:
 * \n  INVALID_VALUES_ERR if any input parameter has invalid values.
 * \n  SECURITY_ERR if the operation is not allowed.
 * \n  NOT_SUPPORTED_ERR if the feature is not supported.
 * \n  UNKNOWN_ERR in any other case.
 * 
 * If the stopNotify method is invoked before the supplied notification duration expires, the active notification (beep/vibrate/backlight-on) MUST be terminated.
 *  
 * Example
 * \code
 * try {
 * 	deviceapis.deviceinteraction.startNotify(function() {
 * 		console.log("Notifying indefinitely");
 * 	},
 * 	function(e) {
 * 		console.log("Failed to notify: " + e);
 * 	},
 * 	0);
 * } catch(e) {
 * 	console.log("Exception thrown: " + e);
 * }
 * \endcode
 * \param successCallback Function to call on successfully retrieving a property value
 * \param errorCallback Function to call if property value could not be retrieved
 * \param duration Duration of notification
 */
    void startNotify(Function successCallback,
	                              optional ErrorCB? errorCallback,
 	                              long duration) ;

    void startVibrate(Function successCallback,
                                  optional ErrorCB? errorCallback,
                                  optional unsigned long duration,
                                  optional DOMString pattern);

    void lightOn(Function successCallback,
	                          optional ErrorCB? errorCallback,
                            long duration);

    void setWallpaper(Function successCallback,
                                  optional ErrorCB? errorCallback,
                                  DOMString fileName);
    void stopNotify();
    void stopVibrate();
    void lightOff();
};
