
/**
 * \brief W3C based Calendar interface.
 *
 * The Calendar API defines a high-level interface to access Calendar information such as events, reminders, alarms and other calendar information.
 *
 * The API itself is designed to be agnostic of any underlying calendaring service sources.
 *
 * A set of Security and Privacy Considerations are presented for the discretion of both implementors of the Calendar API and recipients of calendaring information (i.e. web pages). This specification provides a set of non-normative User Interaction Guidelines demonstrating an example user experience that is compliant with the Security and Privacy Considerations provided herein.
 *
 * This specification also provides informative examples illustrating how to add and update calendar events, utilising existing web platform APIs. 
 *
 * Note that while the W3C version, on which this specification is based on, provides only the ServiceCalendar
 * to retrieve calendars, in webinos calendars can also be retrieved using the findServices method of the
 * Service Discovery API.
 * 
 * \author W3C Working Draft 19 April 2011
 * \author WIDL version for webinos created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 1.0
 */
 
 
module Calendar {

        /**
         * \brief The ServiceCalendar interface is exposed on the Navigator interface [NAVIGATOR]. 
         */
        [NoInterfaceObject]
        interface ServiceCalendar {
           /**
           * \brief The root node from which the calendar functionality can be accessed. 
           *
           * No exceptions.
           */
            readonly attribute Calendar calendar;
        };
                
        /**
         * \brief The The Calendar interface provides a method to retrieve calendaring information from a user's calendar. 
         */       
        [NoInterfaceObject]
        interface Calendar {       
                         /**
                 * \brief Find calendar event items in the calendar based on an CalendarEventFilter object.
                 *
                 * This method takes between one and three arguments. When called, it immediately returns, and then asynchronously start a find calendar event items process defined as follows:
                 *
                 * If there are any tasks from the device task source in one of the task queues (i.e. an existing findEvents() operation is still pending a response), and the current method was invoked with a non-null errorCB argument, dispatch an error event with a PENDING_OPERATION_ERROR code value.
                 *
                 * Search for calendar event items in the calendar according to the calendar item search processing rules.
                 *
                 * If the attempt was successful, dispatch a success event. If the attempt fails, and the method was invoked with a non-null errorCB argument, this method must dispatch an error event with the code attribute set according to the type of failure that has occurred.
                 *
                 * \param successCB Function to call when the asynchronous operation completes successfully.
                 * \param errorCB Function to call when the asynchronous operation fails.
                 * \param options The options to apply to the output of this method.                                 
                 * \return caller void                 
                 */ 
            caller void findEvents (in CalendarEventSuccessCB successCB, in optional CalendarErrorCB errorCB, in optional CalendarFindOptions options);
        };

        /**
         * \brief The CalendarEvent interface captures a calendar event object.
         */    
        [NoInterfaceObject]
        interface CalendarEvent {
          /**
           * \brief A globally unique identifier for the given CalendarEvent object. Each CalendarEvent referenced from Calendar must include a non-empty id value.
           *
           * An implementation must maintain this globally unique resource identifier when a calendar event is added to, or present within, a Calendar.
           * 
           * An implementation may use an IANA registered identifier format. The value can also be a non-standard format.
           *
           * No exceptions.
           */
            readonly attribute DOMString          id;
          /**
           * \brief A description of the event. 
           *
           * \code
           * {description: "Meeting with Joe's team"}
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString          description;
          /**
           * \brief A plain text description of the location of the event. 
           *
           * \code
           * {location: 'Conf call #+4402000000001'}
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString?         location;
          /**
           * \brief A summary of the event. 
           *
           * \code
           * {summary: "Agenda: * Introductions* AoB"}
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString?         summary;
          /**
           * \brief The start date and time of the event as a valid date or time string.
           *
           * \code
           * {start: '2011-03-24T09:00-08:00'} // Event starts on March 24, 2011 @ 5pm (UTC)
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString          start;
          /**
           * \brief The end date and time of the event as a valid date or time string.
           *
           * \code
           * {end: '2011-03-24T10:00:00-08:00'} // Event ends on March 24, 2011 @ 6pm (UTC)
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString?         end;
          /**
           * \brief An indication of the user's status of the event.
           *
           * This parameter may be set to one of the following constants:
           *
           * \code
           * {status: 'pending'} // Event is awaiting user action
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString?         status;
          /**
           * \brief An indication of the display status to set for the event.
           *
           * This parameter may be set to one of the following constants:
           * 
           * 'transparent', 'opaque'.
           *
           * \code
           * {freebusy: 'transparent'} // Mark event as transparent in Calendar
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString?         transparency;
          /**
           * \brief The recurrence or repetition rule for this event 
           *
           * \code
           * {recurrence: {frequency: 'daily'}}     // Event occurs every day and never expires
           * \endcode
           * \code
           * {recurrence: {frequency: 'weekly',     // Event occurs weekly...
           *  daysInWeek: [2, 4],      // ...every Tuesday and Thursday
           *  expires: '2011-06-11T12:00:00-04:00'}} // Event expires on or before June 11, 2011 @ 4pm (UTC)
           * \endcode
           * \code
           * {recurrence: {frequency: 'weekly',     // Event occurs weekly...on every Wednesday
           *                           // (if we say the 'start' attribute is March 24, 2011 @ 2pm (Wednesday) as  
           *                           // shown above and no daysInWeek attribute is provided)
           *  expires: '2011-06-11T11:00:00-05:00'}} // Event expires on or before June 11, 2011 @ 4pm (UTC)
           * \endcode
           * \code
           * {recurrence: {frequency: 'monthly',    // Event occurs monthly...
           *  daysInMonth: [-5],       // ...5 days before the end of each month 
           * \endcode
           * \code
           * {recurrence: {frequency: 'monthly',    // Event occurs monthly...on the 24th day of every month
           *                          // (if we say the 'start' attribute is March 24, 2011 @ 2pm as  
           *                           // shown above and no daysInMonth attribute is provided)
           *  expires: '2011-06-11T20:00:00+04:00'}} // Event expires on or before June 11, 2011 @ 4pm (UTC)
           * \endcode
           * \code
           * {recurrence: {frequency: 'yearly',     // Event occurs yearly...on the 24th day of every March
           *                           // (if we say the 'start' attribute is March 24, 2011 @ 2pm as  
           *                           // shown above and no daysInMonth attribute is provided)
           *  expires: '2011-06-11T16:00:00+00:00'}} // Event expires on or before June 11, 2011 @ 4pm (UTC)
           * \endcode
           * \code
           * {recurrence: {frequency: 'yearly',     // Event occurs yearly...
           *   daysInMonth: [24],       // ...every 24th day... 
           *  monthsInYear: [3, 6],    // ...in every March and June
           *  expires: '2011-06-11T16:00:00Z'}} // Event expires on or before June 11, 2011 @ 4pm (UTC)
           * \endcode
           * \code
           * {recurrence: {frequency: 'yearly',     // Event occurs yearly...
           *  daysInYear: [168],       // ...every 168th day of each year 
           *  expires: '2011-06-11T21:45:00+05:45'}} // Event expires on or before June 11, 2011 @ 4pm (UTC)
           * \endcode
           *
           * No exceptions.
           */
             attribute CalendarRepeatRule? recurrence;
          /**
           * \brief A reminder for the event.
           *
           * This attribute can be specified as a positive valid date or time string, denoting a one-time reminder or as a negative value in milliseconds denoting a relative relationship to the start time of the calendar event.
           * 
           * A relative reminder is recommended for setting a reminder for recurrent events.
           *
           * \code
           * {reminder: '2011-03-24T13:00:00+00:00'}  // Remind ONCE on March 24, 2011 @ 1pm (UTC)
           * \endcode
           * \code
           * {reminder: '-3600000'}       // Remind 1 hour before every occurrence of this event
           * \endcode
           *
           * No exceptions.
           */
             attribute DOMString?         reminder;
        };

        /**
         * \brief The CalendarRepeatRule interface captures the recurrence of a calendar event item. 
         */       
        [NoInterfaceObject]
        interface CalendarRepeatRule {
          /**
           * \brief The frequency of the CalendarRepeatRule.
           *
           * This parameter must be set to one of the following constants: 'daily', 'weekly', 'monthly', 'yearly'.
           *
           * Additional values must be ignored for this attribute.
           *
           * \code
           * {frequency: 'monthly'}  // Event repeats on a monthly basis
           * \endcode
           *
           * No exceptions.
           */      
            attribute DOMString?      frequency;
          /**
           * \brief A positive integer defining how often the recurrence rule must repeat.
           *
           * For interval N, recurrence rule repeats every Nth frequency. Default interval value is 1, that is every day for a daily, every week for a weekly, every month for a monthly and every year for a yearly.
           *
           * If this parameter is set to null the event item does not have any fixed interval and the event interal should be derived from the other CalendarRepeatRule attributes.
           *
           * \code
           * {interval: 1}
           * \endcode
           *
           * No exceptions.
           */
            attribute unsigned short? interval;
          /**
           * \brief The date and time to which the CalendarRepeatRule applies as a valid date or time string.
           *
           *If this parameter is set to null the event item does not have any fixed expiry date and the event is scheduled to continue indefintely.
           *
           * \code
           * {expires: '2011-08-01T01:00:00+01:00'} // Event repeats until August 1, 2011 @ 12am (UTC)
           * \endcode
           *
           * No exceptions.
           */
            attribute DOMString?      expires;
          /**
           * \brief One or more dates and times to which the CalendarRepeatRule does not apply as valid date or time string strings.
           *
           * If this parameter is set to null the event item does not have any exception dates and/or times.
           *
           * \code
           * {exceptionDates: ['2011-12-22', '2011-12-29']} // Event does not occur on December 22, 2011 and December 29, 2011
           * \endcode
           *
           * No exceptions.
           */
            attribute DOMString[]     exceptionDates;
          /**
           * \brief The day or days of the week for which the CalendarRepeatRule applies. If this attribute is set to null then the day of the CalendarEvent.start value is used to derive the recurrent dates.
           *
           * NOTE: This property only applies to weekly occurrences. If CalendarRepeatRule.frequency is not set to 'weekly' this property must be ignored.
           *
           * The possible values are:
           * 0 (Sunday)
           *
           * 1 (Monday)
           *
           * 2 (Tuesday)
           *
           * 3 (Wednesday)
           *
           * 4 (Thursday)
           *
           * 5 (Friday)
           *
           * 6 (Saturday)
           *
           * \code
           * {daysInWeek: [0, 6]} // A weekly event repeats every Sunday and Saturday
           * \endcode
           *
           * No exceptions.
           */
            attribute short[]         daysInWeek;
          /**
           * \brief The day or days of the month for which the CalendarRepeatRule applies. If this attribute is set to null then the day of the month of the CalendarEvent.start value is used to derive the recurrent dates.
           *
           * NOTE: This property only applies to monthly occurrences. If CalendarRepeatRule.frequency is not set to 'monthly' this property must be ignored.
           *
           * The possible values are:
           *
           * [1..31] (number of days from the first day of the month)
           * [0..-30] (number of days before the last day of the month)
           *
           * \code
           * {daysInMonth: [4, -10]} // A monthly event repeats on the 4th and 10th to last day of each month.
           * \endcode
           *
           * No exceptions.
           */
            attribute short[]         daysInMonth;
          /**
           * \brief The day or days of the month for which the CalendarRepeatRule applies. If this attribute is set to null then the day of the year of the CalendarEvent.start value is used to derive the recurrent dates.
           *
           * NOTE: This property only applies to yearly occurrences. If CalendarRepeatRule.frequency is not set to 'yearly' this property must be ignored.
           *
           * The possible values are:
           *
           * [1..365] (number of days from the first day of the year)
           * [0..-364] (number of days before the last day of the year)
           *
           * \code
           * {daysInYear: [262, -102]} // A yearly event repeats on day 262 and 102 days before the last day of each year.
           * \endcode
           *
           * No exceptions.
           */
            attribute short[]         daysInYear;
          /**
           * \brief The week or weeks of the month for which the CalendarRepeatRule applies. If this attribute is set to null then the week of the month of the CalendarEvent.start value is used to derive the recurrent dates.
           *
           * NOTE: This property only applies to monthly occurrences. If CalendarRepeatRule.frequency is not set to 'monthly' this property must be ignored.
           *  The possible values are:
           * 
           *    [1..4] (number of weeks from the first week of the month)
           *    [0..-3] (number of weeks before the last week of the month)
           *
           * \code
           * {weeksInMonth: [1, -1]} // A monthly event repeats on the first and last week of each month.
           * \endcode
           *
           * No exceptions.
           */
            attribute short[]         weeksInMonth;
          /**
           * \brief The month or months of the year for which the CalendarRepeatRule applies. If this attribute is set to null then the month of the year of the CalendarEvent.start value is used to derive the recurrent dates.
           *
           * NOTE: This property only applies to yearly occurrences. If CalendarRepeatRule.frequency is not set to 'yearly' this property must be ignored.
           * 
           * The possible values are:
           * 
           * 1 (January)
           *
           * 2 (February)
           *
           * 3 (March)
           *
           * 4 (April)
           *
           * 5 (May)
           *
           * 6 (June)
           *
           * 7 (July)
           *
           * 8 (August)
           * 
           * 9 (September)
           *
           * 10 (October)
           *
           * 11 (November)
           * 
           * 12 (December)
           *
           * \code
           * {monthsInYear: [4, 10]} // A yearly event repeats in April and October each year.
           * \endcode
           *
           * No exceptions.
           */
            attribute short[]         monthsInYear;
        };

        /**
         * \brief The CalendarFindOptions interface describes the options that can be applied to calendar searching. 
         */       
        [NoInterfaceObject]
        interface CalendarFindOptions {
          /**
           * \brief A search filter with which to search and initially filter the Calendar database. 
           *
           * No exceptions.
           */
            attribute CalendarEventFilter? filter;
          /**
           * \brief A boolean value to indicate whether multiple Calendar objects are returnable as part of the associated Calendar findEvents() operation.
           *
           * By default this option is set to true. 
           *
           * No exceptions.
           */
            attribute boolean?            multiple;
        };

        /**
         * \brief The CalendarEventFilter interface captures the searchable parameters for finding calendar event items.
         */       
        [NoInterfaceObject]
        interface CalendarEventFilter : CalendarEvent {
          /**
           * \brief Search for Calendar Events that start before the time provided as a valid date or time string.. 
           *
           * No exceptions.
           */
            attribute DOMString startBefore;
          /**
           * \brief Search for Calendar Events that start after the time provided as a valid date or time string.. 
           *
           * No exceptions.
           */
            attribute DOMString startAfter;
          /**
           * \brief Search for Calendar Events that end before the time provided as a valid date or time string.. 
           *
           * No exceptions.
           */
            attribute DOMString endBefore;
          /**
           * \brief Search for Calendar Events that end after the time provided as a valid date or time string.. 
           *
           * No exceptions.
           */
            attribute DOMString endAfter;
        };
        
        
        [Callback=FunctionOnly, NoInterfaceObject]
        interface CalendarEventSuccessCB {        
                 /**
                 * 
                 * \param eventObjs The resulting sequence of CalendarEvent objects resulting from a successful search operation. 
                 * \return void                 
                 */
            void onSuccess (in sequence<CalendarEvent> eventObjs);
        };
        
        [Callback=FunctionOnly, NoInterfaceObject]
        interface CalendarErrorCB {
                 /**
                 * 
                 * \param error The Calendar API related error object of an unsuccessful asynchronous operation. 
                 * \return void                 
                 */
            void onError (in CalendarError error);
        };
        
          /**
         * \brief he CalendarError interface encapsulates all errors in the manipulation of CalendarEvent objects in the Calendar API. 
         */       
      
        [NoInterfaceObject]
        interface CalendarError {
          /**
           * \brief An unknown error occurred. 
           */
            const unsigned short UNKNOWN_ERROR = 0;
          /**
           * \brief An invalid parameter was provided when the requested method was invoked. 
           */
            const unsigned short INVALID_ARGUMENT_ERROR = 1;
          /**
           * \brief The requested method timed out before it could be completed. 
           */
            const unsigned short TIMEOUT_ERROR = 2;
          /**
           * \brief If the user agent is currently waiting for a callback on a current findEvents() operation, as defined in this specification. 
           */
            const unsigned short PENDING_OPERATION_ERROR = 3;
          /**
           * \brief An error occurred in communication with the underlying implementation that meant the requested method could not complete. 
           */
            const unsigned short IO_ERROR = 4;
          /**
           * \brief The requested method is not supported by the current implementation. 
           */
            const unsigned short NOT_SUPPORTED_ERROR = 5;
          /**
           * \brief Access to the requested method was denied at the implementation or by the user. 
           */
            const unsigned short PERMISSION_DENIED_ERROR = 20;
          /**
           * \brief An error code assigned by an implementation when an error has occurred in Calendar API processing.
           *
           * No exceptions.
           */
            readonly attribute unsigned short code;
        };
            
};
