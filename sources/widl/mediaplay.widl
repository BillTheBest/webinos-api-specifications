/**<p>The Webinos MediaPlay API can be used to invoke playback of media files in external media player software, instead of using playback in the widget/browser runtime.</p>
 * \name MediaPlay API
 *
 * This API makes it possible for webinos applications to start and control playback 
 * of media files on external media players on the device currently used or on another device.\n
 * Use cases are for example:\n
 * - The format of the media file is not supported by the widget/browser runtime so an external media player has to be used\n
 * - The user just prefers to use another media player than the widget/browser runtime even though the file format is supported in the widget/browser runtime\n
 * - The user wants to play the media file using a media player on a remote device
 *
 * \def-api-feature http://webinos.org/api/mediaplay
 * \author ISMB, Paolo Vergori, Michele Morello
 * \author Fraunhofer FOKUS
 * \version 1.1
 */

/**
 * \brief The MediaPlayInterface provides methods for starting and controlling media playback on external media players. 
 * \code
	var mediaPlayService; // previously acquired service instance

	// add listener callback object
	mediaPlayService.addListener({
		onPlay: function() {
			// update the UI here, to indicate playback has started
		},
		onPause: function() {
			// update the UI here, to indicate playback has stop
		}
	});

	// start media playback
	mediaPlayService.play("http://url/to/a/cool/video.mkv", function() {
		// media playback has successfully started
	},
	function() {
		// there was an error starting playback
	});
 * \endcode
 *
 */
interface MediaPlayInterface : Service  {
	/**
	* \brief Add listener for event handling.
	* \param listener A MediaCallback object for event handling.
	* \param success Is called when adding this listener was successful.
	* \param error Is called when the listener could not be added.
	*/
	void addListener(
		MediaCallback listener,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Remove all listeners.
	* \param success Is called when removing listeners was successful.
	* \param error Is called when there was an error.
	*/
	void removeAllListeners(SuccessCallback? success, MediaPlayErrorCB? error);

	/**
	* \brief Get the play status of this service.
	* \param callback Is called with a PlayStatus object for the current state.
	* \param error Is called in case of error.
	*/
	void isPlaying(
		PlayStatusCallback callback,
		MediaPlayErrorCB error);

	/**
	* \brief Starts media playback.
	* \param URI The media to play.
	* \param success Is called when playback successfully started.
	* \param error Is called in case of error.
	*/
	void play(
		DOMString URI,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Pauses or restarts media playback.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void playPause(
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Stops media playback.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void stop(
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Moves current play position.
	* \param step SeekStep enum value specifying where to seek to.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void seek(
		SeekStep step,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Sets volume to specified value.
	* \param volume A percentage value between 0-100.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void setVolume(
		float volume,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Sets playback speed to specified value.
	* \param speed Enum to change playback speed.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void setSpeed(
		Speed speed,
		SuccessCallback success,
		MediaPlayErrorCB error);

};

/** \brief Type used with seek method. */
enum SeekStep { "FORWARD", "FORWARD_BIG", "BACKWARD", "BACKWARD_BIG" };
/** \brief Type used with playback speed method. */
enum Speed {"FASTER", "SLOWER" };

/**
* \brief MediaCallback interface definition
*/
callback interface MediaCallback {
	/**
	* \brief Callback used when playback is stopped by command.
	*/
	void onStop();

	/**
	* \brief Callback used when playback ends.
	*/
	void onEnd();

	/**
	* \brief Callback used when playback starts.
	* \param status PlayStatus object.
	*/
	void onPlay(PlayStatus status);

	/**
	* \brief Callback used when playback pauses.
	*/
	void onPause();

	/**
	* \brief Callback used when volume level changes.
	* \param volume Value for volume.
	*/
	void onVolume(int volume);

};

/**
* \brief Play status callback interface definition
*/
callback PlayStatusCallback = void (PlayStatus status);

/**
* \brief Error callback interface definition
*/
callback MediaPlayErrorCB = void (DOMError error);

/**
* \brief PlayStatus dictionary
*/
dictionary PlayStatus {
	/**
	* \brief Current playback state.
	*/
	boolean isPlaying;

	/**
	* \brief URI of the current media being played.
	*/
	DOMString currentMedia;

	/**
	* \brief Volume value.
	*/
	int volume;

	/**
	* \brief Length of media.
	*/
	int length;

	/**
	* \brief Length of media.
	*/
	int position;
};
