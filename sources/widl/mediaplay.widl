/**<p>The Webinos MediaPlay API can be used to invoke playback of media files in external media player software. It provides a means to play media files that are not supported by a widget/browser runtime.</p>
 * \name MediaPlay API
 *
 
 *
 * \def-api-feature http://webinos.org/api/mediaplay
 * \author ISMB, Paolo Vergori, Michele Morello
 * \author Fraunhofer FOKUS
 * \version 1.0
 */

/**
 * \brief The DiscoveryInterface interface provides functionality for discovery of services. 
 * \code
	var mediaPlayService; // previously acquired service instance

	// add listener callback object
	mediaPlayService.addListener({
		onPlay: function() {
			// update the UI here, to indicate playback has started
		},
		onPause: function() {
			// update the UI here, to indicate playback has stop
		}
	});

	// start media playback
	mediaPlayService.play("http://url/to/a/cool/video.mkv", function() {
		// media playback has successfully started
	},
	function() {
		// there was an error starting playback
	});
 * \endcode
 *
 */
interface MediaPlayInterface : Service  {
	/** \brief Constant for forwarding the play position. */
	const unsigned short FORWARD_STEP = 1;
	/** \brief Constant for forwarding the play position some more. */
	const unsigned short FORWARD_BIG_STEP = 2;
	/** \brief Constant for rewinding the play position. */
	const unsigned short BACKWARD_STEP = 3;
	/** \brief Constant for rewinding the play position some more. */
	const unsigned short BACKWARD_BIG_STEP = 4;
	/** \brief Constant for increased playback speed. */
	const unsigned short FASTER = 1;
	/** \brief Constant for decreased playback speed. */
	const unsigned short SLOWER = 2;

	/**
	* \brief Add listener for event handling.
	* \param listener A MediaCallback object for event handling.
	* \param success Is called when adding this listener was successful.
	* \param error Is called when the listener could not be added.
	*/
	void addListener(
		MediaCallback listener,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Remove all listeners.
	* \param success Is called when removing listeners was successful.
	* \param error Is called when there was an error.
	*/
	void removeAllListeners(SuccessCallback? success, MediaPlayErrorCB? error);

	/**
	* \brief Get the play status of this service.
	* \param callback Is called with a PlayStatus object for the current state.
	* \param error Is called in case of error.
	*/
	void isPlaying(
		PlayStatusCallback callback,
		MediaPlayErrorCB error);

	/**
	* \brief Starts media playback.
	* \param URI The media to play.
	* \param success Is called when playback successfully started.
	* \param error Is called in case of error.
	*/
	void play(
		DOMString URI,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Pauses or restarts media playback.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void playPause(
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Stops media playback.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void stop(
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Moves current play position.
	* \param stepConstant One of the constants FORWARD_STEP, BACKWARD_STEP, etc. for moving the play position.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void seek(
		unsigned short stepConstant,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Sets volume to specified value.
	* \param volume A percentage value between 0-100.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void setVolume(
		float volume,
		SuccessCallback success,
		MediaPlayErrorCB error);

	/**
	* \brief Sets playback speed to specified value.
	* \param speedConstant Constant to change playback speed.
	* \param success Is called if command was successful.
	* \param error Is called in case of error.
	*/
	void setSpeed(
		unsigned short speedConstant,
		SuccessCallback success,
		MediaPlayErrorCB error);

};

/**
* \brief MediaCallback interface definition
*/
callback interface MediaCallback {
	/**
	* \brief Callback used when playback is stopped by command.
	*/
	void onStop();

	/**
	* \brief Callback used when playback ends.
	*/
	void onEnd();

	/**
	* \brief Callback used when playback starts.
	* \param status PlayStatus object.
	*/
	void onPlay(PlayStatus status);

	/**
	* \brief Callback used when playback pauses.
	*/
	void onPause();

	/**
	* \brief Callback used when volume level changes.
	* \param volume Value for volume.
	*/
	void onVolume(int volume);

};

/**
* \brief Play status callback interface definition
*/
callback PlayStatusCallback = void (PlayStatus status);

/**
* \brief Error callback interface definition
*/
callback MediaPlayErrorCB = void (DOMString error);

/**
* \brief PlayStatus dictionary
*/
dictionary PlayStatus {
	/**
	* \brief Current playback state.
	*/
	boolean isPlaying;

	/**
	* \brief URI of the current media being played.
	*/
	DOMString currentMedia;

	/**
	* \brief Volume value.
	*/
	int volume;

	/**
	* \brief Length of media.
	*/
	int length;

	/**
	* \brief Length of media.
	*/
	int position;
};
