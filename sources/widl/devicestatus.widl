/**<p>The webinos The Device Status API lets you get information about various "aspects" of a device.</p>
 * \name Device Status API 
 *
 * Introduction
 *  
 * The Device Status API provides the means to get information about different "aspects" of a device. For example, you can query the battery to get its level of charge or you can query the operating system to see who the vendor is.
 * 
 * This API uses a kind of tree model to allow developers to get at the various bits of data about things on a device. The tree model is illustrated in figure 1: at the root you find aspects, which contain components, which contain properties - each of which is formally defined below.
 * Aspects contain components, which contain properties The Device status tree model: at the root are the aspects, which contain one or more components, which themselves contain properties.
 * 
 * Aspect
 *     An aspect is an abstract namable thing (e.g., a "Device", "Battery", "Display", etc.) that the user agent knows about and can interact with. An aspect can contain one or more components.
 * Component
 *     A component is a concrete instance of an aspect (e.g., a real battery in the device, the real screens of the device). As devices can contain more than one instance of the thing being referred to by an aspect (e.g. two screens, three batteries, two SIM cards), each real instance of an aspect is referred to as a component. Each component has its own unique component name, which is assigned by the user agent and serves as the component's identifier for the life of the application (e.g., "screen_1", "battery2", "os", "hdd", "SDCard").
 *     This specification reserves two special components names ("_active" and "_default") which a user agent MUST NOT use when generating. 
 * Property
 *     A property of an component is something that can be queried to returns data (e.g., how much charge a battery has, if the WiFi is connected or not, the SSID of a WiFi network). 
 * 
 * A user agent supports aspect X if the user agent can verify that the aspect (hardware or software) exists on the device and/or has not been disabled (either by policy or by a feature declaration).
 * 
 * A user agent supports aspect X and property Y if the user agent supports the aspect and is able to query property Y to retrieve its data. 
 * 
 *  To make the Device Status API easier to work with, this specification reserves two special component names ("_default" and "_active"). These two component names can be used by a developer in the API as proxies for either a default component or active component.
 * 
 * Default component:
 *     The component that is the default component for a given aspect, which may or may not be the active component. 
 *     In ECMAScript, a developer uses the string "_default" to refer to the default component. 
 * Active component:
 *     The component that is the acitve component for a given aspect, which may or may not be the default component. 
 *     In ECMAScript, a developer uses the string "_active" to refer to the active component. 
 *   
 * \def-api-feature http://wacapps.net/api/devicestatus.deviceinfo
 * 
 *     Only the following device-information aspects are available to the application (all others are disabled):
 *  
 *         Battery
 *         Device
 *         Display
 *         MemoryUnit
 *         OperatingSystem
 *         WebRuntime
 * 
* \def-api-feature http://wacapps.net/api/devicestatus.networkinfo
 * 
 *     Only the following network-information aspects are available to the application (all others are disabled):
 * 
 *         CellularHardware
 *         CellularNetwork
 *         WiFiHardware
 *         WiFiNetwork
 * 
* \def-api-feature http://wacapps.net/api/devicestatus
 * 
 *     All aspects (the union of the network information aspects and device-information aspects) are enabled and available to the application.
 * 
 *   Processing feature declaration
 *  
 *  A user agent processes feature elements in accordance with the W3C's Widget Packaging and XML Configuration specification.
 *  
 *  If the feature-list contains any features whose feature-name exactly matches a device status feature declarations , then the user agent MUST apply the steps for processing a feature declaration.
 *  
 *  The steps for processing a device status feature declaration is given by the following algorithm. Only the first feature declaration is respected by the user agent:
 *  
 *      Let declaration be the first device status feature declaration that was present in the configuration document, ignoring all others.
 *      Implement the DeviceapisDeviceStatusManager interface when the widget's start file is instantiated:
 *          For each supported aspect, identify the components and assign each of them a component name, and, where there are more than one component, identify which is the default and track which components are active. It is recommended that the component name assigned by the user agent to a component be something that is "developer-friendly": i.e., that logically relates to the aspect the component represents (e.g., candidats include "screen_1", "battery2", "os", "hdd", "SD-Card").
 *      If required, disable any aspects as needed by the particular feature declaration (see each device status feature strings).
 *      ignore all other subsequent device status feature declarations.
 *  
 *  XML Example
 *  
 * \code
 <widget xmlns="http://www.w3.org/ns/widgets">
   <feature name="http://wacapps.net/api/devicestatus"/>
 </widget>
 * \endcode
 *  
 *  The above example shows how a developer declares their intention to access all aspects of the Device Status API.
 *  XML Example
 *  
 * \code
 <widget xmlns="http://www.w3.org/ns/widgets">
   <feature name="http://wacapps.net/api/devicestatus.deviceinfo"/>
 </widget>
 * \endcode
 *  
 *  The above example shows a developers intention to access the device information aspects of the Device Status API.
 *  XML Example
 *  
 * \code
 <widget xmlns="http://www.w3.org/ns/widgets">
   <feature name="http://wacapps.net/api/devicestatus.networkinfo"/>
 </widget>
 * \endcode
 *  
 *  The above example shows a developers intention to access network information aspects the aspects of the Device Status API.
 *  XML Example
 *  
 * \code
 <widget xmlns="http://www.w3.org/ns/widgets">
   <feature name="http://wacapps.net/api/device.networkinfo"/>
   <!-- The rest are ignored -->
   <feature name="http://wacapps.net/api/devicestatus"/>
   <feature name="http://wacapps.net/api/devicestatus.deviceinfo"/>
 </widget> 
 * \endcode
 *  
 *  In the above example, only the network information aspects would be made available.
 *   
 * \author WAC Device API Specifications 2.1, 30 April 2012
 * \author Normative: <a href="http://specs.wacapps.net/devicestatus/index.html">W3C Calendar API </a>
 * \author WIDL version for webinos created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 2.1
 */
 
	/**
	 * \brief When an device status feature declaration appears in the widget's configuration document, the user agent implements the DeviceapisDeviceStatusManager interface.
		 */

 [NoInterfaceObject]
interface DeviceapisDeviceStatusManager {
       /**
        * \brief The devicestatus attribute provides access to Device Status API. 
        *         Example
        * \code
var info = deviceapis.devicestatus;
info.getPropertyValue(
function(model) {
	console.log("Device model is: " + model);
},
null, {
	aspect: "Device",
	property: "model"
});
        * \endcode
        */
    readonly attribute  DeviceStatusManager devicestatus;
};

Deviceapis implements DeviceapisDeviceStatusManager;
