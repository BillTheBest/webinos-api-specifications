/**<p>The webinos The Device Status API lets you get information about various "aspects" of a device.</p>
 * \name Device Status API 
 *
 * This API uses a kind of tree model to allow developers to get at the various bits of data about things on a device. The tree model is illustrated in figure 1: at the root you find aspects, which contain components, which contain properties - each of which is formally defined below.
 *
 * Aspects contain components, which contain properties The Device status tree model: at the root are the aspects, which contain one or more components, which themselves contain properties.
 * 
 * Aspect
 * \n  An aspect is an abstract namable thing (e.g., a "Device", "Battery", "Display", etc.) that the user agent knows about and can interact with. An aspect can contain one or more components.
 * \n \n Component
 * \n  A component is a concrete instance of an aspect (e.g., a real battery in the device, the real screens of the device). As devices can contain more than one instance of the thing being referred to by an aspect (e.g. two screens, three batteries, two SIM cards), each real instance of an aspect is referred to as a component. Each component has its own unique component name, which is assigned by the user agent and serves as the component's identifier for the life of the application (e.g., "screen_1", "battery2", "os", "hdd", "SDCard").
 * \n     This specification reserves two special components names ("_active" and "_default") which a user agent MUST NOT use when generating. 
 * \n \n Property
 * \n     A property of an component is something that can be queried to returns data (e.g., how much charge a battery has, if the WiFi is connected or not, the SSID of a WiFi network). 
 * 
 * A user agent supports aspect X if the user agent can verify that the aspect (hardware or software) exists on the device and/or has not been disabled (either by policy or by a feature declaration).
 * 
 * A user agent supports aspect X and property Y if the user agent supports the aspect and is able to query property Y to retrieve its data. 
 * 
 *  To make the Device Status API easier to work with, this specification reserves two special component names ("_default" and "_active"). These two component names can be used by a developer in the API as proxies for either a default component or active component.
 * 
 * \n Default component:
 * \n     The component that is the default component for a given aspect, which may or may not be the active component. 
 * \n     In ECMAScript, a developer uses the string "_default" to refer to the default component. 
 * \n \n Active component:
 * \n     The component that is the acitve component for a given aspect, which may or may not be the default component. 
 * \n     In ECMAScript, a developer uses the string "_active" to refer to the active component. 
 *
 *   
 * \def-api-feature http://wacapps.net/api/devicestatus.deviceinfo
 * 
 *     Only the following device-information aspects are available to the application (all others are disabled):
 * \n         Battery
 * \n         Device
 * \n         Display
 * \n         MemoryUnit
 * \n         OperatingSystem
 * \n         WebRuntime
 * 
* \def-api-feature http://wacapps.net/api/devicestatus.networkinfo
 * 
 *     Only the following network-information aspects are available to the application (all others are disabled):
 * \n         CellularHardware
 * \n         CellularNetwork
 * \n         WiFiHardware
 * \n         WiFiNetwork
 * 
* \def-api-feature http://wacapps.net/api/devicestatus
 * 
 *     All aspects (the union of the network information aspects and device-information aspects) are enabled and available to the application.
 * 
 *   Processing feature declaration
 *  
 *  A user agent processes feature elements in accordance with the W3C's Widget Packaging and XML Configuration specification.
 *  
 *  If the feature-list contains any features whose feature-name exactly matches a device status feature declarations , then the user agent MUST apply the steps for processing a feature declaration.
 *  
 *  The steps for processing a device status feature declaration is given by the following algorithm. Only the first feature declaration is respected by the user agent:
 *  
 * \n  1. Let declaration be the first device status feature declaration that was present in the configuration document, ignoring all others.
 * \n  2. Implement the DeviceapisDeviceStatusManager interface when the widget's start file is instantiated:
 * \n     2a. For each supported aspect, identify the components and assign each of them a component name, and, where there are more than one component, identify which is the default and track which components are active. It is recommended that the component name assigned by the user agent to a component be something that is "developer-friendly": i.e., that logically relates to the aspect the component represents (e.g., candidats include "screen_1", "battery2", "os", "hdd", "SD-Card").
 * \n  3. If required, disable any aspects as needed by the particular feature declaration (see each device status feature strings).
 * \n  4. ignore all other subsequent device status feature declarations.
 *  
 *  XML Example
 *  
 * \code
 \<widget xmlns="http://www.w3.org/ns/widgets">
   \<feature name="http://wacapps.net/api/devicestatus"/>
 \</widget>
 * \endcode
 *  
 *  The above example shows how a developer declares their intention to access all aspects of the Device Status API.
 *  XML Example
 *  
 * \code
 \<widget xmlns="http://www.w3.org/ns/widgets">
   \<feature name="http://wacapps.net/api/devicestatus.deviceinfo"/>
 \</widget>
 * \endcode
 *  
 *  The above example shows a developers intention to access the device information aspects of the Device Status API.
 *  XML Example
 *  
 * \code
 \<widget xmlns="http://www.w3.org/ns/widgets">
   \<feature name="http://wacapps.net/api/devicestatus.networkinfo"/>
 \</widget>
 * \endcode
 *  
 *  The above example shows a developers intention to access network information aspects the aspects of the Device Status API.
 *  XML Example
 *  
 * \code
 \<widget xmlns="http://www.w3.org/ns/widgets">
   \<feature name="http://wacapps.net/api/device.networkinfo"/>
   \<!-- The rest are ignored -->
   \<feature name="http://wacapps.net/api/devicestatus"/>
   \<feature name="http://wacapps.net/api/devicestatus.deviceinfo"/>
 \</widget> 
 * \endcode
 *  
 *  In the above example, only the network information aspects would be made available.
 *   
 * \author WAC Device API Specifications 2.1, 30 April 2012
 * \author Normative: <a href="http://specs.wacapps.net/devicestatus/index.html">WAC Devicestatus API </a>
 * \author WIDL version for webinos created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 2.1
 */
 
 
	/**
	 * \brief When an device status feature declaration appears in the widget's configuration document, the user agent implements the DeviceapisDeviceStatusManager interface.
		 */

 [NoInterfaceObject]
interface DeviceapisDeviceStatusManager {
       /**
        * \brief The devicestatus attribute provides access to Device Status API. 
        *         Example
        * \code
var info = deviceapis.devicestatus;
info.getPropertyValue(
function(model) {
	console.log("Device model is: " + model);
},
null, {
	aspect: "Device",
	property: "model"
});
        * \endcode
        */
    readonly attribute  DeviceStatusManager devicestatus;
};

       /**
        * \brief This offers methods to get information about the device status and subscribe to receive notifications of device status changes. To allow for asynchornous notification of changes to the various properties of components, the user agent keeps a list of active watch operations. Each entry in this list is identified by a number, which is unique within its list for the lifetime of the application.
        *         Example
        * \code
deviceapis.devicestatus.getPropertyValue(
function(value) {
	console.log("The battery level is at " + value + "%");
},
null, {
	property: "batteryLevel",
	aspect: "Battery"
});
        * \endcode
        */

[NoInterfaceObject]
interface DeviceStatusManager {
       /**
        * \brief The getComponents() method provides means to get the components of an aspect.
        * 
        * When the getComponents() method is invoked, the user agent MUST run the steps to retrieve the components.
        * steps to retrieve the components
        * 
        * The steps to retrieve the components are given by the following algorithm. The algorithm returns an array of component names, which may be empty.
        * 
        * \n  1. Run the general invocation checks algorithm. If no exceptions were generated, continue.
        * \n  2. Let components be an empty array.
        * \n  3. If the first argument (aspect) null, return components and terminate this algorithm.
        * \n  4. Let trimmed aspect be the result of trimming any space characters from the front and back of aspect.
        * \n  5. If trimmed aspect is an empty string or does not exactly match the name of a supported aspect, return null and terminate this algorithm.
        * \n  6. If trimmed aspect exactly matches the name of a supported aspect:
        * \n      6a. For each component of the matching aspect, create a DOMString representation of the component name and add it to the components array.
        * \n  7.  This offers methods to get information about the device status and subscribe to receive notifications of device status changes. To allow for asynchornous notification of changes to the various properties of components, the user agent keeps a list of active watch operations. Each entry in this list is identified by a number, which is unique within its list for the lifetime of the application.
        *         Example
        * \code
//displays contain, for example, ["screen1"] 
var displays = deviceapis.devicestatus.getComponents('Display');
console.log("Your device has " + displays.length + " displays");

//iterate through and show the name of each component
for (var i = 0; i < displays.length; i++) {
	var display = displays[i];
	console.log("Display component " + i + ": " + displays[i]);
}
        * \endcode
        * \param aspect for component to retrieve
        * \return components
        */
    DOMString[]? getComponents(DOMString? aspect);

       /**
        * \brief The isSupported() method checks if an aspect is supported and, optionally, if a property that would correspond to a component of that aspect is supported (e.g., a Battery aspect's batteryLevel property).
        * 
        * When invoked, the user agent MUST run the steps to check if an aspect is supported.
        * Steps to check if an aspect is supported
        * 
        * The steps to check if an aspect is supported are given by the following algorithm. The algorithm returns either true or false.
        * 
        * \n 1. Run the general invocation checks algorithm. If no exceptions were generated, continue.
        * \n 2. Let trimmed aspect be the result of trimming all white space from the front and back of the first argument.
        * \n 3. If the user agent does not supports aspect trimmed aspect, return false and terminate this algorithm.
        * \n 4. If the second argument (property) was passed, and it's not null,
        * \n    4a. Let trimmed property be the result of of trimming all white space from the front and back of the second argument.
        * \n    4b. If trimmed property is a supported property of trimmed aspect, then return true and terminate this algorithm.
        * \n 5. Return false.
        * 
        * Example
        * \code
if (deviceapis.devicestatus.isSupported('Battery', 'batteryLevel')) {
	console.log("batteryLevel property is available");
} else {
	console.log("batteryLevel property is not available");
}
        * \endcode
        * \param aspect Aspect to check for
        * \param aspect Optional property to check for
        * \return whether aspect is supported
        */
               
    boolean isSupported(
               DOMString aspect,
               optional DOMString? property);

       /**
        * \brief The getPropertyValue() method asyncrhonously attemps to read the value of a given component. However, if no component is given, the user agent will befault to the active component or the default component of a given aspect.
        * 
        * 
        * The steps to get a property value are given by the following algorithm:
        * 
        * \n  1. Run the general invocation checks algorithm. If no exceptions were generated, continue.
        * \n  2. If either the aspect member or the property member is not present in the third argument (query):
        * \n     2a.  If the second argument (errorCallback) is not an ECMAScript funtion, then terminate this algorithm skipping all steps below.
        * \n     2b.  Let exception be a new DOMException of type "TypeMismatchError", with message "Required aspect or property was not passed." (or similar).
        * \n     2c.  Queue a task to invoke the errorCallback with exception as the argument.
        * \n     2d.  Terminate this algorithm, skipping all steps below.
        * \n  3. Let aspect name be the result of trimming the value of the aspect member from the third argument (query).
        * \n  4. If aspect name does not match an enabled aspect:
        * \n     4a.  If the second argument (errorCallback) is not an ECMAScript function, then terminate this algorithm skipping all steps below.
        * \n     4b.  If aspect name is one found in all aspects, but was disabled by policy or via a feature string, then:
        * \n        4b1.   Let exception be a new DOMException of type "SecurityError", with message "Access to this component was blocked by policy." (or similar).
        * \n     4c.  If aspect name is not one found in the list of all aspects, then:
        * \n        4c1.   Let exception be a new DOMException of type "NotFoundError", with message "Aspect could not be found." (or similar).
        * \n     4d.  Queue a task to invoke the errorCallback with exception as the argument.
        * \n     4e.  Terminate this algorithm, skipping all steps below.
        * \n  5. Let prop name be the result of trimming the value of the property member from the third argument (query).
        * \n  6. If the component member is present in query, let component name be the result of trimming component member.
        * \n  7. If the component name is not component of the aspect aspect name (e.g., {aspect:"Battery", component: "screen1"}:
        * \n     7a.  If the second argument (errorCallback) is not an ECMAScript function, then terminate this algorithm skipping all steps below.
        * \n     7b.  Let exception be a new DOMException of type "InvalidAccessError", with message "Component is not an instance of aspect." (or similar).
        * \n     7c.  Queue a task to invoke the errorCallback with exception as the argument.
        * \n     7d.  Terminate this algorithm, skipping all steps below.
        * \n  8. If the component member is not present in query:
        * \n     8a.  If the aspect aspect name has an active component, then let component name be "_active". Otherwise, let component name be "_default".
        * \n  9. If the component component name does not have the property property name (e.g., {aspect:"Battery", component: "_active", "fooBar"):
        * \n     9a.  If the second argument (errorCallback) is not an ECMAScript function, then terminate this algorithm skipping all steps below.
        * \n     9b.  Let exception be a new DOMException of type "NotFoundError", with message "Property not found in component." (or similar).
        * \n     9c.  Queue a task to invoke the errorCallback with exception as the argument.
        * \n     9d.  Terminate this algorithm, skipping all steps below.
        * \n 10. Let task be a task that does the following:
        * \n    10a.  Let value be the value of property property name of the component component name.
        * \n    10b.  Invoke the successCallback with value as the argument.
        * \n 11. Let op be and object that implements the PendingOperation interface.
        * \n 12. Associate task with op, so that if op's cancel() method is invoked, it attempts to remove task for the callbacks task queue.
        * \n 13. Queue a task task.
        * \n 14. Return op.
        * 
        * Example
        * \code
//The "_default" component is implied.
var options = {
	aspect: "Battery",
	property: "batteryLevel"
};

deviceapis.devicestatus.getPropertyValue(
function batteryQuery(value) {
	console.log("Battery is at " + value + "%");
},
null, options);
        * \endcode
        * \param successCallback Function to call on successfully retrieving a property value
        * \param errorCallback Function to call if property value could not be retrieved
        * \param query Property to retrieve
        * \return PendingOperation enabling the requester to cancel this request.        
        */
    PendingOperation getPropertyValue(Function  successCallback,
                                      ErrorCB? errorCallback,
                                      PropQuery query);


       /**
        * \brief The watchPropertyChange() method allows the developer to watch for changes to the properties of components.
        * 
        * ACCEL-watch-acceleration: When the watchPropertyChange() method is invoked, the user agent MUST run the steps for watching property changes.
        *         
        * Steps for watching the acceleration
        * 
        * The steps for watching property changes is given by the following algorithm:
        * 
        * \n  1. Run the general invocation checks algorithm. If no exceptions were generated, continue.
        * \n  2. Let subscription id be a user-agent-defined (random or sequential) unique integer that will represent the looping action to be created by invoking this method.
        * \n  3. Add subscription id to the list of active watch operations.
        * \n  4. Return subscription id, and then continue running this algorithm asynchronously.
        * \n  5. Let interval be the value 0.
        * \n  6. If the fourth argument (options) is present:
        * \n     6a.  If the minChangePercent member is present, and it is a number greater than 0, then let percent interval be the value of minChangePercent.
        * \n     6b.  If the minNotificationInterval member is present, and it is a number, then let interval be the value of minNotificationInterval.
        * \n     6c.  If the maxNotificationInterval member is present, and it is a number, then let max interval be the value of minNotificationInterval.
        * \n  7. If interval is less than a user-agent-defined value for a the smallest ammount of time between intevals (i.e., to protect the component from being flooded with requests or because it would drain too much battery, etc.), set interval to that user-agent-defined value.
        * \n  8. If max interval is less than interval, discard max interval.
        * \n  9. Let old value be the value 0.
        * \n 10. Wait, at a minimum (optionally more time if needed), the amount of time indicated by the interval. If the max interval was not discarded, and the time waited exceeds the max interval, do this step again (i.e., wait).
        * \n 11. If the entry for subscription id has been cleared from the list of active watch operations, terminate this algorithm. If subscription id has not been cleared from the list of active watch operations, create a task to run the getPropertyValue() method using successCallback as the first argument, and, if present, errorCallback as the second argument, and query dictionary as the third argument. Discard the resulting PendingOperation object.
        * \n 12. TODO: Factor in the minChangePercent change value. Only queue the task when the change between the old value and new value is minChangePercent or greater.
        * \n 13. Queue the task task.
        * \n 14. Return to step labelled wait.
        * 
        * Example
        * \code
function propertyChange(value, ref) {
	console.log("New value for " + ref.property + " is " + value);
}

deviceapis.devicestatus.watchPropertyChange(propertyChange, null, {
	property: "batteryLevel",
	aspect: "Battery"
});

//The "_default" component is implied.
var options = {
	aspect: "Battery",
	property: "batteryLevel"
};

deviceapis.devicestatus.getPropertyValue(
function batteryQuery(value) {
	console.log("Battery is at " + value + "%");
},
null, options);
        * \endcode
        * \param successCallback Function to call on changing property value
        * \param errorCallback Function to call if an error occurs
        * \param query Property to watch
        * \param options Additonal options for property watch, such as the minimum range of change
        * \return Subscription ID
        */

    long watchPropertyChange(Function successCallback,
                             ErrorCB? errorCallback,
                             PropQuery query,
                             optional WatchOptions? options);
                             
       /**
        * \brief Unsubscribe from notifications for property changes set up by watchPropertyChange.
        * 
        * 
        * If a valid watchid argument is passed that corresponds to a subscription already in place, then the watch process MUST immediately terminate and no further callbacks MUST be invoked. If the watchid argument does not correspond to a valid subscription, the method should return without any further action.
        * Example
        * \code
           function propertyChange(value, ref) {
           	console.log("New value for " + ref.property + " is " + value);
           
           	if (id) {
           		deviceapis.devicestatus.clearPropertyChange(id);
           		console.log(id + " cleared");
           	}
           }
           
           var id = deviceapis.devicestatus.watchPropertyChange(
           propertyChange, null, {
           	property: "batteryLevel",
           	aspect: "Battery"
           });
        * \endcode
        * \param watchid Id of watch property change subscription
        */
    void clearPropertyChange(long watchid);
  };
  
       /**
        * \brief       The PropQuery provides a way to query an component about a property. 
        */
dictionary PropQuery {
       /**
        * \brief       The component member represents the component that is to be queried. If it is not present, the user agent will try to use either the active component or the default component for a given aspect (e.g., "screen1"). 
        */
     DOMString component;
       /**
        * \brief       The aspect member takes the identifier of an aspect (e.g., "Battery"). 
        */
     DOMString aspect;
       /**
        * \brief       The property member takes the name of a property of a component ("batteryBeingCharged"). 
        */
     DOMString property;
};  

        /**
        * \brief Possible values for switch
        */
        enum SwitchType {"ON", "OFF"};
        /**
        * \brief Possible values for network states
        */
        enum NetworkStates {"connected", "available", "forbidden"};

/**
* \htmlonly
<h2 id=battery-aspect><span class=secno>6 </span><code title="">Battery</code> aspect</h2>
  <p>The <dfn id=battery>Battery</dfn> aspect represents a battery in the device.  Components of this aspect have the following properties: </p>
<ul>
<li><a href=#batterybeingcharged><code>batteryBeingCharged</code></a></li>
<li><a href=#batterylevel><code>batteryLevel</code></a></li>
</ul>

<h3 id=the-batterybeingcharged-property><span class=secno>6.1 </span>The <a href=#batterybeingcharged><code>batteryBeingCharged</code></a> property </h3>
<p>The <dfn id=batterybeingcharged><code>batteryBeingCharged</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-boolean>boolean</a> that indicates whether the battery is currently being charged or not. Returns true if the battery is being charged. </p>

<h3 id=the-batterylevel-property><span class=secno>6.2 </span>The <a href=#batterylevel><code>batteryLevel</code></a> property </h3>
<p>The <dfn id=batterylevel><code>batteryLevel</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-octet>octet</a> that represents the remaining percentage (0-100) of the battery capacity that  available. When the battery is full, the value is 100. When the battery is drained, the value is 0.</p>
<h2 id=cellularhardware-aspect><span class=secno>7 </span><code title="">CellularHardware</code> aspect</h2>
  <p>The <dfn id=cellularhardware>CellularHardware</dfn> aspect represents the device's hardware  that accesses to telephone network.  Components of this aspect have the following properties: </p>
  <ul>
    <li><a href=#cellularhardware-status><code title="CellularHardware status">status</code></a></li>
  </ul>
  <h3 id=the-status-property><span class=secno>7.1 </span>The status property</h3>
<p>The <dfn id=cellularhardware-status title="CellularHardware status"><code>status</code></dfn> property is a DOMString represented as a <a href=#switchtype><code>SwitchType</code></a> that indicates the status of the Cellular Hardware. </p>
  
  <h2 id=cellularnetwork-aspect><span class=secno>8 </span><code title="">CellularNetwork</code> aspect</h2>
  <p>The <code><dfn id=cellularnetwork>CellularNetwork</dfn></code> aspect represents the cellular network being used by the device. Components of this aspect have the following properties:  </p>
  <ul>
    <li><a href=#isinroaming><code>isInRoaming</code></a></li>
    <li><a href=#mcc><code>mcc</code></a></li>
    <li><a href=#mnc><code>mnc</code></a></li>
    <li><a href=#cellularnetwork-signalstrength><code title="CellularNetwork signalStrength">signalStrength</code></a></li>
    <li><a href=#operatorname><code>operatorName</code></a></li>
  </ul>
  
<h3 id=the-isinroaming-property><span class=secno>8.1 </span>The <code title="">isInRoaming</code> property</h3>
<p>The <dfn id=isinroaming><code>isInRoaming</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-boolean>boolean</a> that indicates if the cellular connection is roaming. A value of <code>true</code> indicates that the connection is roaming. </p>
<h3 id=the-mcc-property><span class=secno>8.2 </span>The <code title="">mcc</code> property</h3>
<p>The <dfn id=mcc><code>mcc</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the country of a mobile network. </p>
<h3 id=the-mnc-property><span class=secno>8.3 </span>The <code title="">mnc</code> property</h3>
<p>The <dfn id=mnc><code>mnc</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the Mobile Network Code (MNC). </p>
<h3 id=the-signalstrength-property><span class=secno>8.4 </span>The <code title="">signalStrength</code> property</h3>
<p>The <dfn id=cellularnetwork-signalstrength title="CellularNetwork signalStrength"><code>signalStrength</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-octet>octet</a> that represent the signal strength of the cellular network represented as a percentage.</p>
<h3 id=the-operatorname-property><span class=secno>8.5 </span>The <code title="">operatorName</code> property</h3>
<p>The <dfn id=operatorname><code>operatorName</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the name of the operator of the cellular network.</p>
  <h2 id=device-aspect><span class=secno>9 </span><code title="">Device</code> aspect</h2>
  <p>The <code><dfn id=device>Device</dfn></code> aspect represents the device on which the runtime is running.  Components of this aspect have the following properties: </p>
  <ul>
    <li><a href=#imei><code>imei</code></a></li>
    <li><a href=#model><code>model</code></a></li>
    <li><a href=#device-vendor><code title="device vendor">vendor</code></a></li>
    <li><a href=#device-version><code title="device version">version</code></a></li>
  </ul>

<h3 id=the-imei-property><span class=secno>9.1 </span>The <code title="">imei</code> property</h3>
<p>The <dfn id=imei><code>imei</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the  International Mobile Equipment Identity (IMEI).</p>
<h3 id=the-model-property><span class=secno>9.2 </span>The <code title="">model</code> property</h3>
<p>The <dfn id=model><code>model</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the name of the device model, as assigned by the vendor. </p>
<h3 id=the-vendor-property><span class=secno>9.3 </span>The <code title="">vendor</code> property</h3>
<p>The <dfn id=device-vendor title="device vendor"><code>vendor</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the vendor of the device.</p>
<h3 id=the-version-property><span class=secno>9.4 </span>The <code title="">version</code> property</h3>
<p>The <dfn id=device-version title="device version"><code>version</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the device version assigned by the vendor. </p>
  <h2 id=display-aspect><span class=secno>10 </span><code title="">Display</code> aspect</h2>
  <p>The <code><dfn id=display>Display</dfn></code> aspect  represents a screen on the device. Components of this aspect have the following properties: </p>
<ul>
<li><a href=#resolutionheight><code>resolutionHeight</code></a></li>
<li><a href=#pixelaspectratio><code>pixelAspectRatio  </code></a></li>
<li><a href=#dpiy><code>dpiY  </code></a></li>
<li><a href=#resolutionwidth><code>resolutionWidth  </code></a></li>
<li><a href=#dpix><code>dpiX  </code></a></li>
<li><a href=#colordepth><code>colorDepth</code></a></li>
</ul>

<h3 id=the-resolutionheight-property><span class=secno>10.1 </span>The <code title="">resolutionHeight</code> property</h3>
<p>The <dfn id=resolutionheight><code>resolutionHeight</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-unsigned-short>unsigned short</a> representing the total number of  pixels for the height of the screen. </p>

<h3 id=the-pixelaspectratio-property><span class=secno>10.2 </span>The <code title="">pixelAspectRatio</code> property</h3>
<p>The <dfn id=pixelaspectratio><code>pixelAspectRatio</code></dfn> property  is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-float>float</a> that represents pixel aspect ratio, for example 1.333333333 for a 4:3 aspect. It's always the value of the <a href=#resolutionheight>resolutionHeight</a> devided by the resolutionWidth. </p> 

<h3 id=the-dpiy-property><span class=secno>10.3 </span>The <code title="">dpiY</code> property</h3>
<p>The <dfn id=dpiy><code>dpiY</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-unsigned-short>unsigned short</a> that represents the dots per inch of the display in the Y axis.</p>

<h3 id=the-resolutionwidth-property><span class=secno>10.4 </span>The <code title="">resolutionWidth</code> property</h3>
<p>The <dfn id=resolutionwidth><code>resolutionWidth</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-unsigned-short>unsigned short</a> representing the total number of  pixels for the width of the screen. </p> 

<h3 id=the-dpix-property><span class=secno>10.5 </span>The <code title="">dpiX</code> property</h3>
<p>The <dfn id=dpix><code>dpiX</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-unsigned-short>unsigned short</a> that represents the dots per inch of the display in the X axis.</p>

<h3 id=the-colordepth-property><span class=secno>10.6 </span>The <code title="">colorDepth</code> property</h3>
<p>The <dfn id=colordepth><code>colorDepth</code></dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-octet>octet</a> that represents the number of bits used for color definition (e.g. 24).
</p>
<h2 id=memoryunit-aspect><span class=secno>11 </span><code title="">MemoryUnit</code> aspect</h2>
  <p>The <code><dfn id=memoryunit>MemoryUnit</dfn></code> aspect  represents a memory component used in the device. This may include RAM, and other storage media. Components of this aspect have the following properties: </p>
  <ul>
    <li><a href=#size><code>size</code></a></li>
    <li><a href=#removable><code>removable</code></a></li>
    <li><a href=#availablesize><code>availableSize</code></a></li>
  </ul>
  
<h3 id=the-size-property><span class=secno>11.1 </span>The <code title="">size</code> property</h3>
<p>The <dfn id=size><code>size</code></dfn> property is an <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-unsigned-long>unsigned long</a> that represents size of a memory component in bytes.</p>

<h3 id=the-removable-property><span class=secno>11.2 </span>The <code title="">removable</code> property</h3>
<p>The <dfn id=removable><code>removable</code></dfn> property  is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-boolean>boolean</a> indicating if the memory component can be removed from the device. The value is <code>true</code> if it is possible.</p>

<h3 id=the-availablesize-property><span class=secno>11.3 </span>The <code title="">availableSize</code> property</h3>
<p>The <dfn id=availablesize><code>availableSize</code></dfn> property is an <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-unsigned-long>unsigned long</a> representing the available size of the memory component in bytes. </p>
  
  
  
  <h2 id=operatingsystem-aspect><span class=secno>12 </span><code title="">OperatingSystem</code> aspect</h2>
  <p>The <code><dfn id=operatingsystem>OperatingSystem</dfn></code> aspect represents  operating system running on the device. Components of this aspect have the following properties: </p>
  <ul>
    <li><a href=#language><code>language</code></a></li>
    <li><a href=#operatingsystem-version><code title="OperatingSystem version">version</code></a></li>
    <li><a href=#operatingsystem-name><code title="OperatingSystem name">name</code></a></li>
    <li><a href=#operatingsystem-vendor><code title="OperatingSystem vendor">vendor</code></a></li>
  </ul>
<h3 id=the-language-property><span class=secno>12.1 </span>The <code title="">language</code> property</h3>
<p>The <dfn id=language><code>language</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> representation the locale of the operating system, in the  RFC 4646 language tag format. </p>
<h3 id=the-version-property-0><span class=secno>12.2 </span>The <code title="">version</code> property</h3>
<p>The <dfn id=operatingsystem-version title="OperatingSystem version"><code>version</code></dfn> property  is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the version of the operating system. </p>
<h3 id=the-name-property><span class=secno>12.3 </span>The <code title="">name</code> property</h3>
<p>The <dfn id=operatingsystem-name title="OperatingSystem name"><code>name</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> representing the name of the operating system.</p>
<h3 id=the-vendor-property-0><span class=secno>12.4 </span>The <code title="">vendor</code> property  </h3>
<p>The <dfn id=operatingsystem-vendor title="OperatingSystem vendor"><code>vendor</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> representing name of the vendor of the operating system. </p>
  <h2 id=webruntime-aspect><span class=secno>13 </span><code title="">WebRuntime</code> aspect</h2>
  <p>The <code><dfn id=webruntime>WebRuntime</dfn></code> aspect represents the user agent. Components of this aspect have the following properties: </p>
  <ul>
    <li><a href=#webruntime-version><code title="WebRuntime version">version</code></a></li>
    <li><a href=#webruntime-name><code title="WebRuntime name">name</code></a></li>
    <li><a href=#webruntime-vendor><code title="WebRuntime vendor">vendor</code></a></li>
  </ul>
<h3 id=the-version-property-1><span class=secno>13.1 </span>The <code title="">version</code> property</h3>
<p>The <dfn id=webruntime-version title="WebRuntime version"><code>version</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> representing the version of the runtime assigned by the vendor.</p>
<h3 id=the-name-property-0><span class=secno>13.2 </span>The <code title="">name</code> property</h3>
<p>The <dfn id=webruntime-name title="WebRuntime name"><code>name</code></dfn> property is an <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> representing the name assigned by the vendor to the runtime.</p>
<h3 id=the-vendor-property-1><span class=secno>13.3 </span>The <code title="">vendor</code> property  </h3>
<p>The <dfn id=webruntime-vendor title="WebRuntime vendor"><code>vendor</code></dfn> property  is an <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> representing the name of the vendor who sells or created the runtime. </p>
  <h2 id=wifihardware-aspect><span class=secno>14 </span><code title="">WiFiHardware</code> aspect</h2>
  <p>The <code><dfn id=wifihardware>WiFiHardware</dfn></code> aspect represents hardware in a device that accesses WiFi networks. Components of this aspect have the following properties: </p>
  <ul>
    <li><a href=#wifihardware-status><code title="WiFiHardware status">status</code></a></li>
  </ul>
<h3 id=the-status-property-0><span class=secno>14.1 </span>The <code>status</code> property</h3>
  <p>The <dfn id=wifihardware-status title="WiFiHardware status"><code>status</code></dfn> property is a <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> represented as a <a href=#switchtype><code>SwitchType</code></a> that indicates if the WiFi Harware is switched on or off. </p>
  <h2 id=wifinetwork-aspect><span class=secno>15 </span><code title="">WiFiNetwork</code> aspect</h2>
  <p>The <code><dfn id=wifinetwork>WiFiNetwork</dfn></code> aspect  represents the WiFi Network that the device is connected to (if any). Components of this aspects have the following propoerties: </p>
  <ul>
    <li>ssid</li>
    <li>signalStrength</li>
    <li>networkStatus</li>
  </ul>
  
<h3 id=the-ssid-property><span class=secno>15.1 </span>The <code title="">ssid</code> property</h3>
<p>The <dfn id=ssid><code>ssid</code></dfn> property A <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> that represents the SSID of a WiFi network. </p>

<h3 id=the-signalstrength-property-0><span class=secno>15.2 </span>The <code title="">signalStrength</code> property</h3>
<p>The <dfn id=wifinetwork-signalstrength title="WiFiNetwork signalStrength">signalStrength</dfn> property is an <a href=http://dev.w3.org/2006/webapi/WebIDL/#idl-octet>octet</a> that represents the relative  signal strength offered by the WiFi network (from 0 to 100, where 100 is full strength). </p>

<h3 id=the-networkstatus-property><span class=secno>15.3 </span>The <code title="">networkStatus</code> property  </h3>
<p>The <dfn id=networkstatus><code>networkStatus</code></dfn> property A <a class=ulink href=http://dev.w3.org/2006/webapi/WebIDL/#idl-DOMString>DOMString</a> represented as one of the <a href=#networkstates><code>NetworkStates</code></a> that indicates the state of a WiFi network.
</p>
* \endonly
**/

Deviceapis implements DeviceapisDeviceStatusManager;
