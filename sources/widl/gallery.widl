
/**
 * \brief W3C based Gallery API interface.
 *
 * This specification defines an Application Programming Interface (API) that provides access to media gallery located on the device. 
 *
 * The Gallery API defines a high-level interface for accessing media gallery located on the device. A media gallery is a collection of media objects such as video, audio and image. 
 * *
 * \author W3C Editor's Draft 04 November 2010
 * \author WIDL version for webinos created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 1.0
 * 
 */
 
module gallery {

/**
 * \code
 *  // append images with a title matching 'foobar' from galleries 
 * // not older than 3 months to the document.body
 * 
 * var gallery = navigator.service.gallery;
 * 
 * function getGalleriesSuccess(galleryInfoObjs) {
 *     var galleries = [];
 *     for (var i in galleryInfoObjs) {
 *         if ((new Date().getTime())-galleryInfoObjs[i].createDate < 100*60*60*24*3) {
 *             galleries.push(galleryInfoObjs[i]);
 *         }
 *     }
 *     appendMedia(galleries);
 * }
 * 
 * function appendMedia(galleries) {
 *     function findSuccess(mediaObjs) {
 *         var container = document.createElement("div");
 *         for (var i in mediaObjs) {
 *             var img = document.createElement("img");
 *             var title = document.createElement("div");
 *             title.innerHTML = "Title: " + mediaObjs[i].title;
 *             // create blob URI using window.createObjectURL():
 *             // http://dev.w3.org/2006/webapi/FileAPI/#creating-revoking
 *             img.src = createObjectURL(mediaObjs[i]);
 *             container.appendChild(img);
 *             container.appendChild(title);
 *         }
 *         document.body.appendChild(container);
 *     }
 *         
 *     function findError() {
 *         console.log('whoops, something went wrong!');
 *     }
 *         
 *     gallery.find(['title', 'uri'], findSuccess, findError,
 *             {filter: 'foobar', galleries: galleries, mediaType: gallery.IMAGE_TYPE });
 * }
 * 
 * gallery.getGalleries(getGalleriesSuccess);
 * \endcode
 * 
 */
 
 /**
 * \brief The Gallery interface exposes an interface to access media gallery located on the device.
 *
 */

 [NoInterfaceObject] interface Gallery {
   /**
    * \brief Constant used to identify audio type of media. 
    */ 
    const unsigned short AUDIO_TYPE = 0;
   /**
    * \brief Constant used to identify video type of media. 
    */ 
    const unsigned short VIDEO_TYPE = 1;
   /**
    * \brief Constant used to identify image type of media. 
    */ 
    const unsigned short IMAGE_TYPE = 2;
   /**
    * \brief Constant used to identify sort by filename. 
    */ 
    const unsigned short SORT_BY_FILENAME = 3;
   /**
    * \brief Constant used to identify sort by file date. 
    */ 
    const unsigned short SORT_BY_FILEDATE = 4;
   /**
    * \brief Constant used to identify sort by media type. 
    */ 
    const unsigned short SORT_BY_MEDIATYPE = 5;
   /**
    * \brief Constant used to identify sort by title.
    */ 
    const unsigned short SORT_BY_TITLE = 6;
   /**
    * \brief Constant used to identify sort by author.
    */ 
    const unsigned short SORT_BY_AUTHOR = 7;
   /**
    * \brief Constant used to identify sort by album. 
    */ 
    const unsigned short SORT_BY_ALBUM = 8;
   /**
    * \brief Constant used to identify sort by date
    */ 
    const unsigned short SORT_BY_DATE = 9;
   /**
    * \brief Constant used to identify ascending sort order.
    */ 
    const unsigned short SORT_BY_ASCENDING = 10;
   /**
    * \brief Constant used to identify ascending sort order. 
    */ 
    const unsigned short SORT_BY_DESCENDING = 11;
   /**
    * \brief the number of media objects in the gallery.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long length;
   /**
   * \brief Find media objects in the gallerys according to the find process detailed below. 
   *
   * This method takes two, three or four arguments. When called, it immediately returns a PendingOp object, as defined in [CORE-DEVICE], and then asynchronously starts a find process defined as follows:
   *
   * 1. If there are any tasks from the PendingOp task source in one of the task queues (i.e. an existing find() operation is still pending a response), and the current method was invoked with a non-null errorCB argument, dispatch an error event with a PENDING_OPERATION_ERROR code value.
   *
   * 2. Search for media object in the galleries
   *
   * 3. If the attempt was successful, dispatch a success event. If the attempt fails, and the method was invoked with a non-null errorCB argument, this method must dispatch an error event with the code attribute set according to the type of failure that has occurred.
   *
   * \param fields The search qualifier. 
   * \param successCB   Function to call when the asynchronous operation completes 
   * \param errorCB Function to call when the asynchronous operation fails. 
   * \param options The options to apply to the output of this method. 
   * \return PendingOperation to cancel the asynchronous call 
   *
   * No exceptions.
   */    
    caller PendingOp find (in DOMString[] fields, in GalleryFindCB successCB, in optional GalleryErrorCB errorCB, in optional GalleryFindOptions options);
   /**
   * \brief Retrieve all galleries from available sources(e.g. device local memory, external memory and even Fliker, Facebook, etc.) according to the retrieve process detailed below.
   * 
   * This method takes one or two arguments. When called, it immediately returns a PendingOp object, as defined in [CORE-DEVICE], and then asynchronously starts a retrieve process defined as follows:
   *
   * 1. If there are any tasks from the PendingOp task source in one of the task queues (i.e. an existing find() operation is still pending a response), and the current method was invoked with a non-null errorCB argument, dispatch an error event with a PENDING_OPERATION_ERROR code value.
   *
   * 2. retrieve for all galleries
   *
   * 3. If the attempt was successful, dispatch a success event. If the attempt fails, and the method was invoked with a non-null errorCB argument, this method must dispatch an error event with the code attribute set according to the type of failure that has occurred.Find media objects in the gallerys according to the find process detailed below. 
   *
   * \param successCB   Function to call when the asynchronous operation completes 
   * \param errorCB Function to call when the asynchronous operation fails. 
   * \return PendingOperation to cancel the asynchronous call 
   *
   * No exceptions.
   */     
   caller PendingOp getGalleries (in GalleryInfoCB successCB, in optional GalleryErrorCB errorCB);
};

 /**
 * \brief The Gallery interface exposes an interface to access media gallery located on the device.
 *
 */
[NoInterfaceObject] interface MediaObject : File {
   /**
    * \brief Unique id of media object. This id is a unique numeric identifiers of the object. This id is persistent while the gallery is opened.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long   id;
   /**
    * \brief gallery information associated to the media object.
    *
    * No exceptions.
    */ 
    readonly attribute GalleryInfo     gallery;
   /**
    * \brief The title of the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       title;
   /**
    * \brief The language used in the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       language;
   /**
    * \brief The logical address at which the media object can be accessed.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       locator;
   /**
    * \brief The contributor related with the media object. e.g., actor, cameraman, director, singer, author, artist, etc.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       contributor;
   /**
    * \brief The author of the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       Creator;
   /**
    * \brief The date and time the media object was originally created.
    *
    * No exceptions.
    */ 
    readonly attribute Date?            CreateDate;
   /**
    * \brief The description where the media object has been created, developed, recorded, or otherwise authored.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       location;
   /**
    * \brief A free-form text describing the content of the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       description;
   /**
    * \brief A concept, descriptive phrase or keyword that specifies the topic of the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       keyword;
   /**
    * \brief The category of the content of the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       genre;
   /**
    * \brief The rating value related with the media object.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long?   rating;
   /**
    * \brief The description related with resource that the current media object is related with.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       relation;
   /**
    * \brief The name of the collection from which the media object originates or to which it belongs.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?      collection;
   /**
    * \brief The copyright statement. Identification of the copyrights holder.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       copyright;
   /**
    * \brief A policy statement (typically human-readable) associated with the media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       policy;
   /**
    * \brief The publisher of a media object.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       publisher;
   /**
    * \brief The classification information related with media object including the issuer of the classification (e.g., a parental guidance issuing agency, or a targeted geographical region).
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       targetAudience;
   /**
    * \brief A fragment identifier. A fragment is a portion of the resource
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       fragment;
   /**
    * \brief A named fragment identifier.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       namedFragment;
   /**
    * \brief The frame size of the media object (e.g., width and height of 720 and 480 units, respectively).
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long?   frameSize;
   /**
    * \brief The compression type used.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       compression;
   /**
    * \brief The actual duration of the media object.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long?   duration;
   /**
    * \brief The MIME type of the media object (e.g., wrapper or bucket media types).
    *
    * No exceptions.
    */ 
    readonly attribute DOMString?       format;
   /**
    * \brief The audio sampling rate.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long?   samplingRate;
   /**
    * \brief The video frame rate.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long?   framerate;
   /**
    * \brief The average bit rate.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned long?   averageBitRate;
   /**
    * \brief The number of tracks of a resource.
    *
    * No exceptions.
    */ 
    readonly attribute unsigned short?  numTracks;
};


 /**
 * \brief The GalleryInfo exposes an interface to capture generic metadata information of a gallery.
 *
 */
[NoInterfaceObject] interface GalleryInfo {
   /**
    * \brief The title of the gallery.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString   title;
   /**
    * \brief The date and time the gallery was originally created.
    *
    * No exceptions.
    */ 
    readonly attribute Date        createdDate;
   /**
    * \brief The location the gallery is located on.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString   location;
   /**
    * \brief The description of the gallery.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString[] description;
   /**
    * \brief A list of media object type supported by this gallery.
    *
    * No exceptions.
    */ 
    readonly attribute DOMString[] supportedMediaObjectType;
};
 /**
 * \brief The GalleryFindOptions exposes an interface to describe the options that can be applied to media object searching and displaying.
 *
 */
[NoInterfaceObject] interface GalleryFindOptions {
   /**
    * \brief A DOMString-based search filter with which to search. It's working based on the metadata of media object.
    *
    * No exceptions.
    */ 
    attribute DOMString?      filter;
   /**
    * \brief Specify the scope of media type for finding the media object
    *
    * No exceptions.
    */ 
    attribute short?          mediaType;
   /**
    * \brief Specify the scope of gallery for finding the media object
    *
    * No exceptions.
    */ 
    attribute GalleryInfo[]?  gallery;
   /**
    * \brief Specify wheither media objects are ordered in ascending or descending order. Default is an ascending order. 
    *
    * No exceptions.
    */ 
    attribute short?          order;
   /**
    * \brief Primary criteria to order the media object of the gallery.
    *
    * No exceptions.
    */ 
    attribute short?          firstSortOption;
   /**
    * \brief Second criteria to order the media object of the gallery.
    *
    * No exceptions.
    */ 
    attribute short?          secondSortOption;
   /**
    * \brief Start date for performing the search. Media object with date previous to that date will not be returned.
    *
    * No exceptions.
    */ 
    attribute Date?           startDate;
   /**
    * \brief End date for performing the search. Media object with date later to that date will not be returned.
    *
    * No exceptions.
    */ 
    attribute Date?           endDate;
};

 /**                       
  * \brief find specific success callback. 
  *
  */    
[Callback=FunctionOnly, NoInterfaceObject] interface GalleryFindCB : PendingOp {
   /**
   * \brief Method invoked when the asynchronous call completes successfully 
   * 
   * \param mediaObjectObjs The Media Object resulting from the given Gallery find() method.
   * \return void
   *
   * No exceptions.
   */   
       void onSuccess (in MediaObject[] mediaObjectObjs);
};

 /**                       
  * \brief  getGalleries specific success callback. 
  *
  */    
[Callback=FunctionOnly, NoInterfaceObject] interface GalleryInfoCB : PendingOp {
   /**
   * \brief Method invoked when the asynchronous call completes successfully 
   * 
   * \param galleryInfoObjs The GalleryInfo Objects resulting from the given Gallery getGalleries() method.
   * \return void
   *
   * No exceptions.
   */   
    void onSuccess (in GalleryInfo[] galleryInfoObjs);
};
 /**                       
  * \brief  Gallery API specific error callback.
  *
  */    
[Callback=FunctionOnly, NoInterfaceObject] interface GalleryErrorCB : PendingOp {
   /**
   * \brief Method invoked when the asynchronous call completes unsuccessfully 
   * 
   * \param error The Gallery API related error object. 
   * \return void
   *
   * No exceptions.
   */   
    void onError (in GalleryError error);
};

 /**                       
  * \brief  The GalleryError interface encapsulates all errors in the Gallery API.
  *
  */    
[NoInterfaceObject] interface GalleryError {
   /**
    * \brief An unknown error occurred. 
    */ 
    const unsigned short UNKNOWN_ERROR = 0;
   /**
    * \brief An invalid parameter was provided when the requested method was invoked. 
    */ 
    const unsigned short INVALID_ARGUMENT_ERROR = 1;
   /**
    * \brief The requested method timed out before it could be completed. 
    */ 
    const unsigned short TIMEOUT_ERROR = 2;
   /**
    * \brief If the user agent is currently waiting for a callback on a current find() operation, as defined in this specification. 
    */ 
    const unsigned short PENDING_OPERATION_ERROR = 3;
   /**
    * \brief An error occurred in communication with the underlying implementation that meant the requested method could not complete. 
    */ 
    const unsigned short IO_ERROR = 4;
   /**
    * \brief The requested method is not supported by the current implementation. 
    */ 
    const unsigned short NOT_SUPPORTED_ERROR = 5;
   /**
    * \brief 
    */ 
    const unsigned short PERMISSION_DENIED_ERROR = 20;
   /**
    * \brief An error code assigned by an implementation when an error has occurred in Gallery API processing. 
    *
    * No exceptions.
    */ 
    readonly attribute unsigned short code;
};

};
