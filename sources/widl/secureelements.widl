/**<p> The Webinos Secure Element API provides web applications with an API to access secure elements.</p> 
 * \name Secure Element API 
 *
 * This module allows the communication between web application and a smart card or other
 * secure element by using the Application Protocol Data Units (APDUs).
 * An APDU is a short message represented by bytes. APDU messages are either
 * commands or responses.
 *
 * APDU protocol is defined by ISO 7816-4
 *
 * This specification is based on proposal from Gemalto to W3C SysApp WG (http://lists.w3.org/Archives/Public/public-sysapps/2012Jun/0058.html).
 * 
 * \def-api-feature http://webinos.org/api/secureelement
 * Access to all api methods. 
 *
 * \author Stefano Vercelli &lt;stefano.vercelli@telecomitalia.it&gt;
 * \author Dave Raggett/W3C &lt;dsr@w3.org&gt;
 * \version 1.0 
 */

/**
 * 
 * \code
 * webinos.seService.getReaders(readercbk);
 *
 * function readercbk(readers) {
 *   //if a secure element is present open a session
 *   if (readers[0].isPresent)
 *     readers[0].openSession(sessioncbk);
 * }
 *
 * function sessioncbk(session) {
 *   var aid=...; //put applet id here
 *   // Open a channel to the applet
 *   session.openBasicChannel(aid, channelcbk);
 * }
 *
 * function channelcbk(channel) {
 *   var command = ...; //commands for the applet
 *   // exchange data with the applet
 *   channel.transmit(command, transmitcbk);
 * }
 *
 * function transmitcbk(response) {
 *   alert("response received: "+response);
 * }
 *
 * \endcode
 */
   
   
/**
 * \brief Creates the webinos.seService namespace.
 *
 */
 partial interface Webinos {
   readonly attribute SEService seService;
 };
   


  /**
   * \brief The SEService realizes the communication to available Secure Elements on the device.
   *
   * This is the entry point of this API. It is used to connect to the infrastructure and get access
   * to a list of Secure Element Readers
   */
  [NoInterfaceObject] interface SEService
  {

    /**
     * \brief Obtain the list available secure element readers.
     *
     * When executed, it MUST obtain the set of Readers currently enabled on
     * this device. If the list is obtained successfully, the onSuccess method of the 
     * callback object MUST be invoked with the ReaderArray of Readers.
     *
     * If the attempt fails, the callback onError operation MUST be invoked
     * with the relevant error code:
     *
     * <ul>
     * <li> security: If the operation is not allowed. </li>
     * <li> unknwon: In any other error case. </li>
     * </ul>
     *
     * \param successCallback To be invoked to notify success or error while retrieving the Readers array
	 * \param errorCallback To be invoked in case of error
     */
    PendingSEReaderOp getReaders(ReaderArrayCallback successCallback, optional ErrorCallback errorCallback);

    /**
     * \brief Registers a listener for SE availability events
	 * \param listener The listener
	 * \return An identifier of the listener
     */
    unsigned long registerSEListener(SEListener listener);

    /**
     * \brief Unregisters a listener previously registered with registerSEListener operation
	 * \param id The identifier of the listener to remove
     */
    void unregisterSEListener(unsigned long id);

    /**
     * \brief Releases all Secure Elements resources allocated by this SEService.
     *
     * It is recommended to call this method in the termination method of
     * the calling application (or part of this application) which is bound to this SEService.
     */
    void shutdown();

  };


  /**
   * \brief A specific SecureElement Reader
   *
   * Instances of this interface represent Secure Element Readers connected
   * to this device. These Readers can be physical devices or virtual devices.
   * They can be removable or not. They can contain Secure Element that can or
   * cannot be removed.
   */
  [NoInterfaceObject] interface Reader
  {

    /**
     * \brief Check if a Secure Element is present in this reader.
     */
    readonly attribute boolean isPresent;

    /**
     * \brief Return the user-friendly name of this reader.
     */
    DOMString getName();

    /**
     * \brief Connects to a secure element in the specified reader.
     *
     * When executed, it MUST attempt to open a Session with the SecureElement in
     * this Reader. If the Session is established successfully, the callback
     * MUST be invoked with the resulting Session.
     *
     * If the attempt fails, the callback onError operation MUST be invoked
     * with the relevant error code:
     *
     * <ul>
     * <li> security: If the operation is not allowed. </li>
     * <li> invalid_state: If there is no SecureElement in this reader. </li>
     * <li> io: If there was a problem communicating with the SecureElement in this reader. </li>
     * <li> unknown: In any other error case. </li>
     * </ul>
     *
     * \param successCallback To be invoked in case of successful establishment of the Session
	 * \param errorCallback To be invoked in case of error
     */
    PendingSESessionOp openSession(SessionCallback successCallback, optional ErrorCallback errorCallback);

    /**
     * Closes the session opened on this reader.
     * All the channels opened by the session will be closed.
     */
    void closeSession();

  };


  /**
   * \brief An open Session with a SecureElement
   *
   * Instances of this interface represent a connection session to one of
   * the secure elements available on the device. These objects can be
   * used to get a communication channel with an application in the secure
   * element. This channel can be the basic channel or a logical channel.
   *
   */
  [NoInterfaceObject] interface Session
  {

    /**
     * \brief Tells if this session is closed.
     */
    readonly attribute boolean isClosed;

    /**
     * \brief Get an access to the basic channel (opened by default, with id equal to 0).
     *
     * When executed, this operation MUST attempt to open a logical
     * channel in the current Session. If successful, the callback MUST
     * be invoked with the obtained instance of the Channel class.
     * Once this channel has been opened and given to an
     * application, it is considered as "locked" by this application, and
     * other calls to this method will fail, until it is closed by
     * calling the close method. Some secure elements (like the UICC)
     * might always refuse to open basic channel.
     *
     * If the attempt fails, the callback onError operation MUST be invoked
     * with the relevant error code:
     *
     * <ul>
     * <li> security: If the operation is not allowed. </li>
     * <li> invalid_state: If there is no SecureElement in this reader. </li>
     * <li> io: If there was a problem communicating with the SecureElement in this reader. </li>
     * <li> invalid_value: If the aid's length is not within 5 to 16 (inclusive). </li>
     * <li> no_channel: If basic channel is not available. </li>
     * <li> unknown: In any other error case. </li>
     * </ul>
     *
     * \param aid The AID of the application to be selected on this channel, as a ByteArray; if null it will select the default application.
     * \param successCallback To be invoked in case of successful establishment of the Channel
	 * \param errorCallback To be invoked in case of error
     */
    PendingSEChannelOp openBasicChannel(Byte[]? aid, ChannelCallback successCallback, optional ErrorCallback errorCallback);

    /**
     * \brief Open a channel with the secure element, selecting the application represented by the given AID.
     *
     * When executed, this operation MUST attempt to open a logical
     * channel in the current Session. If successful, the callback MUST
     * be invoked with the obtained instance of the Channel class.
     *
     * The AID can be omitted, which means no application is to be selected 
     * on this channel, the default application is used.
     * It's up to the secure element to choose which logical channel
     * will be used. If no channel is available to communicate with the secure
     * element, an attempt to use the basic channel is made, and if it succeed
     * an instance mapped to the basic channel is returned. The application
     * can tell if the returned channel is the basic channel by using the
     * isBasicChannel method.
     *
     * If the attempt fails, the callback onError operation MUST be invoked
     * with the relevant error code:
     *
     * <ul>
     * <li> security: If the operation is not allowed. </li>
     * <li> invalid_state: If there is no SecureElement in this reader. </li>
     * <li> io: If there was a problem communicating with the SecureElement in this reader. </li>
     * <li> invalid_value: If the aid's length is not within 5 to 16 (inclusive). </li>
     * <li> no_channel: If no channel is available. </li>
     * <li> unknown: In any other error case. </li>
     * </ul>
     *
     * \param aid The AID of the application to be selected on this channel, as a ByteArray; if null it will select the default application.
     * \param successCallback To be invoked in case of successful establishment of the Channel
	 * \param errorCallback To be invoked in case of error
     */
    PendingSEChannelOp openLogicalChannel(Byte[]? aid, ChannelCallback successCallback, optional ErrorCallback errorCallback);

    /**
     * \brief Get the Answer to Reset of this secure element.
     *
     * The returned byte array can be null, which means the reader
     * cannot provide the ATR for this Secure Element.
     *
     */
    Byte[] getATR();

    /**
     * \brief Close the connection with the secure element.
     *
     * This will close any channel opened by this application with
     * this secure element.
     *
     */
    void close();

    /**
     * \brief Close any channel opened on this session
     */
    void closeChannels();

  };


  /**
   * \brief A channel opened with a specific applet
   *
   */
  [NoInterfaceObject] interface Channel {

   /**
    * \brief Close this channel to the secure element.
    */
    void close();

    /**
     * \brief Indicates whether or not this channel is the basic channel.
     */
    readonly attribute boolean isBasicChannel;

    /**
     * \brief Transmit an APDU command to the secure element and communicate
     * the response when available.
     *
     * The command parameter should be formatted as if send of over basic channel. The transmit 
     * operation will update the ByteArray to include the channel identifier.
     *
     * The transmit operation will filter out some commands:
     * <ul>
     * <li>MANAGE_CHANNEL commands are not allowed. </li>
     * <li>SELECT by DF Name (p1=04) are not allowed. </li>
     * <li>CLA bytes with channel numbers are de-masked. </li>
     * </ul>
     *
     * When executed, this operation MUST initiate an asynchronous operation that
     * attempts to send a command over this Channel and wait for a response.
     * If successful, the callback MUST be invoked with the received
     * response as a ByteArray.
     *
     * If the attempt fails, the callback onError operation MUST be invoked
     * with the relevant error code:
     *
     * <ul>
     * <li> security: If the operation is not allowed. </li>
     * <li> invalid_state: If there is no SecureElement in this reader. </li>
     * <li> io: If there was a problem communicating with the SecureElement in this reader. </li>
     * <li> invalid_value: If the command is determined to be invalid in some way. </li>
     * <li> unknown: In any other error case. </li>
     * </ul>
     *
     * \param command The command to be sent on this channel, as a ByteArray.
     * \param successCallback To be invoked in case of successful completion of the command
     * \param errorCallback To be invoked in case of error
     */
    PendingSEtransmitOp transmit(Byte[] command, TransmitCallback successCallback, optional ErrorCallback errorCallback);
  };


  /**
   * \brief Callback interface to process SE availability events
   */
  callback interface SEListener {

    /**
     * \brief operation called when a new SE in detected in a reader
     */
    void onSEReady(Reader reader);

    /**
     * \brief operation called when a SE is not available anymore in a reader
     */
     void onSENotReady(Reader reader);

  };


  /**                       
   * \brief Method invoked when a messaging function returns an error
   *
   * \param error The error message received 
   * \return void
   */         
    callback ErrorCallback = void (DOMError error);

	 
  /**
   * \brief ReaderArray specific success callback.
   *
   * This callback interface specifies a success callback with a function
   * taking an Reader array as input argument. It is used to signify successful
   * asynchronous completion of SecureElementManager.getReaders()
   */
    callback ReaderArrayCallback = void (Reader[] readers);


  /**
   * \brief Session specific success callback.
   *
   * This callback interface specifies a success callback with a function
   * taking an Session as input argument. It is used to signify successful
   * asynchronous completion of Reader.openSession()
   */
    callback SessionCallback = void (Session session);

	
  /**
   * \brief Channel specific success callback.
   *
   * This callback interface specifies a success callback with a function
   * taking an Channel as input argument. It is used to signify successful
   * asynchronous completion of Session.openChannel()
   */
    callback ChannelCallback = void (Channel channel);

	
  /**
   * \brief transmit specific success callback.
   *
   * This callback interface specifies a success callback with a function
   * taking an ByteArray as input argument. It is used to signify successful
   * asynchronous completion of, and the response to, an APDU command sent on
   * a channel with Channel.transmit()
   */
    callback TransmitCallback = void (Byte[] response);

	
    /**
     * \brief The PendingSEReaderOp interface
     *
     * The PendingSEReaderOp interface describes the object that is returned by the asynchronous getReaders() method. It makes it possible to abort
     * this operation to a stop if it hasn't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
     *
     */
     interface PendingSEReaderOp {

    /**
     * \brief Method Cancel
     *
     *  Cancel the pending getReaders asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return.
     *  Allocated resources should be released and any ongoing related network operations should be terminated. An error callback is issued with the DOMError
     *  name "AbortError".
     */
        void cancel ();
     };

	 
    /**
     * \brief The PendingSESessionOp interface
     *
     * The PendingSESessionOp interface describes the object that is returned by the asynchronous openSession() method. It makes it possible to abort
     * this operation to a stop if it hasn't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
     *
     */
     interface PendingSESessionOp {

    /**
     * \brief Method Cancel
     *
     *  Cancel the pending openSession asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return.
     *  Allocated resources should be released and any ongoing related network operations should be terminated. An error callback is issued with the DOMError
     *  name "AbortError".
     */
        void cancel ();
     };
	 

    /**
     * \brief The PendingSEChannelOp interface
     *
     * The PendingSEChannelOp interface describes the object that is returned by the asynchronous openBasicChannel() or openLogicalChannel() methods. It makes it possible to abort
     * this operation to a stop if it hasn't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
     *
     */
     interface PendingSEChannelOp {

    /**
     * \brief Method Cancel
     *
     *  Cancel the pending openBasicChannel() or openLogicalChannel() asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return.
     *  Allocated resources should be released and any ongoing related network operations should be terminated. An error callback is issued with the DOMError
     *  name "AbortError".
     */
        void cancel ();
     };
	 

    /**
     * \brief The PendingSEtransmitOp interface
     *
     * The PendingSEtransmitOp interface describes the object that is returned by the asynchronous transmit() method. It makes it possible to abort
     * this operation to a stop if it hasn't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
     *
     */
     interface PendingSEtransmitOp {

    /**
     * \brief Method Cancel
     *
     *  Cancel the pending transmit() asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return.
     *  Allocated resources should be released and any ongoing related network operations should be terminated. An error callback is issued with the DOMError
     *  name "AbortError".
     */
        void cancel ();
     };
	 
	 
	 
	 