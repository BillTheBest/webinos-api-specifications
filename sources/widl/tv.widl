/**
* \brief Interface for TV control and managment.
*
* The interface provides means to acquire a list of tv sources, channels and
* their streams.
* 
* The TV channel streams can be displayed in HTMLVideoElement object
* (http://dev.w3.org/html5/spec/video.html). Alternatively the API provides
* means to control channel management of the native hardware TV, by allowing
* to set a channel or watch for channel changes that are invoked otherwise.
*
* The tv object is made available under the webinos namespace, i.e.
* webinos.tv.
*
* \def-api-feature http://webinos.org/api/tv
* \author Fraunhofer FOKUS, Alexander Fut&aacute;sz &lt;alexander.futasz@fokus.fraunhofer.de&gt;
* \author Dominique Hazael-Massieux
*/
module tv {

/**
* \brief Creates tv object.
*/
[NoInterfaceObject] 
interface WebinosTV {
  readonly attribute TVManager tv;
};

webinoscore::Webinos implements WebinosTV;

/**
* \brief Access to tuner and display managers.
*/
[NoInterfaceObject] 
interface TVManager {
  readonly attribute TVDisplayManager display;
  readonly attribute TVTunerManager tuner;
}; 

/**
 * \brief Interface to manage what's currently displayed on TV screen.
 *
 * This interface is useful when an app doesn't want to show the broadcast
 * itself, but let the TV natively handle playback, i.e. not in a web context.
 * Useful to build an control interface that allows channel switching.
 * \code
  \<p>Currently shown on TV: \<span id='tv'>Undetermined\</span>\</p>
  \<script>
  var channel; // holding a previously obtained channel object.
  webinos.tv.display.setChannel(channel, success);
  var ontv = document.getElementById('tv');
  function success(channel) {
    ontv.normalize();
    ontv.removeChild(ontv.childNodes[0]);
    ontv.appendChild(document.createTextNode(channel.name + ' (source: ' + channel.tvsource.name + ')'));
  }
  \</script>
 * \endcode
*/
[NoInterfaceObject]
interface TVDisplayManager {
  /**
   * \brief Switches the channel natively on the TV (same as when a hardware remote control would be used).
   *
   * \param channel The TV channel to switch to.
   * \param successCallback The callback to notify the caller that the channel change succeeded.
   * \param errorCallback The callback called in case the channel could not be switched and an error occured.
   */
  void setChannel(Channel channel, TVDisplaySuccessCB successCallback, optional TVErrorCB errorCallback);
};

/**
 * \brief Callback function when current channel changed successfully.
*/
[Callback=FunctionOnly, NoInterfaceObject]
interface TVDisplaySuccessCB {
  void onSuccess(Channel channel);
};

/**
* \brief Get a list of all available TV tuners.
* \code
  \<label>Pick a TV Source: \<select id='source'>
  \<option>None\</option>
  \</select>\</label>
  \<label>Pick a  channel: \<select id='channel'>
  \<option>None\</option>
  \</select>\</label>
  \<video id='display' width='640' height='400' poster='nochannel.png'>\</video>
  \<script>
  webinos.tv.tuner.getTVSources(successCB);
  var tvsourceselector = document.getElementById('source');
  var channelselector = document.getElementById('channel');
  var v = document.getElementById('display');
  var currentTVSource;
  var tvsources = [];
  function successCB(sources) {
    tvsources = sources;
    for (var i in sources) {
      var o = document.createElement('option');
      o.value = i;
      o.appendChild(document.createTextNode(sources[i].name);
      tvsourceselector.appendChild(o);
    }
  }
  tvsourceselector.addEventListener('change', function (e) {
    currentTVSource = tvsources[e.target.value];
    // start showing first channel
    if (currentTVSource.channelList.length) {
      v.src = currentTVSource.channelList[0].stream;
      for (var i in currentTVSource.channelList) {
          var channel = currentTVSource.channelList[i];
	  var o = document.createElement('option');
	  o.appendChild(document.createTextNode(channel.name);          
	  o.value = i;
	  channelselector.appendChild(o);
    }
  }, false);
  channelselector.addEventListener('change', function (e) {
     if (e.target.value) {
       v.src = currentTVSource.channelList[e.target.value].stream;
     }
  }, false);
  \</script>
* \endcode
*/
[NoInterfaceObject] 
interface TVTunerManager {
  /**
   * \brief Get a list of all available TV tuners.
   *
   * \param successCallback Callback that receives all available TV sources.
   * \param errorCallback Callback called in case something goes wrong.
   */
  void getTVSources(TVSuccessCB successCallback, optional TVErrorCB errorCallback);
};

/**
* \brief Callback for found TV tuners.
*/
[Callback=FunctionOnly, NoInterfaceObject] 
interface TVSuccessCB {
  /**
   * \brief Callback that is called with the found TV sources.
   *
   * \param sources An array of TVSource objects representing available tuners.
   */
  void onSuccess(TVSource[] sources);
};

/**
* \brief Error callback for errors when trying to get TV tuners.
*/
[Callback=FunctionOnly, NoInterfaceObject] 
interface TVErrorCB {
  /**
   * \brief Callback that is called when an error occures while getting TV sources
   *
   * \param error Error object detailing what went wrong.
   */
  void onError(TVError error);
};

/**
* \brief Error codes.
*/
[NoInterfaceObject] 
interface TVError {
  /**
   * \brief An unknown error.
   */
  const unsigned short UNKNOWN_ERROR = 0;
  
  /**
   * \brief Invalid input channel.
   */
  const unsigned short ILLEGAL_CHANNEL_ERROR = 1;
  
  /**
   * \brief Code.
   */
  readonly attribute unsigned short code;
};

/**
* \brief TV source: a list of channels with a name.
*/
[NoInterfaceObject] 
interface TVSource {
  /**
   * \brief The name of the source.
   *
   * The name should describe the kind of tuner this source represents, e.g. DVB-T, DVB-C.
   */
  readonly attribute DOMString name;
  
  /**
   * \brief List of channels for this source.
   */
  readonly attribute Channel[] channelList;
};

/**
 * \brief The Channel Interface
 *
 * Channel objects provide access to the video stream.
 */
[NoInterfaceObject]
interface Channel {
 /**
   * \brief Indicates a TV channel.
   */
  const unsigned short TYPE_TV = 0;
  
  /**
   * \brief Indicates a radio channel.
   */
  const unsigned short TYPE_RADIO = 1;
  
  /**
   * \brief The type of channel.
   *
   * Type of channel is defined by one of the TYPE_* constants defined above.
   */
  readonly attribute unsigned short channelType;
  
 /**
   * \brief The name of the channel.
   *
   * The name of the channel will typically be the call sign of the station.
   */
  readonly attribute DOMString name;
  
  /**
   * \brief The long name of the channel.
   *
   * The long name of the channel if transmitted. Can be undefined if not available.
   */
  readonly attribute DOMString longName;
  
  /**
   * \brief The video stream.
   *
   * This stream is a represents a valid source for a HTMLVideoElement.
   */
  readonly attribute Stream stream;
  
  /**
   * \brief The source this channels belongs too.
   */
  readonly attribute TVSource tvsource;
};

/**
 * \brief Event that fires when the channel is changed.
 *
 * Changing channels could also be invoked by other parties, e.g. a hardware
 * remote control. A ChannelChange event will be fire in these cases which
 * provides the channel that was switched to.
 * \code
  \<p>Currently shown on TV: \<span id='tv'>Undetermined\</span>\</p>
  \<script>
  window.addEventListener('channelchange', success);
  var ontv = document.getElementById('tv');
  function success(channel) {
    ontv.normalize();
    ontv.removeChild(ontv.childNodes[0]);
    ontv.appendChild(document.createTextNode(channel.name + ' (source: ' + channel.tvsource.name + ')'));
  }
  \</script>
 \endcode
 */
[NoInterfaceObject] interface ChannelChangeEvent : Event {
 /**
   * \brief The new channel.
   */
  readonly attribute Channel channel;

  /**
   * \brief Initializes a new channel change event.
   *
   * \param type The type of event. Pass 'channelchange'.
   * \param bubbles Indicates whether the event bubbles.
   * \param cancelable Indicates whether the event is cancelable.
   * \param channel The channel that was changed to.
   */
  void initChannelChangeEvent(DOMString type, boolean bubbles, boolean cancelable, Channel channel);
  
};

};
