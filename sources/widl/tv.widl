/**
 * \brief Interfaces for TV control.
 *
 * This API has the following goals: \n
 * - Provide functionality to access the channel list and information like type and name of a channel. \n
 * - Switch between channels. \n
 * - Stop/start the broadcast. \n
 * \n
 * This API builds on two existing approaches and merges both. The basis for this API is the HTML5 video element interface (HTMLVideoElement). The here specified interface HTMLTVElement extends the video element and provides the functionality necessary to achieve the mentioned goals on top of it. This added functionality is based on the Open IPTV Forum Release 2 Volume 5 Specification for Declarative Application Environment.
 *
 * \code
\<p>Now viewing: \<span id='channel'>Nothing\</span>\</p>
\<video width="640" height="480" controls id='mytv'>
  \<source src="tv">
\</video>
\<script>
var mytv = document.getElementById('mytv');
var numberOfChannels = mytv.channelList.length;

// pick a random channel
var randomChannel = mytv.channelList[Math.floor(Math.random()*numberOfChannels)];
mytv.setChannel(randomChannel, function(channel) {
  // Updating name of channel
  document.getElementById('channel').normalize();
  document.getElementById('channel').removeChild(document.getElementById('channel').childNodes[0]);
  document.getElementById('channel').appendChild(document.createTextNode(channel.name));
});

\</script>
 * \endcode
 * \author Alexander Fut&aacute;sz &lt;alexander.futasz@fokus.fraunhofer.de&gt;
 */
module tvcontrol {

  // these interface are placeholders so we can inherit from them
  interface HTMLVideoElement {};
  interface Event {};

  /**
   * \brief The HTMLTVElement interface
   *
   * The HTMLTVElement interface extends the HTMLVideoElement from HTML5 to
   * support TV video broadcast streams which are mapped as channels. The API
   * supports listing, setting and switching these channels.
   *
   * See http://dev.w3.org/html5/spec/video.html
   */
  interface HTMLTVElement : HTMLVideoElement {
    
    /**
     * \brief Indicates whether the media element is stopped or not. 
     */
    readonly attribute boolean stopped; 

    /**
     * \brief An array holding all channels that can be switched to.
     *
     * The order in this array defines the behaviour of the nextChannel() and
     * prevChannel() functions.
     */
    readonly attribute Channel[] channelList;
    
    /**
     * \brief Get the current channel, if no channel was set this will be null.
     */
    readonly attribute Channel currentChannel;

    /**
     * \brief Requests the tuner to switch to the channel specified.
     *
     * Request to switch to the specified channel and render the received broadcast. 
     *
     * \param channel A channel object, obtained from the channelList.
     * \param successCb Callback issued if channel change succeeds.
     * \param errorCb Callback issued if channel change fails.
     */
    void setChannel(in Channel channel, in ChannelChangeSuccessCallback successCb, in optional ChannelChangeErrorCallback errorCb);
    
    /**
     * \brief Request to switch the tuner to the previous channel.
     *
     * The previous channel is the channel preceding the current channel in
     * channelList. The list shall be cycled in case the end has been reached.
     * \param successCb Callback issued if channel change succeeds.
     * \param errorCb Callback issued if channel change fails.
     */
    void prevChannel(in ChannelChangeSuccessCallback successCb, in optional ChannelChangeErrorCallback errorCb);
    
    /**
     * \brief Request to switch the tuner to the next channel.
     *
     * The next channel is the channel succeeding the current channel in
     * channelList. The list shall be cycled in case the end has been reached.
     * \param successCb Callback issued if channel change succeeds.
     * \param errorCb Callback issued if channel change fails.
     */
    void nextChannel(in ChannelChangeSuccessCallback successCb, in optional ChannelChangeErrorCallback errorCb);
    
    /**
     * \brief Stop video broadcast.
     *
     * If a video broadcast is currently playing, stop the broadcast and transition
     * to a stopped state.
     */
    void stop();
    
  };
  
  /**
   * \brief ChannelChangeSuccessCallback interface.
   */
  [Callback=FunctionOnly] interface ChannelChangeSuccessCallback {
  
    /**
     * \brief This callback is called once the issued channel change successfully
     * completed.
     *
     * \param channel The channel that was asked to change to.
     */
    void onSuccess(in Channel channel);
  };

  /**
   * \brief ChannelChangeErrorCallback interface.
   */
  [Callback=FunctionOnly] interface ChannelChangeErrorCallback {
  
    /**
     * \brief This callback is called once the issued channel change successfully
     * completed.
     *
     * \param error Error object detailing what went wrong during channel change.
     */
    void onError(in ChannelChangeError error);
  };

  /**
   * \brief The error interface used in the ChannelChangeErrorCallback. 
   */  
  interface ChannelChangeError {
  
    /**
     * \brief An unknown error.
     */
    const unsigned short UNKNOWN_ERROR = 0;
    
    /**
     * \brief Invalid input channel.
     */
    const unsigned short ILLEGAL_CHANNEL_ERROR = 1;
    
  };

  /**
   * \brief The Channel Interface
   *
   * Channel objects represent broadcast streams. 
   */
  interface Channel {

    /**
     * \brief Indicates a TV channel.
     */
    const unsigned short TYPE_TV = 0;
    
    /**
     * \brief Indicates a radio channel.
     */
    const unsigned short TYPE_RADIO = 1;
    
    /**
     * \brief The type of channel.
     *
     * Type of channel is defined by one of the TYPE_* constants defined above.
     */
    readonly attribute unsigned short channelType;

    /**
     * \brief The name of the channel.
     *
     * The name of the channel will typically be the call sign of the station.
     */
    readonly attribute DOMString name;
    
    /**
     * \brief The long name of the channel.
     *
     * The long name of the channel if transmitted. Can be undefined if not available.
     */
    readonly attribute DOMString longName;
    
  };
  
  /**
   * \brief Event that fires when the channel is changed.
   *
   * Provides the channel that was switched to.
   */
  interface ChannelChangeEvent : Event {

    /**
     * \brief The new channel.
     */
    readonly attribute Channel channel;

    /**
     * \brief Initializes a new channel change event.
     *
     * \param type The type of event. Pass 'channelchange'.
     * \param bubbles Indicates whether the event bubbles.
     * \param cancelable Indicates whether the event is cancelable.
     * \param channel The channel that was changed to.
     */
    void initChannelChangeEvent(in DOMString type, in boolean bubbles, in boolean cancelable, in Channel channel);
    
  };
    
};
