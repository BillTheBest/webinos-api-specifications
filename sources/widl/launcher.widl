/**<p>Allows activation of webinos applications installed locally on the device.</p>
 * \name AppLauncher API
 * \brief The application execution API (AppLauncher) allows activation of webinos applications installed locally on the device. The API is modelled after BONDI v1.1 AppLauncher API.
 *
 *
 * Operation of the API is guided by application execution policies, which can be modified by user. 
 * The policies control the following aspects of API operation: \n
 *  - Enable/disable of activation of native applications \n
 *  - Enable/disable of activation of webinos installable applications \n
 *  - Enable/disable of notifications to users when a webinos application attempts to activate another application \n
 *  - Enable/disable of application ability to discover installed applications \n
 *  - Enable/disable of logging of operations performed using the API \n
 *
 * The application execution API provides mechanisms for webinos applications to check if specific webinos application is installed in the device. 
 *
 * \def-api-feature http://webinos.org/api/applauncher.launch
 * Start webinos application - allows to invoke webinos application identified by a unique identifier.
 * 
 * \def-api-feature http://webinos.org/api/applauncher.check
 * Check if application is installed - allow to test of an application identified by a specific application ID is installed on the device.
 *
 * \author Michael Vakulenko &lt;michael@visionmobile.com&gt;
 * \author Andr&eacute; Paul &lt;andre.paul@fokus.fraunhofer.de&gt;
 * \version 0.9 
 */

  /**
   * \brief Application ID for identifying installed webinos applications. 
   *  NOTE: This definition could be moved to webinos core module in the future.
   */
  typedef DOMString applicationID;
  
  
  /**
   * \brief NOTE: \n
   *  - applicationID type will be defined in webinoscore module. Each application will have a unique ID coming from its manifest file. applicationID is a string composed of ID from the app certificate and identifiers assigned by the maker of the app. For the purposes of phase 1 AppLauncher API, we can assume the ID is a string that will be known to the application that starts another application and is known to the runtime based on manifests of installed apps. \n
   *
   * This is the main interface for the AppLauncher API.
   *
   * \code

        // Define the launchApplication success callback.
        function launchedCallback()   {
               alert("Webinos application launched successfully");
        }


        // Define the error callback
        function errorCallback(response) {
                        alert( "The following error: " +  response + ", occurred");
        }


        // Activate webinos application, if the application is installed in the device.
        var appinstalled = webinos.AppLauncher.AppInstalled( appID);

        if ( appinstalled)  {
            webinos.AppLauncher.launchApplication(launchedCallback, errorCallback, appID, null);
        }                      
   * \endcode
   */  
  
  
  [NoInterfaceObject] interface AppLauncherManager {

      /**
       * \brief Starts a webinos applicaiton identified by appID. The method is asynchronous. If the app was started successfuly, successCallback is invoked. In case of error, errorCallback is called. Throws DOMException of type AppLauncherError when activation of the application was not successful.
       *
       * \param successCallback Callback invoked when a requested webinos app was activated successfully. 
       * \param errorCallback Callback invoked if activation of webinos app was not successful.
       * \param appID Identifies webinos application that needs to be activated.
       * \param params Optional set of parameters for starting the application.
       * \return A pending operation object
       */

    void launchApplication(VoidFunction successCallback,
                                       ErrorCallback errorCallback,
                                       applicationID appID,
                                       optional sequence<object> params);


      /**
       * \brief Reports if a specific webinos application is installed in the device. The method is synchronous.
       *
       * \param callback AppInstalledCallback that is called when the result can be provided.
       * \param errorCallback Callback invoked if the request could not be executed successfully.
       * \param appID Identifies webinos application presence of which needs to be tested.
       * \return True if the application is installed, false if the application is not installed.
       */
      void appInstalled(AppInstalledCallback callback, ErrorCallback errorCallback, applicationID appID);
    };
    
    
    /**
     * \brief Callback called when appInstalled operation provides a result. 
     * \param result Result of the query operation that is true if the requested app is installed or false if not. 
     *
     */         
    callback AppInstalledCallback = void (boolean result);
        
    /**
    * \brief callback for a failed activation of asynchronous launchApplication method.
    * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> containing information about the error ; in particular, NotFoundError if application does not exist, InvalidStateError if application already started, QuotaExceededError if no resources are available
    */
    callback ErrorCallback = void (DOMError error);

    
	/**
	 * \brief The WebinosLauncher interface describes the part of the App Execution
	 *        API accessible through the webinos object.
	 */
	[NoInterfaceObject] interface WebinosLauncher {
		/**
		 * \brief webinos.launcher object.
		 */
		readonly attribute AppLauncherManager launcher;
	};


	Webinos implements WebinosLauncher;

