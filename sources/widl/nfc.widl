/**<p> Near Field Communication (NFC) support.</p> 
 * \name NFC API
 *
 * Near Field Communication (NFC) is an international standard (ISO/IEC 18092) 
 * that specifies an interface and protocol for simple wireless interconnection 
 * of closely coupled devices operating at 13.56 MHz. 
 * (http://www.nfc-forum.org/specs/spec_list/). There are three groups of 
 * application scenarios for NFC: The first one is to hold a device close 
 * to a wireless tag to exchange some digital information or data. The second 
 * is to hold two devices close to each other in order to exchange some 
 * information or data between them. The third one is to make payments by 
 * holding mobile phones close to point of sales terminals instead of 
 * swiping smart cards.
 *
 * \def-api-feature http://webinos.org/api/nfc
 * Acccess to all the module. This feature provides access to the whole API.
 *
 * \def-api-feature http://webinos.org/api/nfc.read
 * Acccess to all the module except write operations.
 *
 * \author Dave Raggett (W3C) &lt;dsr@w3.org&gt;
 * \author Hans Myrhaug (AmbieSense Ltd.) &lt;hans@ambiesense.com&gt;
 * \author Stefano Vercelli (Telecom Italia) &lt;stefano.vercelli@telecomitalia.it&gt;
 * \author WIDL format created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 *
 * \version 1.5
 */

/**
* \brief Creates the application state synchronization namespace.
*
* Access to public constants and functions are available via the namespace webinos.sync.
*/

partial interface Webinos  {
  readonly attribute NFC nfc;
}

    /**
   * \brief The NFCinterface
   *
   * Most of the descriptibe text will end up here.
   */


interface NFC {
  // add generic listener for all NFC tag technologies
  void addListener(NfcEventCallBack listener,
      SuccessCallBack success, FailCallBack fail);

  // add listener for NDEF tags with text record(s)
  void addTextTypeListener(NfcEventCallBack listener,
      SuccessCallBack success, FailCallBack fail);

  // add listener for NDEF tags with URI record(s)
  void addUriTypeListener(NfcEventCallBack listener,
      SuccessCallBack success, FailCallBack fail);

  // add listener for NDEF tags with MIME content record(s)
  void addMimeTypeListener(DOMString mimeType,
      NfcEventCallBack listener, SuccessCallBack success, FailCallBack fail);

  // set device to push NDEF message to another NDEF device
  void shareTag(NfcNdefRecord[] message, SuccessCallBack success, FailCallBack fail);

  // unset device from NDEF push sharing mode
  void unshareTag(SuccessCallBack success, FailCallBack fail);

  // establish HTML MessageChannel with another device via LLCP
  void peer(LLCPCallBack success, FailCallBack fail);

  // methods for creating NDEF records
  NfcNdefRecord textRecord(DOMString text);
  NfcNdefRecord uriRecord(DOMString uri);
  NfcNdefRecord mimeRecord(DOMString mimeType, byte[] data);

  // ancilliary methods for NDEF record payloads
  byte[] stringToBytes(DOMString string);

  DOMString bytesToString(byte[] data);
};

// call back for NDEF events
callback NfcEventCallBack = void (NfcNdefEvent event);

// call back with associated operation has succeeded
callback SuccessCallBack = void ();

// call back with associated operation has failed
// Question: consider passing some information on the failure
callback FailCallBack = void ();

// call back when message channel has been established over LLCP
callback LLCPCallBack = void (MessageChannel channel);

// the NFC event has a single property -- the NFC Tag
interface NfcNdefEvent : DOMEvent {
  readonly attribute NfcTag tag; 
};

// the properties and methods for Tags
interface NfcTag {
  readonly attribute NfCTagTech tech;  
  readonly attribute NfcNdefRecord[] ndefMessage;

  attribute CloseCallBack close;

  void write(NfcNdefRecord[] ndefMessage,
             SuccessCallBack success, FailCallBack fail);

  void makeReadOnly(SuccessCallBack success, FailCallBack fail);
};

// call back when connection with tag is closed
// e.g. when user pulls the tag away from the reader
callback CloseCallBack = void ();

// enumeration of tag technologies

        /**
        * \brief enumeration of tag technologies
        */
          enum NfCTagTech {"OTHERS", "NFCA", "NFCB", "NFCF", "NFCV", "ISODEP", "NDEF"};
};

// the properties for NDEF records
// definitions come from the NFC Forum
interface NfcNdefRecord {
  readonly attribute DOMString tnf;
  readonly attribute DOMString type;
  readonly attribute DOMString id;
  readonly attribute byte[] payload;
};
      