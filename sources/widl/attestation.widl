/**
 * \brief Attestation: find the identity and integrity of running software 
 *
 * The attestation API provides a secure method of querying the underlying device hardware to find out the identity and integrity of running software. \n
 * This API should allow applications to communicate with hardware security systems, such as a Trusted Platform Module (defined in the Trusted Computing Group specifications). \n
 *
 * However, the usual trusted computing specifications are generally aimed at a lower layer of the operating system than webinos. \n
 * The aim of the attestation API is to expose existing low-level functionality to web applications. \n
 * \n 
 * Requirement/architectural reference: ID-DEV-POLITO-005, ID-DEV-POLITO-006, ID-DEV-POLITO-007, ID-DEV-POLITO-008 \n
 *
 *
 *
 * Example use of attestation, taken from the Security Architecture Documentation (D3.5):
 *
 * 1.	User starts an application called "MyBankApp" \n
 * 2.	MyBankApp communicates with a remote webserver at http://bank.example.com\n
 * 3.	http://bank.example.com asks MyBankApp to attest to its current status\n
 * 4.	MyBankApp uses the Attestation API to request a public key and key credential for the local device, Peter's Smartphone. \n
 *			- App calls getAttestationKey() and getKeyCredential() to retrieve this information\n
 * 5.	The key credential is forwarded to http://bank.example.com\n
 * 6.	http://bank.example.com assesses the credential and checks to see whether the endpoint is a trusted device.\n
 *			- If not, attestation fails.\n
 * 7.	http://bank.example.com gives MyBankApp a fresh nonce, a 20 byte random value.\n
 * 8.	MyBankApp uses this nonce and the public key with the attestation API on Peter's Smartphone:\n
 * 			- call attestPlatform( nonce, key )\n
 * 9.	Peter's Smartphone returns attestation data, which includes a log of the integrity of the platform ("trustChain"), 
 *      as well as validation data from the hardware trusted platform module ("validation data") with schema "TPM_Quote".\n
 * 10.	These values are passed on to http://bank.example.com\n
 * 11.	http://bank.example.com  assesses the validation data and the integrity log using standard TCG techniques 
 *      see http://www.trustedcomputinggroup.org/resources/tcg_architecture_overview_version_14 and related documents \n
 *			- If the platform integrity is not trusted, attestation fails\n
 *			- If the validation data is not trusted, attestation fails\n
 * 12.	http://bank.example.com passes MyBankApp a temporary token which gives it access to the http://bank.example.com 
 *      banking capabilities\n
 * 13.	User authentication is requested via the authentication API\n
 * 14.	The application is now able to perform transactions using remote http://bank.example.com APIs.\n
 * 
 *
 *
 * \author Andrew Martin; &lt;andrew.martin@cs.ox.ac.uk;&gt; \n John Lyle; &lt;john.lyle@cs.ox.ac.uk&gt;
 * \def-api-feature http://webinos.org/api/attestation
 * \version 0.1
 */
module attestation {

	
	/** 
	  * \brief Definition of X509 certificate data structure taken from the ASN1 X509 Specifications and RFC 2459 http://www.ietf.org/rfc/rfc2459.txt \n
	  * We expect for TCG attestation that the SKAE extension to also be introduced, definition: \n
	  * http://www.trustedcomputinggroup.org/files/resource_files/876A7F79-1D09-3519-AD321B21144AE93C/IWG_SKAE_Extension_1-00.pdf \n
	  * however it is not defined here. \n
	  */
	interface X509 {		
		readonly attribute TBSCertificate certificate;
		readonly attribute AlgorithmIdentifier signatureAlgorithm;
		readonly attribute byte[] signature;
	};

	/**
     * \brief as defined in http://www.ietf.org/rfc/rfc2459.txt 
	 */
	interface TBSCertificate { 
		readonly attribute DOMString version;
		readonly attribute Integer serialNumber;
		readonly attribute AlgorithmIdentifier signature;
		readonly attribute namePairArray issuer;
		readonly attribute Validity validity;
		readonly attribute namePairArray subject;
		readonly attribute SubjectPublicKeyInfo subjectPublicKeyInfo;
		readonly attribute Any? extensions;
	};
	
	/**
     * \brief as defined in http://www.ietf.org/rfc/rfc2459.txt 
	 */
	interface Validity { 
		readonly attribute Date notBefore; 
		readonly attribute Date notAfter;
	};
	
	/**
     * \brief as defined in http://www.ietf.org/rfc/rfc2459.txt 
	 */
	typedef namePair[] namePairArray;

	/**
     * \brief A single pair of key and value. 
	 */
	interface namePair {
		readonly attribute DOMString key;
		readonly attribute DOMString value;
	};
	
	/**
     * \brief as defined in http://www.ietf.org/rfc/rfc2459.txt 
	 */
	interface AlgorithmIdentifier {
	    readonly attribute DOMString identifier;
		/* These are optional parameters */
		readonly attribute DOMString? parameters;
	};
	
	/**
     * \brief as defined in http://www.ietf.org/rfc/rfc2459.txt 
	 */
	interface SubjectPublicKeyInfo {
		readonly attribute AlgorithmIdentifier algorithm;
		readonly attribute byte[] publickKey;
	};

	
	/**
	 * \brief Exception handling for the attestation API 
	 */
	exception AttestationException  {
     /**
	   * \brief An unknown error occurred. 
	   */
	const unsigned short UNKNOWN_ERROR = 0;
	
     /**
	   * \brief An invalid parameter was provided when the requested method was invoked. 
	   */
	const unsigned short INVALID_ARGUMENT_ERROR = 1;

	/**
	  * \brief An error occurred in communication with the underlying implementation that meant the requested method could not complete. 
	  */
	const unsigned short IO_ERROR = 4;
	
	 /**
	   * \brief The requested method is not supported by the current implementation. 
	   */
	const unsigned short NOT_SUPPORTED_ERROR = 5;
	
	 /**
	   * \brief Access to the requested method was denied at the implementation or by the user.  
	   */
	const unsigned short PERMISSION_DENIED_ERROR = 20;

	 /**
	   * \brief The requested method is not supported by the current implementation. 
	   */
	const unsigned short KEY_NOT_FOUND_ERROR = 21;

	
	 /**
       * \brief An error code assigned by an implementation when an error has occurred 
	   *        in attestation API processing.
	   */	
	   
	unsigned short code;

	DOMString message;
	
	};
  
  
	
	
	
  /**
   * \brief The data returned by an attestation request
   * 
   *
   */

  interface attestationData  {

     /**
      * \brief List of binary data representing the identities of running \n
      * software.  In the TCG scheme, this corresponds to the integrity \n
      * measurement log.\n
	  *
	  * For example, in a TCG scheme you would expect the following contents: \n
	  * \n
	  * \t 0x00 -> [ 0x45ac76fec..., 0x956836fbc42..., ] \n
	  * \t 0x01 -> [ 0x23c3414f1..., 0xbb3f4d282cf..., ] \n
	  * \t 0x02 -> [ 0x72bb76045..., 0x04ccc997056..., ] \n
	  * \t ... \n
	  * \t 0x0c -> [ 0x8a797441a..., 0xd642ac16d13..., ] \n
	  *
	  *
	  *
      */

     readonly attribute byte[][] trustChain;

     /**
      * \brief single binary blob, containing validation data for the trustChain 
	  *
	  * In the TCG scheme this would contain the following signed data, including: \n
	  * \t - The TPM Quote version (1.1.0.0) \n
	  * \t - A fixed byte[4] "QUOT" \n
	  * \t - The SHA1 digest of the composite hash of the trustChain \n
	  * \t - The 20 byte nonce \n
      */

     readonly attribute byte[] validationData;

     /**
      * \brief text string identifying the attestation scheme being used
      * for example, "TPM_Quote"
      */

     readonly attribute DOMString schema;
   };
    
  /**
    * \brief interfaces for attesting the platform
    */

  [NoInterfaceObject]
  interface WebinosAttestationInterface {

    /**
     * \brief requests platform to provide attestation data
     *
     * inputs determine freshness and signing key to be used \n
     * return values are loose, to support arbitrary schemes of attestation \n
     *
     * \param nonce is a 20 byte value used to guarantee freshness of the result
     * \param key is the (identifier of the) key which should be used for attestation.  This will have been retrieved from getAttestationKey().
     * \return data structure returned is described above.
     * 
     * Note for implementation: there will need to be configuration of attestation modules to \n
     * support any authentication at the hardware layer.
     *
     * Error conditions due to policy enforcement, as well as potentially from hardware failure. 
     */

     attestationData attestPlatform (in byte[] nonce, in SubjectPublicKeyInfo key )
			raises(AttestationException);


    /**
     * \brief returns public key corresponding to device identity used to authenticate sessions
     *
     * in TCG terminology this would be the Attestation Identity Key (AIK)
     * 
     * \return returns public key
	 *
     * 
     * Errors due to permission being denied or if the platform has not implemented attestation
	 * due to hardware or software issues.
     */


     SubjectPublicKeyInfo getAttestationKey () raises(AttestationException);


    /**
     * \brief return certificate for nominated key
     *
     * \param key is the RSA public key (or identifier) for which a certificate is to be returned
     * \return returns certificate data structure corresponding to key
     * 
     * If the key identifier is unknown, or the user policy does not allow access to it, an error "not found" is returned.
	 *
	 *
     */
    
     X509 getKeyCredential (in SubjectPublicKeyInfo key) raises(AttestationException);


  };
  
  
	/**
	 * \brief The WebinosAttestation interface describes the part of the Attestation
	 *        API accessible through the webinos object.
	 */
	[NoInterfaceObject] interface WebinosAttestation {
		/**
		 * \brief webinos.attestation object.
		 */
		readonly attribute WebinosAttestationInterface attestation;
	};

	webinoscore::Webinos implements WebinosAttestation;
   
  

};

