/**
 * \brief Attestation: find the identity and integrity of running software
 *
 * The attestation API provides a secure means to query the underlying device to find out the identity and integrity of running software. This API should allow connection with a Trusted Platform Module, as defined by the Trusted Computing Group specifications. \n
 *
 * However, the TCG specs are aimed at a lower layer than webinos. The aim of the attestation API is simply to allow access to existing functionality. \n
 * \n 
 * Requirement/architectural reference: ID-DEV-POLITO-005, ID-DEV-POLITO-006, ID-DEV-POLITO-007, ID-DEV-POLITO-008 \n
 *
 *
 * Mediation by policy and security requirements:
 * All of these three methods should be grouped into the same policy set
 * Attestation is well known to have privacy and security issues and should therefore be restricted to trusted applications
 * The "getKeyCredential" call may have privacy implications. The platform should be capable of ignoring requests even if a key 
 * certificate could be returned, if the policy dictates this
 *
 *
 * \author Andrew Martin; andrew.martin@cs.ox.ac.uk; \n
 * John Lyle; john.lyle@cs.ox.ac.uk
 */
module attestation {

	
	/** X509 interface taken from the ASN1 X509 Specifications
	  * We expect for TCG attestation that the SKAE extension to also be introduced, definition: 
	  * http://www.trustedcomputinggroup.org/files/resource_files/876A7F79-1D09-3519-AD321B21144AE93C/IWG_SKAE_Extension_1-00.pdf
	  * however it is not defined here.
	  */
	interface X509Certificate {		
		attribute TBSCertificate certificate;
		attribute AlgorithmIdentifier signatureAlgorithm;
		attribute byte[] signature;
	};

	interface TBSCertificate { 
		attribute DOMString version;
		attribute unsigned long serialNumber;
		attribute AlgorithmIdentifier signature;
		attribute Name issuer;
		attribute Validity validity;
		attribute Name subject;
		attribute SubjectPublicKeyInfo subjectPublicKeyInfo;
		attribute any extensions;
	};
	
	interface Validity { 
	    /* These are properly formatted dates */
		attribute DOMString notBefore; 
		attribute DOMString notAfter;
	};
	
	interface Name {
		/* the name should consist of a number of key-value attribute type/value pairs. */
		attribute DOMString[][] attributes; 
	};
	
	interface AlgorithmIdentifier {
	    attribute DOMString identifier;
		/* These are optional parameters */
		attribute DOMString? parameters;
	};
	
	interface SubjectPublicKeyInfo {
		attribute AlgorithmIdentifier algorithm;
		attribute byte[] publickKey;
	};

	
	
	exception AttestationException  {
     /**
	   * \brief An unknown error occurred. 
	   */
	const unsigned short UNKNOWN_ERROR = 0;
	
     /**
	   * \brief An invalid parameter was provided when the requested method was invoked. 
	   */
	const unsigned short INVALID_ARGUMENT_ERROR = 1;

	/**
	  * \brief An error occurred in communication with the underlying implementation that meant the requested method could not complete. 
	  */
	const unsigned short IO_ERROR = 4;
	
	 /**
	   * \brief The requested method is not supported by the current implementation. 
	   */
	const unsigned short NOT_SUPPORTED_ERROR = 5;
	
	 /**
	   * \brief Access to the requested method was denied at the implementation or by the user.  
	   */
	const unsigned short PERMISSION_DENIED_ERROR = 20;

	 /**
	   * \brief The requested method is not supported by the current implementation. 
	   */
	const unsigned short KEY_NOT_FOUND_ERROR = 21;

	
	 /**
       * \brief An error code assigned by an implementation when an error has occurred 
	   *        in authentication API processing.
	   */	
	   
	unsigned short code;

	DOMString message;
	
	};
  
  
	
	
	
  /**
   * \brief The data returned by an attestation request
   * 
   *
   */

  interface attestationData  {

     /**
      * \brief List of binary data representing the identities of running 
      * software.  In the TCG scheme, this corresponds to the integrity 
      * measurement log
      */

     attribute byte[][] trustChain;

     /**
      * \brief single binary blob, containing validation data for the trustChain 
      */

     attribute byte[] validationData;

     /**
      * \brief text string identifying the attestation scheme being used
      * for example, "TPM_Quote"
      */

     attribute DOMString schema;
   };
    
  /**
    * \brief interfaces for attesting the platform
    */


  interface platformAttestation {

    /**
     * \brief requests platform to provide attestation data
     *
     * inputs determine freshness and signing key to be used \n
     * return values are loose, to support arbitrary schemes of attestation
     *
     * \param nonce is a 20 byte value used to guarantee freshness of the result
     * \param key is the (identifier of the) key which should be used for attestation.  This will have been retrieved from getAttestationKey().
     * \return data structure returned is described above.
     * 
     * Note for implementation: there will need to be configuration of attestation modules to
     * support any authentication at the hardware layer.
	 *
	 * Synchronous.
     *
     * Error conditions due to policy enforcement, as well as potentially from hardware failure.
     */

     attestationData attestPlatform (in byte[] nonce, in SubjectPublicKeyInfo key )
			raises(AttestationException);


    /**
     * \brief returns public key corresponding to device identity used to authenticate sessions
     *
     * in TCG terminology tis would be the Attestation Identity Key (AIK)
     * 
     * \return returns public key
	 *
	 * Synchronous
     * 
     * Errors due to permission denied or not implemented
     */


     SubjectPublicKeyInfo getAttestationKey () raises(AttestationException);


    /**
     * \brief return certificate for nominated key
     *
     * \param key is the RSA public key (or identifier) for which a certificate is to be returned
     * \return returns certificate data structure corresponding to key
     * 
     * If the key identifier is unknown, or the user policy does not allow access to it, an error "not found" is returned.
	 *
	 * Synchronous
	 *
     */
    
     X509Certificate getKeyCredential (in SubjectPublicKeyInfo key) raises(AttestationException);


  };

};

