/**
 * \brief The Event Handling API
 *
 * The Webinos Event Handling API provides means to exchange data in terms of
 * events among addressable entities (e.g., applications, services), either
 * locally or remotely.
 *
 * This is an advanced API that is mostly meant to be used by third-party
 * developers to implement custom event-based protocols by taking advantage of
 * the features offered by the Webinos event handling system, that in turn
 * leverages off of the features offered by Webinos overlay networking model.
 *
 * It is, therefore, strongly recommended to carefully read the Messaging
 * section in the Webinos system specifications before committing to the usage
 * of this API.
 *
 * Despite its apparent complexity, this API revolves around three simple basic
 * concepts: generating events, sending/forwarding events and
 * registering/unregistering event listeners for incoming events.
 *
 * The following example demonstrates what the core functionality of a
 * simplicistic textual chat application could look like if implemented using
 * this API.
 *
 * \code
// Array of objects implementing the WebinosEventEntity interface that
// represents the list of participants to the chat session, excluding the
// current application.
var participants = [...];

// DOM element that keeps a log of the whole session.
var logElem;

// DOM Text object that allows the user to insert text messages.
var inputElem;

// Function that somehow returns a human-readable name associated to the input
// entity.
function getName(entity) {
  ...
}

// Function that returns a copy of the input string with HTML control characters
// ('&lt;', '&gt;', '&amp;') escaped ('&amp;lt;', '&amp;gt;', '&amp;amp;').
function escapeHTML(str) {
  str = str.replace(/&amp;/g, '&amp;amp;');
  return str.replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');
}

// Listener callback for incoming events.
function onMsg(evt) {
  // Appends event data to logElem.
  // E.g.: [00:00:00] Stefano said: Hi all!
  logElem.innerHTML += "[" + new Date(evt.timeStamp).toLocaleTimeString() + "] "
                       + getName(evt.addressing.source) + " said: "
                       + escapeHTML(evt.payload) + "\\n";
}

// Delivery error notification callback.
function onMsgError(evt, recipient, error)
{
  // Pops up an alert dialog with error details.
  // E.g.: Stefano did not receive your message saying: "How are you?"
  //       Event refused (4)
  alert(getName(recipient) + ' did not receive your message saying: "'
        + evt.payload + '\\n' + error.message + '(' + error.code + ')');
}

// Listener to DOM "click" event for some "Send Message" button.
function onSendButtonClicked() {
  // Creates a new event of type "chatMessage" directed to all the chat
  // participants with payload containing the text in inputElem and with
  // timestamp.
  var evt = webinos.events.createEvent("chatMessage", {to: participants},
                                       inputElem.value, null, true, null, true);

  // Sends the event and specifies the onMsgError callback for handling error
  // delivery notifications.
  evt.dispatchEvent({onError: onMsgError});

  // Appends the input message to logElem.
  // E.g.: [00:01:00] you said: "Let's try again... how are you?"
  logElem.innerHTML += "[" + new Date(evt.timeStamp).toLocaleTimeString()
                       + "] you said: " + escapeHTML(evt.payload) + "\\n";
}

// Initialization stuff.
document.onLoad = function() {
  // Gets "log" element.
  logElem = document.getElementById("log");

  // Gets "input" element.
  inputElem = document.getElementById("input");

  // Adds the onMsg() callback as an event listener for incoming events with
  // type "chatMessage", from any source and to any destination (within the
  // application).
  webinos.events.addEventListener(onMsg, "chatMessage");
}
 * \endcode
 *
 * \def-api-feature http://webinos.org/api/events
 * \author Stefano D'Angelo &lt;dangelo@ismb.it&gt;
 * \version 0.9.8
 */

module events {
	/**
	 * \brief The WebinosEventEntity interface describes an addressable
	 *        entity of any kind.
	 */
	[NoInterfaceObject] interface WebinosEventEntity {
		/**
		 * \brief Globally unique identifier.
		 */
		attribute DOMString id;
	};

	/**
	 * \brief The WebinosEventAddressing interface contains references to
	 *        the sender and recipients of an event.
	 *
	 * This interfaces comes in two flavors: a strict normalized form for
	 * events generated and/or processed by the Webinos runtime, and a more
	 * lax non-normalized form to ease API usage.
	 *
	 * Details on both forms are given in each attribute's description.
	 */
	[NoInterfaceObject] interface WebinosEventAddressing {
		/**
		 * \brief Event source.
		 *
		 * In the normalized form it SHALL always be set.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate the current application.
		 */
		attribute WebinosEventEntity source;
		/**
		 * \brief Array of primary recipients.
		 *
		 * It MUST always contain at least one element.
		 *
		 * In the normalized form it SHALL be sorted in ascending order
		 * by Unicode code points and SHALL NOT contain duplicate
		 * entries.
		 */
		attribute WebinosEventEntity[] to;
		/**
		 * \brief Array of secondary recipients.
		 *
		 * It MAY be empty.
		 *
		 * In the normalized form it SHALL be sorted in ascending order
		 * by Unicode code points, SHALL NOT contain duplicate entries
		 * and SHALL NOT contain entries that are also found in the "to"
		 * array.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate no secondary recipients.
		 */
		attribute WebinosEventEntity[] cc;
		/**
		 * \brief Array of blind-carbon-copy recipients.
		 *
		 * It MAY be empty.
		 *
		 * In the normalized form it SHALL be sorted in ascending order
		 * by Unicode code points, SHALL NOT contain duplicate entries
		 * and SHALL NOT contain entries that are also found in the "to"
		 * or "cc" arrays.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate no blind-carbon-copy recipients.
		 */
		attribute WebinosEventEntity[] bcc;
	};

	/**
	 * \brief The WebinosEvent interface describes an incoming or outgoing
	 *        event.
	 */
	[NoInterfaceObject]
	interface WebinosEvent {
		/**
		 * \brief Event type identifier.
		 *
		 * It MUST match the following regular expression:
		 * [_a-zA-Z][_a-zA-Z0-9]*
		 *
		 * Identifiers "deliveryNotification", "JSONRPC20Request" and
		 * "JSONRPC20Response" are reserved, hence not allowed.
		 */
		readonly attribute DOMString type;
		/**
		 * \brief References to the original sender and recipients in
		 *        normalized form.
		 */
		readonly attribute WebinosEventAddressing addressing;
		/**
		 * \brief Event identifier.
		 *
		 * It is calculated by hashing a partial serialization of the
		 * WebinosEvent object that involves: \n
		 *  - the event type; \n
		 *  - the original event source and primary recipients, in case
		 *    the "addressingSensitive" attribute is true; \n
		 *  - the identifier of the event that this event is a response
		 *    to, if any; \n
		 *  - the event timestamp, if present; \n
		 *  - the event expiry timestamp, if present; \n
		 *  - the payload, if present.
		 *
		 * Even though not strictly required, conforming implementations
		 * are recommended to implement some strategy to try to limit
		 * the likelihood that an application instance is delivered more
		 * than one event with a given id. Users of this API MUST assume
		 * that no more than one event with a given id is ever delivered
		 * to a given recipient.
		 *
		 * For more details, please refer to the Webinos system
		 * specifications.
		 */
		readonly attribute DOMString id;
		/**
		 * \brief Event that this event is a response to.
		 *
		 * If null, this event was not sent in response to another
		 * event.
		 */
		readonly attribute WebinosEvent inResponseTo;
		/**
		 * \brief Moment in time in which the event is generated by the
		 *        original event source.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMTimeStamp? timeStamp;
		/**
		 * \brief Moment in time past which the event is no more valid
		 *        or meaningful.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMTimeStamp? expiryTimeStamp;
		/**
		 * \brief Indicates whether the original addressing information
		 *        is part of the informative content of the event.
		 *
		 * In practice, when this is set to true, the identifiers of the
		 * orignal event source and primary recipients are used to
		 * compute the event id.
		 */
		readonly attribute boolean addressingSensitive;
		/**
		 * \brief References to the entity that forwarded the event and
		 *        the recipients of such forwarding.
		 *
		 * It is null if the event was not subject to any forwarding,
		 * hence it comes straight from the original sending entity.
		 */
		readonly attribute WebinosEventAddressing forwarding;
		/**
		 * \brief Moment in time in which the event was forwarded by the
		 *        forwarding source.
		 *
		 * It SHALL be null if "forwarding" is null and MAY be null also
		 * if "forwarding" is not null.
		 */
		readonly attribute DOMTimeStamp? forwardingTimeStamp;
		/**
		 * \brief Event type-specific data.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMString? payload;

		/**
		 * \brief Sends an event.
		 *
		 * W.r.t. the "Delivery notification wanted" attribute described
		 * in the Webinos system specification, its value in the
		 * implementation is to be deferred from the callbacks parameter
		 * and allowed to change between dispatchEvent() and
		 * forwardEvent() calls. It SHALL be true when delivery and/or
		 * error callbacks are passed via the callbacks argument, false
		 * otherwise.
		 *
	 	 * \b NOTE: Please, keep in mind that all recipients SHALL get
		 * references to all entities specified in the "to" and "cc"
		 * attributes.
		 *
		 * \param callbacks Set of callbacks to monitor sending status
		 *	  (null and undefined are considered as equivalent to a
		 *	  WebinosEventCallbacks object with all attributes set
		 *        to null).
		 * \param referenceTimeout Moment in time until which the
		 *	  Webinos runtime SHALL ensure that the WebinosEvent
		 *        object being sent is not garbage collected for the
		 *        purpose of receiving events in response to the event
		 *        being sent (null, undefined and values up to the
		 *        current date/time mean that no special action is taken
		 *        by the runtime in this regard).
		 * \param sync If false or undefined, the function is
		 *	  non-blocking, otherwise if true it will block until
		 *	  one of the following conditions becomes true: \n
		 *	   - if referenceTimeout represents a moment of time in
		 *	     the future at call time, that moment is reached; \n
		 *	   - otherwise, if the "expiryTimeStamp" attribute is
		 *	     specified as a moment of time in the future at call
		 *	     time, that moment is reached; \n
		 *	   - in any case, the end result of the operation is
		 *	     completely determined for all recipients and all
		 *	     callbacks that were to be called have run.
		 *
		 * \throw WebinosEventException INVALID_ARGUMENT_ERROR if any of
		 *        the supplied arguments is not valid.
		 */
		void dispatchEvent(in optional WebinosEventCallbacks? callbacks,
				   in optional DOMTimeStamp? referenceTimeout,
				   in optional boolean sync)
		     raises(WebinosEventException);
		/**
		 * \brief Forwards an event.
		 *
		 * W.r.t. the "Delivery notification wanted" attribute described
		 * in the Webinos system specification, its value in the
		 * implementation is to be deferred from the callbacks parameter
		 * and allowed to change between dispatchEvent() and
		 * forwardEvent() calls. It SHALL be true when delivery and/or
		 * error callbacks are passed via the callbacks argument, false
		 * otherwise.
		 *
		 * Conforming implementations SHALL NOT modify the "Forwarding"
		 * attribute of the local WebinosEvent object when this function
		 * is called.
		 *
	 	 * \b NOTE: Please, keep in mind that all recipients referenced
		 * by the forwarding argument SHALL get references to all
		 * entities specified in the "to", "cc" and "bcc" arrays of the
		 * "addressing" attribute, as well as references to all entities
		 * specified in the "to" and "cc" arrays of the forwarding
		 * argument.
		 *
		 * \param forwarding References to the entity on the behalf of
		 *        which the application wants to forward the event and
		 *        to the recipients of such forwarding. This argument
		 *        SHALL be processed in the same way as the
		 *        webinos.events.createEvent() function processes its
		 *        "addressing" argument (i.e., make a normalized copy).
		 * \param withTimeStamp Whether to set the forwarding timestamp
		 *        (undefined is considered as equivalent to false).
		 * \param callbacks Set of callbacks to monitor forwarding
		 *        status (null and undefined are considered as
		 *        equivalent to an WebinosEventCallbacks object with all
		 *        attributes set to null).
		 * \param referenceTimeout Moment in time until which the
		 *	  Webinos runtime SHALL ensure that the WebinosEvent
		 *        object being forwarded is not garbage collected for
		 *        the purpose of receiving events in response to the
		 *        event being forwarded (null, undefined and values up
		 *        to the current date/time mean that no special action
		 *        is taken by the runtime in this regard).
		 * \param sync If false or undefined, the function is
		 *	  non-blocking, otherwise if true it will block until
		 *	  one of the following conditions becomes true: \n
		 *	   - if referenceTimeout represents a moment of time in
		 *	     the future at call time, that moment is reached; \n
		 *	   - otherwise, if the "expiryTimeStamp" attribute is
		 *	     specified as a moment of time in the future at call
		 *	     time, that moment is reached; \n
		 *	   - in any case, the end result of the operation is
		 *	     completely determined for all recipients and all
		 *	     callbacks that were to be called have run.
		 *
		 * \throw WebinosEventException INVALID_ARGUMENT_ERROR if any of
		 *        the supplied arguments is not valid.
		 */
		void forwardEvent(in WebinosEventAddressing forwarding,
				  in optional boolean withTimeStamp,
				  in optional WebinosEventCallbacks? callbacks,
				  in optional DOMTimeStamp? referenceTimeout,
				  in optional boolean sync)
		     raises(WebinosEventException);
	};

	/**
	 * \brief Error codes for the events module.
	 */
	exception WebinosEventException {
		/**
		 * \brief An invalid parameter was provided when the requested
		 *        method was invoked.
		 */
		const unsigned short INVALID_ARGUMENT_ERROR	= 1;
	};

	/**
	 * \brief The WebinosEventDeliveryError interface describes event
	 *        delivery errors reported using the delivery notification
	 *        protocol.
	 */
	[NoInterfaceObject] interface WebinosEventDeliveryError {
		/**
		 * \brief Error code.
		 */
		readonly attribute unsigned short code;
		/**
		 * \brief Error description.
		 */
		readonly attribute DOMString message;

		/**
		 * \brief Unknown error.
		 */
		const unsigned short UNKNOWN_ERR		= 0;
		/**
		 * \brief The recipient got an invalid event (e.g., transmission
		 *        error).
		 */
		const unsigned short INVALID			= 1;
		/**
		 * \brief The intended recipient is unknown or unreachable.
		 */
		const unsigned short BAD_DESTINATION		= 2;
		/**
		 * \brief The event expired before the actual delivery,
		 *        according to its "expiryTimestamp" attribute.
		 */
		const unsigned short EXPIRED			= 3;
		/**
		 * \brief The event could not be received because of lack of
		 *        authorization and/or policy settings.
		 */
		const unsigned short REFUSED			= 4;
		/**
		 * \brief The recipient does not hold a local reference to the
		 *        event specified by the "inResponseTo" attribute.
		 */
		const unsigned short NO_REFERENCE		= 5;
	};

	/**
	 * \brief The WebinosEventCallbacks interface allows to pass a set of
	 *        status monitoring callbacks to event sending/forwarding
	 *        methods.
	 *
	 * TODO: does this definition allow to use null/undefined? Otherwise
	 *       should define callback types and use nullable attributes.
	 */
	[Callback, NoInterfaceObject] interface WebinosEventCallbacks {
		/**
		 * \brief Called right after the event has been physically
		 *        transmitted to a given recipient.
		 *
		 * This callback SHALL NOT be called more than once per
		 * recipient for each send/forward.
		 *
		 * \param event The event being transmitted.
		 * \param recipient The recipient to which the event is being
		 *        transmitted.
		 */
		void onSending(in WebinosEvent event,
			       in WebinosEventEntity recipient);
		/**
		 * \brief Called right after the event has been put into the
		 *        local event cache for later transmission (e.g., when
		 *        trying to send it to a remote entity but no
		 *        connectivity is currently available).
		 *
		 * \param event The event being cached.
		 */
		void onCaching(in WebinosEvent event);
		/**
		 * \brief Called as soon as successful event delivery has been
		 *        reported by a given recipient or if the recipient
		 *        notifies that it did already receive an event with the
		 *        same ID.
		 *
		 * This callback SHALL NOT be called more than once per
		 * recipient for each send/forward.
		 *
		 * Conforming implementations SHALL set the "Delivery
		 * notification wanted" attribute described in the Webinos
		 * system specifications as true whenever this callback is
		 * specified.
		 *
		 * \param event The event that was successfully delivered.
		 * \param recipient The recipient that notified delivery
		 *                  success.
		 */
		void onDelivery(in WebinosEvent event,
				in WebinosEventEntity recipient);
		/**
		 * \brief Called right after the moment in time specified by the
		 *        "referenceTimeout" attribute is reached and the given
		 *        primary recipient did not successfully sent back at
		 *        least one event in response to the given event.
		 *
		 * This callback SHALL only be called if the "referenceTimeout"
		 * attribute indicates a moment in time in the future at
		 * sending/forwarding time and SHALL NOT be called more than
		 * once per recipient for each send/forward.
		 *
		 * \param event The event.
		 * \param recipient The recipient that did not successfully sent
		 *        back at least one event in response to the given
		 *        event.
		 */
		void onTimeout(in WebinosEvent event,
			       in WebinosEventEntity recipient);
		/**
		 * \brief Called as soon as unsuccessful event delivery has been
		 *        reported by a given recipient.
		 *
		 * This callback SHALL NOT be called more than once per
		 * recipient for each send/forward.
		 *
		 * Conforming implementations SHALL set the "Delivery
		 * notification wanted" attribute described in the Webinos
		 * system specifications as true whenever this callback is
		 * specified.
		 *
		 * \param event The event that was not successfully delivered.
		 * \param recipient The recipient that notified delivery error.
		 * \param error The reported error.
		 */
		void onError(in WebinosEvent event,
			     in WebinosEventEntity recipient,
			     in WebinosEventDeliveryError error);
	};

	/**
	 * \brief The WebinosEventListener interface describes an event listener
	 *        callback.
	 */
	[Callback=FunctionOnly] interface WebinosEventListener {
		/**
		 * \brief Called when a new event is received.
		 *
		 * \param event The event.
		 */
		void handleEvent(in WebinosEvent event);
	};

	/**
	 * \brief The WebinosEventsInterface interface describes the part of the
	 *        Event Handling API accessible through the webinos.events
	 *        object.
	 */
	[NoInterfaceObject] interface WebinosEventsInterface {
		/**
		 * \brief Creates a new event.
		 *
		 * The function SHALL accept the "addressing" argument both in
		 * normalized and non-normalized form and, in either case, the
		 * resulting "addressing" attribute in the newly created
		 * WebinosEvent object SHALL reference a newly created and
		 * normalized equivalent of such argument where: \n
		 *  - entries that are found both in "to" and "cc" in the
		 *    original argument are removed from the "cc" array of the
		 *    resulting WebinosEventAddressing object; \n
		 *  - entries that are found both in "to" and "bcc" in the
		 *    original argument are removed from the "bcc" array of the
		 *    resulting WebinosEventAddressing object; \n
		 *  - entries that are found both in "cc" and "bcc" in the
		 *    original argument are removed from the "bcc" array of the
		 *    resulting WebinosEventAddressing object.
		 *	
		 * Furthermore, the function SHALL also make sure that it is
		 * valid for the application to create the event on the behalf
		 * of the specified source, otherwise an WebinosEventException
		 * exception with error code INVALID_ARGUMENT_ERROR SHALL be
		 * thrown.
		 *
		 * \param type Event type identifier.
		 * \param addressing References to the sending entity on the
		 *        behalf of which the application wants to create the
		 *        event and to the event recipients.
		 * \param payload Event type-specific data or null (undefined
		 *        is considered as equivalent to null).
		 * \param inResponseTo Event that this event is a response to
		 *        (undefined is considered as equivalent to null).
		 * \param withTimeStamp Whether to set the generation timestamp
		 *        (undefined is considered as equivalent to false).
		 * \param expiryTimeStamp Moment in time past which the event is
		 *        no more valid or meaningful (undefined is considered
		 *        as equivalent to null).
		 * \param addressingSensitive Whether the addressing information
		 *        is part of the informative content of the event
		 *        (undefined is considered as equivalent to false).
		 *
		 * \return Newly created WebinosEvent object or null if an error
		 *         occurred.
		 *
		 * \throw WebinosEventException INVALID_ARGUMENT_ERROR if any of
		 *        the supplied arguments is not valid.
		 */
		WebinosEvent createEvent(in DOMString type,
					 in WebinosEventAddressing addressing,
					 [TreatUndefinedAs=Null]
					   in optional DOMString? payload,
					 in optional WebinosEvent? inResponseTo,
				  	 in optional boolean withTimeStamp,
				  	 in optional DOMTimeStamp? expiryTimeStamp,
				  	 in optional boolean addressingSensitive)
		      raises(WebinosEventException);
		/**
		 * \brief Registers an event listener.
		 *
		 * The arguments to this function act as filters, in the sense
		 * that when a new event is received, the listener is called if
		 * the event's attributes match with all arguments passed to
		 * this function.
		 *
		 * When a new event is received, all listeners that were
		 * registered via this function with matching arguments SHALL be
		 * called, yet the order of such calls is unspecified.
		 *
		 * Registering a listener SHALL NOT have consequences on other
		 * listeners, hence it SHALL be possible to register multiple
		 * listeners to the same event type/source/destination
		 * combinations.
		 *
		 * \param listener The event listener.
		 * \param type Specific event type or null for any type
		 *        (undefined is considered as null).
		 * \param source Specific event source or null for any source
		 *        (undefined is considered as null).
		 * \param destination Specific event recipient (whether primary
		 *        or not) or null for any destination (undefined is
		 *        considered as null).
		 *
		 * \throw WebinosEventException INVALID_ARGUMENT_ERROR if any of
		 *        the supplied arguments is not valid.
		 *
		 * \return Listener identifier.
		 */
		DOMString addEventListener(in WebinosEventListener listener,
					   [TreatUndefinedAs=Null]
					     in optional DOMString? type,
					   in optional WebinosEventEntity? source,
					   in optional WebinosEventEntity? destination)
		          raises(WebinosEventException);
		/**
		 * \brief Unregisters an event listener.
		 *
		 * Unregistering a listener SHALL NOT have consequences on other
		 * listeners.
		 *
		 * \param listenerId Listener identifier as returned by
		 *        addEventListener().
		 *
		 * \throw WebinosEventException INVALID_ARGUMENT_ERROR if any of
		 *        the supplied arguments is not valid.
		 */
		void removeEventListener(in DOMString listenerId)
		     raises(WebinosEventException);
	};

	/**
	 * \brief The WebinosEvents interface describes the part of the Event
	 *        Handling API accessible through the webinos object.
	 */
	[NoInterfaceObject] interface WebinosEvents {
		/**
		 * \brief webinos.events object.
		 */
		readonly attribute WebinosEventsInterface events;
	};

	webinoscore::Webinos implements WebinosEvents;
};
