/**
 * \brief The Event Handling API
 *
 * The Webinos Event Handling API provides means to exchange data in terms of
 * events among addressable entities (e.g., applications, services), either
 * locally or remotely, taking advantage of the features offered by the Webinos
 * overlay networking model.
 *
 * TODO: add informal description + examples here.
 *
 * \def-api-feature http://webinos.org/api/events
 * \author Stefano D'Angelo &lt;dangelo@ismb.it&gt;
 * \version 0.2
 */

module events {
	/**
	 * \brief The EventEntity interface describes an addressable entity of
	 *        any kind.
	 */
	[NoInterfaceObject] interface EventEntity {
		/**
		 * \brief Globally unique identifier.
		 */
		attribute DOMString id;
	};

	/**
	 * \brief The EventAddressing interface contains references to the
	 *        sender and recipients of an event.
	 *
	 * This interfaces comes in two flavors: a strict normalized form for
	 * events generated and/or processed by the Webinos runtime, and a more
	 * lax non-normalized form to ease API usage.
	 *
	 * Details on both forms are given in each attribute's description.
	 *
	 * NOTE: When sending an event, please keep in mind that all recipients
	 * SHALL get references to all entities specified in the "to" and "cc"
	 * attributes.
	 */
	[NoInterfaceObject] interface EventAddressing {
		/**
		 * \brief Event source.
		 *
		 * In the normalized form it SHALL always be set.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate the current application.
		 */
		attribute EventEntity source;
		/**
		 * \brief Array of primary recipients.
		 *
		 * It MUST always contain at least one element.
		 *
		 * In the normalized form it SHALL be sorted by Unicode code
		 * points and SHALL NOT contain duplicate entries.
		 */
		attribute EventEntity[] to;
		/**
		 * \brief Array of secondary recipients.
		 *
		 * It MAY be empty.
		 *
		 * In the normalized form it SHALL be sorted by Unicode code
		 * points, SHALL NOT contain duplicate entries and SHALL NOT
		 * contain entries that are also found in the "to" array.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate no secondary recipients.
		 */
		attribute EventEntity[] cc;
		/**
		 * \brief Array of blind-carbon-copy recipients.
		 *
		 * It MAY be empty.
		 *
		 * In the normalized form it SHALL be sorted by Unicode code
		 * points, SHALL NOT contain duplicate entries and SHALL NOT
		 * contain entries that are also found in the "to" or "cc"
		 * arrays.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate no blind-carbon-copy recipients.
		 */
		attribute EventEntity[] bcc;
	};

	/**
	 * \brief The Event interface describes an incoming or outgoing event.
	 */
	interface Event {
		/**
		 * \brief Event type identifier.
		 *
		 * String other than "any" that matches the following regular
		 * expression: [_a-zA-Z][_a-zA-Z0-9]*
		 */
		readonly attribute DOMString type;
		/**
		 * \brief References to the original sender and recipients.
		 */
		readonly attribute EventAddressing addressing;
		/**
		 * \brief Event identifier.
		 *
		 * String holding the lowercase hexadecimal digest obtained as
		 * the result of a SHA-256 hash operation performed on a
		 * specific serialization of the event.
		 *
		 * Such identifier is meant to univocally represent an event
		 * and is used by the Webinos runtime to prevent entities from
		 * receiving the same event more than once, yet no guarantees
		 * are made.
		 *
		 * For more details, please refer to the Webinos system
		 * specifications.
		 */
		readonly attribute DOMString id;
		/**
		 * \brief Event that this event is a response to.
		 *
		 * It is null if this event was not sent in response to another
		 * event.
		 */
		readonly attribute Event inResponseTo;
		/**
		 * \brief Moment in time in which the event is generated by the
		 *        original event source.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMTimeStamp? timeStamp;
		/**
		 * \brief Moment in time past which the event is no more valid
		 *        or meaningful 
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMTimeStamp? expiryTimeStamp;
		/**
		 * \brief Indicates whether the addressing information is part
		 *        of the informative content of the event.
		 *
		 * In practice, when this is set to true, the identifiers of the
		 * orignal event source and the primary recipients are used to
		 * compute the event id.
		 */
		readonly attribute boolean addressingSensitive;
		/**
		 * \brief References to the entity that forwarded the event and
		 *        the recipients of such forwarding.
		 *
		 * It is null if the event was not subject to any forwarding,
		 * hence it comes straight from the original sending entity.
		 */
		readonly attribute EventAddressing forwarding;
		/**
		 * \brief Moment in time in which the event was forwarded by the
		 *        forwarding source.
		 *
		 * It MUST be null if forwarding is null and MAY be null also if
		 * forwarding is not null.
		 */
		readonly attribute DOMTimeStamp? forwardingTimeStamp;
		/**
		 * \brief Event type-specific data.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMString? payload;

		/**
		 * \brief ...
		 */
		void initEvent(in DOMString type,
			       in EventAddressing addressing,
			       in optional DOMString payload,
			       in optional Event inResponseTo,
			       in optional DOMTimeStamp timeStamp,
			       in optional DOMTimeStamp expiryTimeStamp,
			       in optional boolean addressingSensitive);
		/**
		 * \brief ...
		 */
		void dispatchEvent(in optional EventCallbacks callbacks,
				   in optional DOMTimeStamp referenceTimeout,
				   in optional boolean sync);
		/**
		 * \brief ...
		 */
		void forwardEvent(in EventAddressing forwarding,
				  in optional DOMTimeStamp forwardingTimeStamp,
				  in optional EventCallbacks callbacks,
				  in optional DOMTimeStamp referenceTimeout,
				  in optional boolean sync);
	};

	/**
	 * \brief ...
	 */
	[NoInterfaceObject] interface EventDeliveryError {
		const unsigned short INVALID_DATA = 1;
		const unsigned short DESTINATION_UNREACHABLE = 2;
		const unsigned short EXPIRED = 3;
		const unsigned short DUPLICATE = 4;
		const unsigned short REFUSED = 5;
		const unsigned short NO_REFERENCE = 6;

		readonly attribute unsigned short code;
		readonly attribute DOMString message;
	};

	/**
	 * \brief ...
	 */
	[Callback] interface EventCallback {
		/**
		 * \brief ...
		 */
		void handleEvent(in Event event);
	};

	/**
	 * \brief ...
	 */
	[Callback] interface EventErrorCallback {
		/**
		 * \brief ...
		 */
		void handleEvent(in Event event, in EventDeliveryError error);
	};

	/**
	 * \brief ...
	 */
	[NoInterfaceObject] interface EventCallbacks {
		/**
		 * \brief ...
		 */
		attribute EventCallback sentCB;
		/**
		 * \brief ...
		 */
		attribute EventCallback cachedCB;
		/**
		 * \brief ...
		 */
		attribute EventCallback deliveredCB;
		/**
		 * \brief ...
		 */
		attribute EventErrorCallback errorCB;
	};

	/**
	 * \brief ...
	 */
	[NoInterfaceObject] interface WebinosEventListeners {
		/**
		 * \brief ...
		 */
		DOMString addEventListener(in EventCallback listener,
					   in optional DOMString type,
					   in optional EventEntity source,
					   in optional EventEntity destination);
		/**
		 * \brief ...
		 */
		void removeEventListener(in DOMString listenerId);
	};
	Webinos implements WebinosEventListeners;
};
