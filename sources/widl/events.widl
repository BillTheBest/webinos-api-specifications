/**
 * \brief The Event Handling API
 *
 * The Webinos Event Handling API provides means to exchange data in terms of
 * events among addressable entities (e.g., applications, services), either
 * locally or remotely, taking advantage of the features offered by the Webinos
 * overlay networking model.
 *
 * TODO: add informal description + examples here.
 *
 * TODO: exceptions
 *
 * \def-api-feature http://webinos.org/api/events
 * \author Stefano D'Angelo &lt;dangelo@ismb.it&gt;
 * \version 0.2
 */

module events {
	/**
	 * \brief The EventEntity interface describes an addressable entity of
	 *        any kind.
	 */
	[NoInterfaceObject] interface EventEntity {
		/**
		 * \brief Globally unique identifier.
		 */
		attribute DOMString id;
	};

	/**
	 * \brief The EventAddressing interface contains references to the
	 *        sender and recipients of an event.
	 *
	 * This interfaces comes in two flavors: a strict normalized form for
	 * events generated and/or processed by the Webinos runtime, and a more
	 * lax non-normalized form to ease API usage.
	 *
	 * Details on both forms are given in each attribute's description.
	 */
	[NoInterfaceObject] interface EventAddressing {
		/**
		 * \brief Event source.
		 *
		 * In the normalized form it SHALL always be set.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate the current application.
		 */
		attribute EventEntity source;
		/**
		 * \brief Array of primary recipients.
		 *
		 * It MUST always contain at least one element.
		 *
		 * In the normalized form it SHALL be sorted in ascending order
		 * by Unicode code points and SHALL NOT contain duplicate
		 * entries.
		 */
		attribute EventEntity[] to;
		/**
		 * \brief Array of secondary recipients.
		 *
		 * It MAY be empty.
		 *
		 * In the normalized form it SHALL be sorted in ascending order
		 * by Unicode code points, SHALL NOT contain duplicate entries
		 * and SHALL NOT contain entries that are also found in the "to"
		 * array.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate no secondary recipients.
		 */
		attribute EventEntity[] cc;
		/**
		 * \brief Array of blind-carbon-copy recipients.
		 *
		 * It MAY be empty.
		 *
		 * In the normalized form it SHALL be sorted in ascending order
		 * by Unicode code points, SHALL NOT contain duplicate entries
		 * and SHALL NOT contain entries that are also found in the "to"
		 * or "cc" arrays.
		 *
		 * The non-normalized form allows to use null or undefined to
		 * indicate no blind-carbon-copy recipients.
		 */
		attribute EventEntity[] bcc;
	};

	[NoInterfaceObject,
	 Constructor(in DOMString type,
		     in EventAddressing addressing,
		     in optional DOMString payload,
		     in optional Event inResponseTo,
		     in optional DOMTimeStamp timeStamp,
		     in optional DOMTimeStamp expiryTimeStamp,
		     in optional boolean addressingSensitive)]
	/**
	 * \brief The Event interface describes an incoming or outgoing event.
	 *
	 * The arguments to be passed to the constructor have the same meaning
	 * as the attributes of the interface with the same name.
	 *
	 * Furthermore, the constructor SHALL accept the "addressing" argument
	 * both in normalized and non-normalized form and, in either case, the
	 * resulting "addressing" attribute in the newly created Event object
	 * SHALL reference a newly created and normalized equivalent of such
	 * argument where: \n
	 *  - entries that are found both in "to" and "cc" in the original
	 *    argument are removed from the "cc" array of the resulting
	 *    EventAddressing object; \n
	 *  - entries that are found both in "to" and "bcc" in the original
	 *    argument are removed from the "bcc" array of the resulting
	 *    EventAddressing object; \n
	 *  - entries that are found both in "cc" and "bcc" in the original
	 *    argument are removed from the "bcc" array of the resulting
	 *    EventAddressing object.
	 *
	 * The constructor SHALL only make sure that it is valid for the
	 * application to create the event on the behalf of the specified
	 * source.
	 *
	 * The default values for unspecified optional arguments are the
	 * following: \n
	 *  - \b payload: null \n
	 *  - \b inResponseTo: null \n
	 *  - \b timeStamp: null \n
	 *  - \b expiryTimeStamp: null \n
	 *  - \b addressingSensitive: false
	 *
	 * TODO: constructor fail because of invalid arguments?
	 */
	interface Event {
		/**
		 * \brief Event type identifier.
		 *
		 * String other than "any" that matches the following regular
		 * expression: [_a-zA-Z][_a-zA-Z0-9]*
		 */
		readonly attribute DOMString type;
		/**
		 * \brief References to the original sender and recipients.
		 *
		 * The Webinos runtime SHALL ensure that this is an
		 * EventAddressing object in normalized form when the Event
		 * object is constructed.
		 */
		readonly attribute EventAddressing addressing;
		/**
		 * \brief Event identifier.
		 *
		 * String holding the lowercase hexadecimal digest obtained as
		 * the result of a SHA-256 hash operation performed on a
		 * specific serialization of the event.
		 *
		 * Such identifier is meant to univocally represent an event
		 * and is used by the Webinos runtime to prevent entities from
		 * receiving the same event more than once, yet no guarantees
		 * are made.
		 *
		 * For more details, please refer to the Webinos system
		 * specifications.
		 */
		readonly attribute DOMString id;
		/**
		 * \brief Event that this event is a response to.
		 *
		 * It is null if this event was not sent in response to another
		 * event.
		 */
		readonly attribute Event inResponseTo;
		/**
		 * \brief Moment in time in which the event is generated by the
		 *        original event source.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMTimeStamp? timeStamp;
		/**
		 * \brief Moment in time past which the event is no more valid
		 *        or meaningful 
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMTimeStamp? expiryTimeStamp;
		/**
		 * \brief Indicates whether the addressing information is part
		 *        of the informative content of the event.
		 *
		 * In practice, when this is set to true, the identifiers of the
		 * orignal event source and the primary recipients are used to
		 * compute the event id.
		 */
		readonly attribute boolean addressingSensitive;
		/**
		 * \brief References to the entity that forwarded the event and
		 *        the recipients of such forwarding.
		 *
		 * It is null if the event was not subject to any forwarding,
		 * hence it comes straight from the original sending entity.
		 */
		readonly attribute EventAddressing forwarding;
		/**
		 * \brief Moment in time in which the event was forwarded by the
		 *        forwarding source.
		 *
		 * It MUST be null if forwarding is null and MAY be null also if
		 * forwarding is not null.
		 */
		readonly attribute DOMTimeStamp? forwardingTimeStamp;
		/**
		 * \brief Event type-specific data.
		 *
		 * It MAY be null.
		 */
		readonly attribute DOMString? payload;

		/**
		 * \brief Sends an event.
		 *
		 * W.r.t. the "Delivery notification wanted" attribute described
		 * in the Webinos system specification, its value in the
		 * implementation is to be deferred from the callbacks parameter
		 * and allowed to change between dispatchEvent() and
		 * forwardEvent() calls. It SHALL be true when delivery, timeout
		 * and/or error callbacks are been passed via the callbacks
		 * argument, false otherwise.
		 *
	 	 * \b NOTE: Please, keep in mind that all recipients SHALL get
		 * references to all entities specified in the "to" and "cc"
		 * attributes.
		 *
		 * \param callbacks Set of callbacks to monitor sending status
		 *	  (null and unspecified are considered as equivalent to
		 *	  an EventCallbacks object with all attributes set to
		 *	  null).
		 * \param referenceTimeout Moment in time until which the
		 *	  Webinos runtime SHALL ensure that the Event object
		 *	  being sent is not garbage collected (null, unspecified
		 *	  and values up to the current date/time mean that no
		 *	  special action is taken by the runtime in this regard)
		 * \param sync If false, null or unspecified, the function is
		 *	  non-blocking, otherwise if true it will block until
		 *	  one of the following conditions becomes true: \n
		 *	   - if referenceTimeout represents a moment of time in
		 *	     the future at call time, that moment is reached; \n
		 *	   - otherwise, if the "expiryTimeStamp" attribute is
		 *	     specified as a moment of time in the future at call
		 *	     time, that moment is reached; \n
		 *	   - in any case, the end result of the operation is
		 *	     completely determined for all recipients and all
		 *	     callbacks that were to be called have run.
		 */
		void dispatchEvent(in optional EventCallbacks? callbacks,
				   in optional DOMTimeStamp? referenceTimeout,
				   in optional boolean? sync);
		/**
		 * \brief Forwards an event.
		 *
		 * W.r.t. the "Delivery notification wanted" attribute described
		 * in the Webinos system specification, its value in the
		 * implementation is to be deferred from the callbacks parameter
		 * and allowed to change between dispatchEvent() and
		 * forwardEvent() calls. It SHALL be true when delivery, timeout
		 * and/or error callbacks are been passed via the callbacks
		 * argument, false otherwise.
		 *
	 	 * \b NOTE: Please, keep in mind that all recipients referenced
		 * by the forwarding argument SHALL get references to all
		 * entities specified in the "to", "cc" and "bcc" arrays of the
		 * "addressing" attribute, as well as references to all entities
		 * specified in the "to" and "cc" arrays of the forwarding
		 * argument.
		 *
		 * \param forwarding References to the entity on the behalf of
		 *        which the application wants to forward the event and
		 *        to the recipients of such forwarding. This argument
		 *        SHALL be processed in the same way as the constructor
		 *        processes its "addressing" argument (i.e., make a
		 *        normalized copy).
		 * \param withTimeStamp Whether to set the forwarding timestamp
		 *        (null and unspecified are considered as equivalent to
		 *        false).
		 * \param callbacks Set of callbacks to monitor forwarding
		 *        status (null and unspecified are considered as
		 *        equivalent to an EventCallbacks object with all
		 *        attributes set to null).
		 * \param referenceTimeout Moment in time until which the
		 *	  Webinos runtime SHALL ensure that the Event object
		 *	  being sent is not garbage collected (null, unspecified
		 *	  and values up to the current date/time mean that no
		 *	  special action is taken by the runtime in this regard)
		 * \param sync If false, null or unspecified, the function is
		 *	  non-blocking, otherwise if true it will block until
		 *	  one of the following conditions becomes true: \n
		 *	   - if referenceTimeout represents a moment of time in
		 *	     the future at call time, that moment is reached; \n
		 *	   - otherwise, if the "expiryTimeStamp" attribute is
		 *	     specified as a moment of time in the future at call
		 *	     time, that moment is reached; \n
		 *	   - in any case, the end result of the operation is
		 *	     completely determined for all recipients and all
		 *	     callbacks that were to be called have run.
		 */
		void forwardEvent(in EventAddressing forwarding,
				  in optional boolean? withTimeStamp,
				  in optional EventCallbacks? callbacks,
				  in optional DOMTimeStamp? referenceTimeout,
				  in optional boolean? sync);
	};

	/**
	 * \brief ...
	 */
	[NoInterfaceObject] interface EventDeliveryError {
		/**
		 * \brief ...
		 */
		const unsigned short INVALID_DATA		= 1;
		/**
		 * \brief ...
		 */
		const unsigned short DESTINATION_UNREACHABLE	= 2;
		/**
		 * \brief ...
		 */
		const unsigned short EXPIRED			= 3;
		/**
		 * \brief ...
		 */
		const unsigned short DUPLICATE			= 4;
		/**
		 * \brief ...
		 */
		const unsigned short REFUSED			= 5;
		/**
		 * \brief ...
		 */
		const unsigned short NO_REFERENCE		= 6;

		/**
		 * \brief ...
		 */
		readonly attribute unsigned short code;
		/**
		 * \brief ...
		 */
		readonly attribute DOMString message;
	};

	/**
	 * \brief ...
	 */
	[Callback, NoInterfaceObject] interface EventCallbacks {
		/**
		 * \brief ...
		 */
		void onSending(in Event event);
		/**
		 * \brief ...
		 */
		void onCaching(in Event event);
		/**
		 * \brief ...
		 */
		void onDelivery(in Event event);
		/**
		 * \brief ...
		 */
		void onTimeout(in Event event);
		/**
		 * \brief ...
		 */
		void onError(in Event event, in EventDeliveryError error);
	};

	/**
	 * \brief ...
	 */
	[Callback=FunctionOnly] interface EventListener {
		/**
		 * \brief ...
		 */
		void handleEvent(in Event event);
	};

	/**
	 * \brief ...
	 */
	[NoInterfaceObject] interface WebinosEventsInterface {
		/**
		 * \brief ...
		 */
		DOMString addEventListener(in EventListener listener,
					   in optional DOMString? type,
					   in optional EventEntity? source,
					   in optional EventEntity? destination);
		/**
		 * \brief ...
		 */
		void removeEventListener(in DOMString listenerId);
	};

	/**
	 * \brief ...
	 */
	[NoInterfaceObject] interface WebinosEvents {
		/**
		 * \brief ...
		 */
		readonly attribute WebinosEventsInterface events;
	};

	webinoscore::Webinos implements WebinosEvents;
};
