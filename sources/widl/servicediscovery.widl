/**
 * \brief The Discovery API 
 *
 * The Webinos Discovery API provide web applications with an API to find and bind to services. 
 * The API is not limited to the local device but enables the possibility to find services in a 
 * zone of trusted personal devices or services exposed by legacy methods such as Bluetooth SD, mDNS or UPnP.
 * 
 * Usage of the API assumes that the web application using the API is installed, trusted and that the user is
 * authenticated/authorized to use the API.
 *
 * \def-api-feature http://webinos.org/api/discovery
 * \author Anders Isberg &lt;anders.isberg@sonyericsson.com&gt;
 * \version 0.5 
 */
module discovery {
	/**
	 * \brief The DiscoveryInterface interface provides functionality for discovery of services. 
	 * The API supports the possibility to find services based on a given service type either in 
	 * a personal zone of devices or via other legacy discovery methods such as mDNS or UPnP. When searching for a service type
	 * the operation can be restricted by providing certain constraints and/or context information.  
	 *
	 * The code example below shows how an application initiates a search query
	 * to find a geolocation service. Whenever a service is found, a new selection item
	 * is added to the option list. Once the user selects a service, the usage of the service authorized and an implementation of
	 * the API is instantiated.  
	 * \code
	var findHandle = 0;
	var serviceHandle = 0;
	var geoServices = {};
	var serviceId;
	
	// Callback that displays a list of found services in a HTML selection list
	// The selection list is dynamically extended every time a new service is discovered.	
	function serviceFoundCB(service) {	
		var selectlist = document.getElementById('servicelist');
		var option = document.createElement('option');
	
		option.value = service.id;
		option.id = service.id;
		option.appendChild(document.createTextNode(service.displayName));
		geoServices[service.id] = service;
		selectlist.appendChild(option);
	}
	
	// Callback that removes a service from the selection list of found services, when the service is not available any longer, e.g. out of coverage. 
	function serviceLostCB(service) {	
		var option = document.getElementById(service.id);
	
		geoServices[service.id] = NULL;
		option.parentNode.removeChild(option);
	}
	
	// Success callback when bind has been successfully executed on the service object. 
	function bindCB(myLocationService) {
		alert('Service ' + myLocationService.displayName + ' ready to use');
		myLocationService.navigator.geolocation.getCurrentPosition(showMap);
	}
	
	// Select callback method that is invoked when user selects an option in the selection list 
	function serviceSelected(service) {	
		// Stops the findServices operation
		findHandle.cancel();
	
		// Binds to the service to initiate an authorized object used to
		// invoke services.  
		serviceHandle = service.bind({onBind:bindCB});
	}
	
	if (serviceId) {
		// If serviceId is known bind to the service directly
		 
		serviceHandle = window.webinos.discovery.createServices().bind({onBind:bindCB}, serviceId);
	} 
	else {
		// Initiate a search query for a service of the type geolocation
		findHandle = window.webinos.discovery.findServices({api:'http://webinos.org/api/geolocation'}, {onFound:serviceFoundCB, onLost:serviceLostCB});
	
		var selectlist = document.getElementById('servicelist');
		selectlist.addEventListener("change", function (e) {
			var service = geoServices[e.target.value];
			if (service) {
				serviceSelected(service);
			}
		}, false);	
	}
	 * \endcode
	 *
	 */
	[NoInterfaceObject] interface DiscoveryInterface  {
		/**
		 * \brief The findServices method initiates an asynchronous search query for services matching the requested serviceType and filter parameters. The method continues to run until the findServices method is canceled by the application or when maximum search timer expires.
		 * 
		 * The zones in which services are to be searched are expected to be managed by the Webinos runtime engine (rather than the application developer).
		 * As an example on how this zone management can be presented by a runtime engine:
		 * <p><img src="http://dev.webinos.org/specifications/draft/infobar.png" alt="Illustration of possible Infobar" /><br /> Infobar offering to add new personal zones</p>
		 * This infobar would lead to a personal zones management UI:
		 * <p><img src="http://dev.webinos.org/specifications/draft/pz-add-ui.png" alt="Personal zone management UI" /><br />Personal zone management UI</p>
		 * \param serviceType An input argument that defines which type of service that is requested.
		 * \param findCallBack Callback interface used to report the outcome of the search process. 
		 * \param options Defines search options. 
		 * \param filter Defines a filter that be used to limit the service operation to certain constraints and context information. 
		 * \throw DiscoveryExceptions 
		 */
		 PendingOperation findServices(in ServiceType serviceType, in FindCallBack findCallBack, in optional Options options, in optional Filter filter)
		 raises(DiscoveryExceptions);
		/**
		 * \brief The getServiceId method generates a service identity that can be shared to other peers to directly bind to a service without invoking a findServices operation.
		 * \param sharedFunctionId Identity of the service exposed with the webinos:shared-function element in the manifest.
		 * \throw DiscoveryExceptions 
		 */
		 DOMString getServiceId(in DOMString sharedFunctionId)
		 raises(DiscoveryExceptions);
		/**
		 * \brief 	The createService method creates an instance of a Service object. 
		 * 			The method is used when the service identity is known and the 
		 *			application wants to bind to a service directly without searching 
		 *			for services with the findServices method. 
		 * \throw DiscoveryExceptions 
		 */                                                          
		 Service createService()
		 raises(DiscoveryExceptions);                                                          
	};		
	/**
	 * \brief The Service Type interface is used to define which type of service that is requested. 
	 */
	[NoInterfaceObject] interface ServiceType {
		/**
	 	 * \brief URI used to identify the requested API's feature set. The URI shall be globally unique.  
		 */
		attribute DOMString api;
	};
		
	/**
	 * \brief FindCallBack interface definition
	 */
	[Callback, NoInterfaceObject] interface FindCallBack {
		/**
		 * \brief Asynchronous callback used whenever a new service is found.      
		 * \param service An input argument representing the found service.
		 */
		 void onFound(in Service service);	  
		/**
		 * \brief Asynchronous callback used whenever a service that was previously found is not available any longer.       
		 * \param service An input argument representing the lost service.
		 */
		 void onLost(in Service service);	  
		/**
		 * \brief Asynchronous error callback.   
		 * \param error Error code. 
		 */
		void onError(in DiscoveryError error); 		 
	};
	
	/**
	 * \brief Service interface provides an API to bind to a specific service and monitoring
	 * the current state of the service in an asynchronous manner. The process of binding
	 * to a service involves:
	 * 1. mutual authentication between the service and the personal zone
	 * 2. in case of cross zone interworking, mutual authentication between the zones
	 * 3. agreement on data handling obligations as set out in the service's privacy policy
	 * 4. verifying access privileges and checks the need for elevated privileges
	 * 5. instantiate an implementation of the api that can be used by applications to request services from the requested API.
	 */
	
	[NoInterfaceObject] interface Service {
		/**
		 * \brief A constant describing the service is in the process of binding to the service. 
		 */
		const unsigned short SERVICE_INITATING = 0;		
		/**
		 * \brief A constant describing the service is available and is ready to be used by the application.  
		 */	 	 
		const unsigned short SERVICE_AVAILABLE = 1;
		/**
		 * \brief A constant describing the service is unavailable. 
		 */
		const unsigned short SERVICE_UNAVAILABLE = 2;
		/**
		 * \brief Current service state of the Service. 
		 */
		readonly attribute unsigned short state;
		/**
	 	 * \brief API is a global unique URI identifying the feature set provided when the bind has been successfully executed.
	 	 */
		readonly attribute DOMString api;
		/**
		 * \brief Id is a globally unique id representing the binding to the service. The id can be used
		 * to resume the binding again to the service without invoking the 
		 * findServices process again. 
		 */
		readonly attribute DOMString id;
		/**
		 * \brief A human readable name of the service. 
		 */
		readonly attribute DOMString displayName;
		/**
		 * \brief An URL referring to a detailed description of the service. 
		 */ 
		readonly attribute DOMString? description;
		/**
		 * \brief bind Binds to the service uniquely identified by the service identity.  
		 * \param bindCallBack Callback issued if a service is found.  The callback is called every time a new service is found matching the serviceType and filter. 
		 * \param serviceId Unique id of the binding to the particular service. If no serviceId is provided as an in parameter, the id attribute in the Service interface will be used to bind the service.
		 * \throw DiscoveryExceptions
		 */
		PendingOperation bind(in BindCallBack bindCallBack, in optional DOMString serviceId)
		raises(DiscoveryExceptions);
		/**
		 * \brief unbind Releases all resources and connections allocated by the service object.  
		 * \throw DiscoveryExceptions
		 */
		void unbind()
		raises(DiscoveryExceptions);
	};
	
	/**
	 * \brief Bind success callback interface definition
	 */
	 
	 [Callback, NoInterfaceObject] interface BindCallBack {
		/**
		 * \brief Asynchronous success callback.      
		 * \param service An input argument representing the service.
		 */
		 void onBind(in Service service);
		/**
		 * \brief Asynchronous callback used when a service is unbound.      
		 * \param service An input argument representing the service.
		 */
		 void onUnbind(in Service service);
		/**
		 * \brief Asynchronous callback indicating that the service is available again
		 * \param service An input argument representing the service.      
		 */		 
		 void onServiceAvailable(in Service service);
		/**
		 * \brief Asynchronous indicating the service is temporarily unavailable.
		 * \param service An input argument representing the service.
		 */		 		 
		 void onServiceUnavailable(in Service service);	  
		/**
		 * \brief Asynchronous error callback.   
		 * \param error Error code. 
		 */
		void onError(in DiscoveryError error); 
	};
	
	/**
	 * \brief Option interface definition
   	 */
	[NoInterfaceObject] interface Options {
		/**
		 * \brief 	A timeout value for the findService operation in seconds between 0-65535. 
		 * 		  	Default value is 120 seconds. It is possible to disable the timeout by setting 
		 *		  	the timeout value to Number.POSITIVE_INFINITY.
		 */
		attribute unsigned short timeout;
	};
	
	/**
	 * \brief Filter interface 
	 */
	[NoInterfaceObject] interface Filter {
		/**
		 * \brief 	Identities of personal zones that shall be used during the findServices process. 
		 *			If no zoneId is specified, the search will be limited to the personal zone
		 *			managed by the user that is currently logged on the device. 	   	
		 *			The zoneId "self" is reserved to indicate the personal zone managed by the
		 *			user that is currently logged on the device. 
		 */
		attribute DOMString[] zoneId;
		 
	 	/**
		 * \brief 	Remote Services If remoteService is false the findServices method will limit the search for services that are  
		 *		  	connected directly to the device or to the same local IP network. If remoteServices is true, the findServices  
		 *		  	method will extend the search for services outside the local IP network. Default value is false. 
		 */
		attribute boolean remoteServices;

	 	/**
		 * \brief 	Service Location With the serviceLocation attribute it is possible to indicate where the service shall be located.
		 *			If the service location is Null, the location of the service is not considered during the findServices process.  
		 */
		attribute ServiceLocation? serviceLocation;	
	};
	
	/**
	 * \brief ServiceLocation interface 
	 */
	[NoInterfaceObject] interface ServiceLocation {
		/**
		 * \brief 	The latitude attribute is the geographic coordinate specified in decimal degrees. 
		 *			If the latitude is Null the latitude of the device invoking the findServices method will be used. 	
		 */
		attribute double? latitude;

		/**
		 * \brief 	The longitude attribute is the geographic coordinate specified in decimal degrees.	
		 *			If the longitude is Null the longitude of the device invoking the findServices method will be used.
		 */
		attribute double? longitude;
		
		/**
		 * \brief 	The accuracy denotes the accuracy level of the latitude and longitude coordinates in meters.  	   	
		 *			This is used to limit the geographical area for finding services.
		 */
		attribute double accuracy;    	    	
	};
	
	
	/**
	 * \brief Pending Operation interface 
	 */
	[NoInterfaceObject] interface PendingOperation {
		/**
		 * \brief Cancels the pending asynchronous operation and allocated resources are released.  
		 */
		void cancel();
	};
  
	/**
	 * \brief Discovery specific errors.
	 */
	[NoInterfaceObject] interface DiscoveryError {
		/**
		 * \brief The discovery process was canceled by the application
		 */
		 const unsigned short FIND_SERVICE_CANCELED = 101;
		/**
		 * \brief The discovery process was canceled since the timeout timer expired. 
		 */
		 const unsigned short FIND_SERVICE_TIMEOUT = 102;		 
		/**
		 * \brief Not Authorized to use the service.  
		 */
		 const unsigned short PERMISSION_DENIED_ERROR  = 103;
	};
  
	/**
	 * \brief Discovery specific exceptions.
	 */
	exception DiscoveryExceptions {
		/**
		 * \brief The property cannot be currently retrieved
		 */
		 const unsigned short INVALID_ARGUMENT_ERROR = 101;
	};
	
	
	/**
	 * \brief The WebinosDiscovery interface describes the part of the Discovery
	 *        API accessible through the webinos object.
	 */
	[NoInterfaceObject] interface WebinosDiscovery {
		/**
		 * \brief webinos.discovery object.
		 */
		readonly attribute DiscoveryInterface discovery;
	};

    webinoscore::Webinos implements WebinosDiscovery;
};
