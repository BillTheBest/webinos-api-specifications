/**
 * \brief The Service Discovery API 
 *
 * \def-api-feature http://webinos.org/api/servicediscovery
 * EARLY Draft
 * The Webinos Service Disocvery API provides web applications with 
 * an API to find services that are exposed locally or remotely. 
 * 
 * Locally service includes services exposed locally in the device
 * or connected to the device via Local Connectivity such as
 * Bluetooth, WiFi or USB. 
 * 
 * Remote service discovery includes services exposed in a Personal Zone.
 * I WILL CLEAN-UP THE TEXT Ais 
 * Services could be discovered outside the own Personal Zone. 
 * 1. Verify that the user of the device is authenticated against the Personal Zone. 
 * 2. In case of access outside the Personal Zone authenticate against the remote Zone.
 * 3. Mutually authenticate the application and service against the Personal Zone.
 * 4. Verify that privacy and security policies allows access to the service. 
 * 5. Instantiate an implementation of the service. 
 * 6. Upon successful completion issue a succesCallback reporting the outcome.     
 *
 * \author Anders Isberg &lt;anders.isberg@sonyericsson.com&gt;
 * \version 0.3 
 */
module serviceDiscovery {

	/**
	 * \brief The Service Discovery Interface
	 *
	 * The ServiceDiscoveryManager interface provides functionality for service discovery. 
	 * The API supports the possibility to find services based on a search criteria. 
	 *
	 * The code example below shows how an application initiating a search query
	 * to find a geolocation service. Once the service is found and the service
	 * is ready to use a success callback is called in an asynchronous manner. 
	 * 
	 * The API provides also the possibility resume an binding to a service with
	 * bindService method. The bindService method provides the possibility to bind
	 * directly to a specific service.
	 * 
	 * \code
	// Find a service
	// Handle that can be used to cancel the ongoing asynchronous discovery process.
	var handle = 0;
	var serviceId = 0;
    	 
	// Callback when service is found, selected by end user, authorized and ready to use
	function successCB(myLocationService) {
		alert('Service ' + myLocationService.displayName + ' ready to use');
		serviceId = myLocationService.id;
		myLocationService.getCurrentPosition(showMap);
	}
			
	handle = window.webinos.findServices('self', {api:'http://webinos.org/api/geolocation'}, successCB);
	
	// Resume a binding to a service			
	handle = window.webinos.bindService(serviceId, successCB);
	 * \endcode
	 *
	 */

	interface ServiceDiscoveryManager  {
		/**
	   	 * \brief The ServiceDiscoveryManager interface
		 *
		 * \brief findServices Initiates an asynchronous search query for services matching the requested zoneId, serviceType and filter parameters. The end user is prompted to select one of the found services. Upon selection the methods tries to bind to the service.  
		 * \param zoneId Identity of a Personal Zone that is hosting the service. The zoneId 'self' is reserved for the Personal Zone of the user authenticated against the device. The zoneId 'shared' is reserved for services that are shared on the current network.
		 * \param serviceType An input argument that defines which type of service that is requested.
		 * \param successCallBack Callback issued if an service is found.  The callback is called every time a new service is found matching the zoneId, serviceType and filter.
		 * \param errorCallBack Callback issued if serviceDiscovery fails.  
		 * \param options Defines search options. 
		 * \param filter Defines a filter with constraints that shall be applied during the discovery process, e.g. service shall only be applied for services in proximity.
		 * \throw DiscoveryExceptions 
		 */
		 PendingOperation findServices(in DOMString zoneId, in ServiceType serviceType, in SuccessCallBack successCallBack, in optional ErrorCallBack errorCallBack, in optional Options options, in optional Filter filter)
		 raises(DiscoveryExceptions);
		 
		/**
		 * \brief bindService Resumes the binding to service uniquely identified by the service identity. When binding to a service the API mutually authenticates the application/service, establish a trusted relation respecting the privacy and security policy settings and instantiate an implementation of the api. 
		 * \param serviceId Unique id of the binding to the particular service. 
		 * \param successCallBack Callback issued if an service is found.  The callback is called every time a new service is found matching the zoneId, serviceType and filter.
		 * \param errorCallBack Callback issued if serviceDiscovery fails.  
		 * \throw DiscoveryExceptions 
		 */ 
		 PendingOperation bindService(in DOMString serviceId, in SuccessCallBack successCallBack, in optional ErrorCallBack errorCallBack)
		 raises(DiscoveryExceptions);
	};
	
	/**
	 * \brief Service Type interface definition,
	 *
	 * The Service Type object is used to define which type of service that is requested. 
	 */
	[NoInterfaceObject] interface ServiceType {
		/**
	 	 * \brief URI used to identify the requested API's feature set. The URI shall be globally unique.  
		 */
		attribute DOMString api;
	};
	
	
	/**
	 * \brief SuccessCallBack interface definition
	 *
	 */
	
	[Callback=FunctionOnly, NoInterfaceObject] interface SuccessCallBack {
		/**
		 * \brief onSuccess The onSuccess method is call every time a new service is found during the findService process.   
		 * TBD Some detailed text
		 * \code
		 // Some code example
		 * \endcode
		 *
		 * \param service An input argument representing the discovered service.
		 *
		 */
		 void onSuccess(in Service service);	  
	};
	
	/**
	 * \brief ErrorCallBack interface definition
	 *
	 */
	
	[Callback=FunctionOnly, NoInterfaceObject] interface ErrorCallBack {
		/**
		 * \brief onError The onError method is called if an error occurs during the findService process.   
		 * TBD Which resources should be clean-up
		 *
		 * \code
		 // Some code example
		 * \endcode
		 *
		 * \param error An input argument 
		 *
		 */
		void onErrror(in DiscoveryError error); 
	};

	/**
	 * \brief Service interface definition,
	 *
	 */
	
	interface Service {
		/**
		 * \brief A constant describing the service is in the process of being initiated. 
		 *
		 */
	 	 
		const unsigned short SERVICE_INITATING = 0;
		
		/**
		 * \brief A constant describing the service is available and can be used. 
		 *
		 */
	 	 
		const unsigned short SERVICE_AVAILABLE = 1;

		/**
		 * \brief A constant describing the service is unavailable. 
		 *
		 */
		
		const unsigned short SERVICE_UNAVAILABLE = 2;

		/**
		 * \brief Current State of the Sensor. 
		 *
		 */
		
		readonly attribute unsigned short serviceState;


		/**
	 	 * \brief API is an global unique URI identifying the feature set provided when the bindService has been successfully executed.
	 	 */
		attribute DOMString api;
		
		/**
		 * \brief Id is an globally unique id representing the binding to the service. The id can be used
		 * to resume the binding again to the service without going through the 
		 * findServices process again. 
		 */
		attribute DOMString id;
		
		/**
		 * \brief A human readable name of the service. 
		 */
		attribute DOMString displayName;
		
		/**
		 * \brief An URL referring to a detailed description of the service. 
		 */ 
		attribute DOMString description;
	};
	
	
	/**
	 * \brief Option interface definition
   	 */
   	 
	[NoInterfaceObject] interface Options {
		/**
		 * \brief INFINITE Timeout Value
		 *
		 */
		const unsigned short INFINITE = 0;
		
		/**
		 * \brief A timeout value for the findService operation in seconds between 0-65535. Default value is 120 seconds.
		 */
		attribute unsigned short timeout;
	  
	};
	
	/**
	* \brief TBD: Some nice attributes to express filters. 
	*/
	[NoInterfaceObject] interface Filter {
	 
	};
	
	/**
	 * \brief Pending Operation interface 
	 *
	 */
	
	[NoInterfaceObject] interface PendingOperation {
		
		/**
		 * \brief Cancel the pending asynchronous operation for finding new services. Resources allocated during the discovery process will be deleted. 
		 * \code
		 // Some code example
		 * \endcode
		 */
		void cancel();
	};
  
	/**
	 * \brief Discovery specific errors.
	 */
	[NoInterfaceObject] interface DiscoveryError {
		/**
		 * \brief The discovery process was canceled by the application
		 */
		 const unsigned short DISCOVERY_CANCELED = 101;
		 
		/**
		 * \brief The discovery process was canceled since the timeout timer expired. 
		 */
		 const unsigned short DISCOVERY_TIMEOUT = 102;
		 
		/**
		 * \brief Service not due to lost connectivity or service has been stopped.  
		 */
		 const unsigned short SERVICE_NOT_AVAILABLE = 103;
		 
		/**
		 * \brief Not Authorized to use the service.  
		 */
		 const unsigned short NOT_AUTHORIZED = 104;
	};
  
	/**
	 * \brief Discovery specific exceptions.
	 */
	exception DiscoveryExceptions {
		/**
		 * \brief The property cannot be currently retrieved
		 */
		 const unsigned short INVALID_ARGUMENT_ERROR = 101;
	};
};
