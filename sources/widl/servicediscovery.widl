/**
 * \brief The Service Discovery API 
 *
 * EARLY Draft
 * The Webinos Service Disocvery API provides web applications with 
 * an API to find services that are exposed locally or remotely. 
 * 
 * Locally service includes services exposed locally in the device
 * or connected to the device via Local Connectivity such as
 * Bluetooth, WiFi or USB. 
 * 
 * Remote service discovery includes services exposed in a Personal Zone. 
 * Services could be discovered outside the own Personal Zone.     
 *
 * \author Anders Isberg &lt;anders.isberg@sonyericsson.com&gt;
 * \version 0.1 
 */
module serviceDiscovery {
      
    /**
     * \brief The Service Discovery Interface
	 *
	 * The ServiceDiscoveryManager interface provides functionality for service discovery. 
	 * The API support the possibility to find services based on a search criteria. 
	 *
	 * The code example below shows how a search query is initiated and the found services 
	 * are listed in a selection list in an asynchronous manner. When the end user selects
	 * an service, the implementation of the service is initiated by binding to the service.  
	 *		 
     * \code
	function successCB(service) {
		// Display list of found services in a selection list
		var selectlist = document.getElementById('servicelist');
		var option = document.createElement('option');

		option.value = selectlist.length + 1; 
		option.text = service.displayName;
		option.id = service.id;
		selectlist.add(option);
	}

	function serviceSelected(selection) {
		// Service is selected by selecting one item in the select list 
		// Bind service to initiate the service object
		// TBD some enhanced example to how to find the service

		// TBD guess this should by asynch as well
		service.bindService();

		// Stop the findService operation
		handle.cancel();
	}

	var typeOfService = new ServiceType();
	var handle;

	typeOfService = {type:"geolocation.w3c.webinos.org"};
	handle = windows.webinos.findServices('self', typeOfService, successCB);
	 * \endcode
	 *
     */

	interface ServiceDiscoveryManager  {
		/**
	   	 * \brief The ServiceDiscoveryManager interface
		 *
		 * \brief findServices Initiates an asynchronous search query for services
		 * matching the requested userId, serviceType and filter parameters.  
		 * \param userId Identity of Personal Zone. The userId 'self' is reserved to indicate the Personal Zone of the user authenticated against the device. The userId 'shared' is reserved for services that are shared on the current network.
		 * \param serviceType An input argument that defines which type of service that is requested.
		 * \param successCallBack Callback issued if an service is found.  The callback is called every time a new service is found matching the userId, serviceType and filter.
	     * \param errorCallBack Callback issued if serviceDiscovery fails.  
	     * \param options Defines search options. 
	     * \param filter Defines a filter with constraints that shall be applied during the discovery process, e.g. service shall only be applied for services in proximity.
	     * \throw DiscoveryError INVALID_ARGUMENT_ERROR if an invalid argument is passed
		 */
		 PendingOperation findServices(in DOMString userId, in ServiceType serviceType, in SuccessCallBack successCallBack, in optional ErrorCallBack errorCallBack, in optional Options options, in optional Filter filter)
		 raises(DiscoveryError);
    };
    
	/**
	* \brief Service Type interface definition,
	*
	* The Service Type object is used to define which type of service
	* that is desired. 
	*/
	interface ServiceType {
		/**
	 	 * \brief type Type of Service
		 */
		attribute DOMString type;
		
		/**
		 * \brief id Globally unique id of the service. 
		 */
		attribute DOMString id;
		
		/**
		 * More attributes needs to be defined and how can the type vocabulary be extended.  
		 */
	};
	
	
	/**
	 * \brief SuccessCallBack interface definition
	 *
	 */
	
	[Callback=FunctionOnly] interface SuccessCallBack {
		/**
		 * \brief onSuccess The onSuccess method is call every time a new service is found during the findService process.   
		 * TBD Some detailed text
		 * \code
		 // Some code example
		 * \endcode
		 *
		 * \param service An input argument representing the discovered service. that can be self, shared or
		 *
		 */
		 void onSuccess(in Service service);	  
	};
	
	/**
	 * \brief ErrorCallBack interface definition
	 *
	 */
	
	[Callback=FunctionOnly] interface ErrorCallBack {
		/**
		 * \brief onError The onError method is if an error occurs during the findService process.   
		 * TBD Some detailed text
		 *
		 * \code
		 // Some code example
		 * \endcode
		 *
		 * \param error An input argument 
		 *
		 */
		void onErrror(in DiscoveryError error); 
	};

	/**
	 * \brief Service interface definition,
	 *
	 */
	
	interface Service {
		/**
		 * \brief id Globally unique id of the service. 
		 */
		attribute DOMString id;
		
		/**
		 * \brief displayName A human readable name of the service. 
		 */
		attribute DOMString displayName;
		    
		/**
		 * \brief description The description contains a URI pointing a detailed description of the service. 
		 */ 
		attribute DOMString description;
		
		/**
		 * \brief authLevel Defines the type of authentication required to access the service.
		 * TBD which type of auth level exists and should those be defined here? 
		 */ 
		attribute unsigned short authLevel; 
		
		/**
		 * \brief bindService The bind service API Initiate the service objects... Auth etc.... the ongoing service discovery process. 
		 * \code
		 // Some code example
		 * \endcode
		 */

		void bindService();	    
	};
		
	
	/**
     * \brief Option interface definition
   	 */
   	 
	interface Options {
		/**
		 * \brief INFINITE Timeout Value
		 *
		 */
		const unsigned short INFINITE = 0;
		
		/**
		 * \brief timeout Defines a timeout value for when service discovery is canceled in seconds. Default value is INFINITE.
		 */
		attribute unsigned short timeout;
	  
	};
	
	interface Filter {
	};
  
  
	/**
     * \brief Discovery specific errors.
     */
    exception DiscoveryError {
	    /**
	     * \brief The property cannot be currently retrieved
	     */
	     const unsigned short INVALID_ARGUMENT_ERROR = 101;
    };
    
};
