/**<p>The webinos vehicle API provides access to specific vehicle data.</p>
 * It is derived from W3C's DOM Level 3 Events model and defines event types for retrieving information about the vehicle including trip computer data, gears or park sensors. Furthermore it offers methods for interacting with the on-board navigation system. The geolocation, speed and acceleration can be retrieved using the <a href="geolocation.html">geolocation</a> and <a href="deviceorientation.html">device orientation</a> API.
 * \name Vehicle API.
 *
 * 
 *
 * The API gives access to vehicle data, which is available on the infotainment vehicle bus (e.g. <a href="http://en.wikipedia.org/wiki/MOST_Bus">MOST</a>). The infotainment bus is the only access point for the headunit to receveive vehicle data (<a href="http://dev.webinos.org/redmine/attachments/download/666/vehicle_bus_infrastructure.pdf" target="_blank">diagram on vehicle bus architecture</a>). Some data from other busses (high/low speed <a href="http://en.wikipedia.org/wiki/Controller_area_network" target="_blank">CAN</a>) are routed into the bus over the central gateway such as speed or gear (RPM is currently not provided on the MOST). 
 *
 * \def-api-feature http://webinos.org/api/vehicle
 * Identifies the static information about the vehicle 
 *
 * \def-api-feature http://webinos.org/api/vehicle.climate
 * Identifies vehicle data related to climate controls. 
 *
 * \def-api-feature http://webinos.org/api/vehicle.navigation
 * Identifies the navigation module of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle.parksensors
 * Identifies park sensor modules of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle.tripcomputer
 * Identifies the trip computer information of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle.controls
 * Identifies control data (e.g. wipers and lights) of a vehicle
 *
 * \def-api-feature http://webinos.org/api/vehicle.shift
 * Identifies gear data
 * 
 * \author Simon Isenberg (BMW Forschung \& Technik) &lt;Simon.Isenberg@bmw.de&gt;
 * \version 0.7
 */

	/**
	* \brief This interface defines the address properties, which can be passed to the navigation system using the requestGuidance() function.   The <a href="http://dev.w3.org/geo/api/spec-source-v2.html#address_interface" target="_blank">Address interface</a> defined in the v2 of the W3C Geolocation API is used for this purpose.
	*
	*/ 
	dictionary Address{
		/**
		* \brief Attribute is specified by using the two-letter [ISO 3166-1] code.
		*/
		DOMString country;
		/**
		* \brief Attribute denotes the name of a country subdivision (e.g. the state name in the US).
		*/		
		DOMString? region;
		/**
		* \brief Attribute denotes the name of a land area within a larger region.
		*/		
		DOMString? county;
		/**
		* \brief Attribute reflects the name of the city.
		*/		
		DOMString city;
		/**
		* \brief Attribute reflects the name of the street.
		*/		
		DOMString street;
		/**
		* \brief Attribute describes the location's street number.
		*/		
		 DOMString streetNumber;
		/**
		* \brief Attribute denotes the details of the premises, such as a building name, block of flats, etc.
		*/		
		DOMString? premises;
		/**
		* \brief Attribute contains other address details that are not captured by the rest of the attributes in this interface. Examples include a floor number in a building, an apartment number, the name of an office occupant, etc..
		*/		
		DOMString additionalInformation;
		/**
		* \brief Attribute reflects the postal code of the location (e.g. the zip code in the US).
		*/		
		DOMString postalCode;
	};
	
	/**
	* \brief The interface defines a generic event for vehicle data specific events.
	*
	*/ 
	[NoInterfaceObject]
	interface VehicleEvent : Event{
	
	};
	/**
	* \brief This dictionary defines the LatLng properties, which can be passed to the navigation system using the requestGuidance() function. The format is WGS84. 
	* <em>Note: The <a href="http://dev.w3.org/geo/api/spec-source-v2.html#coordinates">coordinate</a> interface from the Geolocation API v2 includes attributes, which are not feasible for beeing handled by the navigation system (accurancy, alitude accurency, heading, speed). In some special cases (destination is on a bridge, which crosses another street) it might make sense to add the altitude to LatLng interface at a later stage.</em> 
	* 
	*
	*/ 
	dictionary LatLng{
		/**
		* \brief Attribute reflect the latitude of a geolocation in WGS84.
		*/
		double latitude;
		/**
		* \brief Attribute reflect the Longitude of a geolocation in WGS84.
		*/			
		double longitude;
	};
	/**
	* \brief This dictionary defines a Point of Interest (POI). 
	*  The dictionary contains the name of a POI and its address and/or geolocation as a LatLng object. <em> Note: The <a href="http://www.w3.org/2010/POI/" target="_blank">W3C POI WG</a> has published a <a href="http://www.w3.org/TR/2011/WD-poi-core-20110512/" target="_blank">first working draft</a> for the POI handling. The draft focuses on a XML representation of a POI and does not seem handy for beeing handled by a navigation system.</em>
	*/ 
	dictionary POI{
		/**
		* \brief Attribute denotes the name of the POI.
		*/		
		DOMString? name;
		/**
		* \brief Attribute reflects the geolocation of the POI as LatLng object.
		*/		
		LatLng? position;
		/**
		* \brief Attribute denotes the address of the POI.
		*/		
		Address address;
	};

	/**
	* \brief callback for a success from requestGuidance.
	*
	*/
	callback VehicleSuccessCallback = void ();

	/**
	* \brief callback for a failure from requestGuidance, get, or findDestination
	* \param error a <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> containing information about the error (e.g. SecurityError if permission is denied).
	*
	*/
	callback VehicleErrorCallback = void (DOMError error);
	
	/**
	* \brief callback method to receive vehicle data in a non-recurring and asynchronous way.
	*/ 	
	callback VehicleDataHandler = void (VehicleEvent data);

	/**
	* \brief Possible values for vehicle fuel 
	*/
	enum Fuel { "unleaded", "premium", "diesel" };

	/**
	* \brief Possible values for transmission type 
	*/
	enum VehicleTransmission { "transmission-automatic", "transmission-manual" };
	
	/**
	* \brief The interface defines general information about the vehicle and is the object, where the event listener for vehicle related data can be registered. The interface is accessible through the webinos.vehicle object. 
	* 
	*/
	[NoInterfaceObject]
	interface VehicleInterface : EventTarget {
		/**
		* \brief Attribute denotes brand name of the vehicle.
		*/					
		readonly attribute DOMString brand;
		/**
		* \brief Attribute reflects model name of the vehicle.
		*/		
		readonly attribute DOMString model;
		/**
		* \brief Attribute denotes production year of the vehicle.
		*/		
		readonly attribute DOMString year;
		/**
		* \brief Attribute reflects fuel type of the vehicle.
		*/		
		readonly attribute Fuel fuel;
		/**
		* \brief Attribute denotes transmission type of the vehicle.
		*/		
		readonly attribute VehicleTransmission transmission;
		/**
		* \brief Method allows to request vehicle data in a non-recurring way and is independant from value changes (cf. events). The same identifiers  are used for vehicle data as well as for the different vehicle events (ClimateControlEvent, ControlEvent, NavigationEvent, ParkSensorsEvent, ShiftEvent). 
		* \code
		* webinos.vehicle.get("climate-all", dataHandler);
		* function dataHandler(data){
		*	if(data.acStatus){
		* 		console.log("Airconditioning is on");
		*		if(data.desiredTemperature \< 19){
		*			console.log("This is not so good for your health");
				}
		*	}
		* }
		* \endcode

		* \param vehicleDataId Parameter specifies the type of data, which shall be retrieved. The identifiers for the different data types are defined in the different vehicle event interfaces (ClimateControlEvent, ControlEvent, NavigationEvent, ParkSensorsEvent, ShiftEvent, StatusDataEvent). The identifiers are defined as values of the various enums: ClimateZone, VehicleLight, DestinationEventType, ParkSensorPosition, VehicleStatusComponents. 
		* \param handler Parameter specifies the function to handle the result.
		* \param errorCB Parameter specifies the callback function in case of an error.
		*/
		void get(DOMString vehicleDataId, VehicleDataHandler handler, VehicleErrorCallback errorCB);
		/**
		* \brief Parameter sets the given POIs as the next destinations for the build-in navigation system. The method handles intermediate stops. The last POI in the array is the final destination.
		* \code
		*	var destinations =new Array();
		*	destinations.push({name:"BMW AG", address : {street:"Petuelring", streetNumber: "130", postalCode: "80788", city: "MÜNCHEN", country: "DE"}});
		*   destinations.push({name:"BMW Forschung und Technik", address:{street: "Hanauer Strasse", streetNumber: "46", postalCode: "80992", city: "MÜNCHEN", country: "DE"}});
		*      webinos.vehicle.requestGuidance(succesCB, null, destinations);
		*  	webinos.vehicle.addEventListener("destination-reached", handleDestinations, false);
		*      
		*	function handleDestinations(event){
		*          if (event.address.street == destination[0].address.street) {
		*	       console.log("Reached the HQ");
		*          } else if (event.address.street == destination[1].address.street) {
		*	        console.log("Reached the research center");
		*          }
		*	}
		* \endcode

		* \param successCallback callback, if the POIs are succesully transferred.
		* \param errorCallback callback, if the address could not be transferred. 
		* \param destinations in form of an POI array. The last POI in the array is the destination point. The other POIs are intermediate stops along the route.
		*/
		void requestGuidance(VehicleSuccessCallback successCallback, VehicleErrorCallback errorCallback, POI[] destinations);
		/**
		* \brief Queries the navigation system to retrieve POIs for a given search string.
		*
		* \code
		*	var destinations =new Array();
		*      webinos.vehicle.findDestination(destinationCB, errorCB,"BMW");
		*      function destinationCB(pois){
		*	if(destinations.length > 0){
		*      	webinos.requestGuidance(successCB, errorCB, destinations);            
		*	else{
		*		console.log("No POI found");
		*	}		
		*}
		* 
		* \endcode
		*
		* \param destinationCallback callback to handle the results to the search string.
		* \param errorCallback callback to handle errors.
		* \param search search string for resolving a address.
		*/
		void findDestination(DestinationCallback destinationCallback, VehicleErrorCallback errorCallback, DOMString search);
	};
	
	/**
	* \brief The Vehicle interface describes the part of the Vehicle API accessible through the webinos object. 
	*
	*/
	[NoInterfaceObject] interface Vehicle {
                readonly attribute VehicleInterface vehicle;
        };
	Webinos implements Vehicle;
	/**
	* \brief callback for the asynchronous findDestination method.
	* \param pois Parameter provides an array of POIs.
	*/
 	callback DestinationCallback = void (POI[] pois);

	/**
	* \brief Climate zone names
	*/
	enum VehicleClimateZone { "climate-all", "climate-driver", "climate-passenger-front", "climate-passenger-rear-left", "climate-passenger-rear-right"};
	
	/**
	* \brief The interface defines a climate control event. 
	* The event provides information about changes to the climate control system inside the vehicle.
	* \code
	*
	* webinos.vehicle.addEventListener("climate", climateHandler, null);
	* function climateHandler(data){
	*		console.log(data.zone + " desired temperature is " + data.desiredTemperature + "° C"); 		
	*	}				
	* \endcode
	*/
	[NoInterfaceObject]
	interface ClimateControlEvent : VehicleEvent{
		/**
		* \brief Attribute defines the zone of the climate control event.
		*/	
		readonly attribute VehicleClimateZone zone;
		/**
		* \brief Attribute defines the desired temperature in degree celsius.
		*/	
		readonly attribute unsigned short desiredTemperature; 
		/**
		* \brief Attribute defines, if the AC switched on or not.	
		*/	
		readonly attribute boolean acStatus;
		/**
		* \brief Attribute defines the level of the vents. This value can be 1-9.  	
		*/	
		readonly attribute unsigned short ventLevel;
		/**
		* \brief Attribute defines if the vent is used in automatic mode or not. 	
		*/	
		readonly attribute boolean ventMode;
		/**
		* \brief Method is used to set initial values of a climate control event.
		* \param bubbles True if event bubbles.
		* \param cancelable True if event is cancelable.
		* \param zone zone where event climate settings have been changed.
		* \param desiredTemperature desired temperature in degree celsius.
		* \param acStatus true if the air conditioning is running.
		* \param ventLevel level of the vent.
		* \param ventMode true, if the vent is in automatic mode.
		*/
		void initClimateControlEvent(boolean bubbles, boolean cancelable, DOMString zone, short desiredTemperature, boolean acStatus, short ventLevel, short ventMode);
	};

	/**
	* \brief Type of vehicle light
	*/
	enum VehicleLight { "fog-front", "fog-rear", "signal-left", "signal-right", "signal-warn", "light-parking", "hibeam", "light-head" };

	
	/**
	* \brief The interface defines a control event. 
	* The event signals a change for a control unit inside the vehicle (e.g. lights, wiper, etc.). The identifiers for the different control events are defined in the enums VehicleLight and VehicleWiperMode
	* \code
	*	webinos.vehicle.addEventListener("hibeam", lightHandler, false);
	*      function lightHandler(cEvent){
	*		if(cEvent.controlId == "hibeam"){
	*			if(cEvent.active == true){
	*				console.log("Hibeam turned on");
	*			}else{
	*				console.log("Hibeam turned off");
	*			}
	*		}
	*	}
	* \endcode
	*/
	interface ControlEvent : VehicleEvent{
		/**
		* \brief Attribute describes the source of the event.
		*/	
		readonly attribute (VehicleLight or VehicleWiperMode) controlId;
		/**
		* \brief Attribute describes the status of the control unit.	
		*/	
		readonly attribute boolean active;
		/**
		* \brief Method sets initial values of a control event.
		* \param bubbles True if event bubbles.
		* \param cancelable True if event cancelable.
		* \param controlId specifies the control unit.
		* \param active specifies if the unit is activated or not.
		*/
		void initControlEvent(boolean bubbles, boolean cancelable, DOMString controlId, boolean active);
	};
	/**
	* \brief Type of destination event
	*/
	enum DestinationEventType { "destination-reached", "destination-changed", "destination-cancelled"};

		/**
	* \brief The interface defines the navigation event.
	*/
	interface NavigationEvent : VehicleEvent{
		/**
		
		/**
		* \brief Attribute defines the type of the navigation event. The type can either be  "destination-reached", "destination-changed" or "destination-cancelled".
		*/			
		readonly attribute DestinationEventType type;
		/**
		* \brief Attribute defines for which address the event occured.	
		*/
		readonly attribute Address address;

		/**
		* \brief Method sets initial values of a navigation event.
		* \param bubbles True if event bubbles.
		* \param cancelable True if event cancelable.
		* \param navigationEventId Sensor type.
		* \param destination destination for which the event occured.
		*/
		void initNavigationEvent(boolean bubbles, boolean cancelable, DOMString navigationEventId, Address destination);	
	};
	/**
	*  \brief Position of parksensor event
	*/
	enum ParkSensorPosition { "parksensor-front", "parksensor-rear"};

	/**
	* \brief This interface defines an event related to the built-in park sensors. 
	* A listener can be registered by vehicle.addEventLister("parksensor-front",listener,false).
	* \code
	*	webinos.vehicle.addEventListener("parksensor-front", psHandler, false);
	*	webinos.vehicle.addEventListener("parksensor-rear", psHandler, false);
	*	function psHandler(psEvent){
	*		if(psEvent.left == 20){
	*			console.log("obstacle on the left in" + psEvent.position + " is close");
	*		}
	*	}
	* \endcode
	*/
	interface ParkSensorsEvent : VehicleEvent{
		/**
		* \brief Attribute defines the position of the sensor.
		*/
		readonly attribute ParkSensorPosition position;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the left side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/    		
		readonly attribute unsigned short left;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the middle left side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short midLeft;	
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the middle right side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short midRigth;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the rigth side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short rigth;
		/**
		* \brief Method sets initial values of a park sensors event.
		* \param position position of the sensors: front or rear.
		* \param left data from the outer left sensor.
		* \param left data from the left sensor.
		* \param midLeft data from the middle left sensor.
		* \param midRight data from the middle right sensor.
		* \param right data from the right sensor.
		* \param outright data from the outer right sensor.
		*/
		void initParkSensorsEvent(DOMString position, short outLeft ,short left, short midLeft, short midRight, short right, short outRight);
	};

	/**
	* \brief This interface defines a shift event. 
	* A listener can be registered by vehicle.addEventLister("shift",listener,false).
	* \code
	* // registering an Event for a Shift
	* webinos.vehicle.addEventListener("shift", shiftHandler);
	* function shiftHandler(e){
	*   document.getElementById("info").innerHTML = e.gear;
	*  webinos.vehicle.removeEventListener("shift", shiftHandler);
	* }				
	* \endcode
	*/
	interface ShiftEvent : VehicleEvent{
		/**
		* \brief Constant defines the first gear.	
		*/	
		const short GEAR_ONE = 1;
		/**
		* \brief Constant defines the second gear.	
		*/	
		const short GEAR_TWO = 2;
		/**
		* \brief Constant defines the third gear.	
		*/	
		const short GEAR_THREE = 3;
		/**
		* \brief Constant defines the fourth gear.
		*/	
		const short GEAR_FOUR = 4;		
		/**
		* \brief Constant defines the fifth gear.	
		*/	
		const short GEAR_FIFE = 5;
		/**
		* \brief Constant defines the sixth gear.	
		*/	
		const short GEAR_SIX = 6;
		/**
		* \brief Constant defines the seventh gear.
		*/	
		const short GEAR_SEVEN = 7;
		/**
		* \brief Constant defines the eighth gear.	
		*/	
		const short GEAR_EIGHT = 8;
		/**
		* \brief Constant defines the reverse gear.	
		*/	
		const short GEAR_REVERSE = -1;
		/**
		* \brief Constant defines the neutral gear.	
		*/	
		const short GEAR_NEUTRAL = 0;
		/**
		* \brief Constant defines the parking gear.	
		*/	
		const short GEAR_PARKING = -2;		
		/**
		* \brief Attribute represents the current gear of the vehicle. 	
		*/	
		readonly attribute short gear;
		/**
		* \brief Method sets initial values a shift event.
		* \param bubbles True if event bubbles.
		* \param cancelable True if event cancelable.
		* \param gear current gear of the engine.
		*/
		void initShiftEvent(boolean bubbles, boolean cancelable, short gear);
	};
		/**
	* \brief The interface defines a trip computer event. 
	* A listener can be registered by vehicle.addEventLister("tripcomputer",listener,false).
	*
	* \code
	*var latestConsumption = 0;
	*webinos.vehicle.addEventListener("tripcomputer", tripDataHandler, false);
	*      
	*function tripDataHandler(data){
	*	//Calculating, if the fuel efficiency increased, since the last update
	*	var gap = latestConsumption - data.averageConsumption;
	*	if(gap \< 0){
	*	    console.log("Thumbs down. You decreased your fuel efficiency");
	*	} else if (gap > 0){
	*	    console.log("Thumbs up. You increased your fuel efficiency");
	*	} else {
	*	    console.log("nothing changed");
	*	}
	*	latestConsumption = data.averageConsumption;
	*      
	*	if (data.range \< 20){
	*	    console.log("You really need " + webinos.vehicle.fuel + "soon.");	
	*	}
	*}
	* \endcode
	*/
	interface TripComputerEvent : VehicleEvent{
		/**
		* \brief Attrubute reflects the overall average consumption of the vehicle in l/100kilometers (resets on driver's demand).
		*/		
		readonly attribute float averageConsumption;
		/**
		* \brief Attrubute reflects the average consumption of the vehicle in l/100kilometers on the ongoing journey (resets automatically).
		*/		
		readonly attribute float tripConsumption;
		/**
		* \brief Attrubute reflects the overall average speed of the vehicle in kilometers per hour (resets on driver's demand).
		*/
		readonly attribute float averageSpeed;
		/**
		* \brief Attrubute reflects average speed of the vehicle in kilometers per hour on the current trip (resets automatically).
		*/		
		readonly attribute float tripSpeed;
		/**
		* \brief Attrubute reflects trip distance in kilometers.
		*/
		readonly attribute float tripDistance;
		/**
		* \brief Attrubute reflects mileage in kilometers.
		*/
		readonly attribute float mileage;
		/**
		* \brief Attrubute reflects the range of the vehicle in kilometers.
		*/
		readonly attribute float range;
		/**
		* \brief Method sets the initial values of a trip computer event.
		*
		* \param bubbles True if event bubbles.
		* \param cancelable True if event cancelable.
		* \param averageConsumption overall average consumption of the vehicle in l/100kilometers.
		* \param tripConsumption average consumption of the vehicle in l/100kilometers on the current trip.
		* \param averageSpeed average speed of the vehicle in kilometers per hour. 
		* \param tripSpeed average speed  of the vehicle in kilometers per hour on the current trup. 
		* \param tripDistance distance of the current trip in kilometers.
		* \param mileage overall driven distance in kilometers.
		* \param range range of the vehicle in kilometers. 
		*/
		void initTripComputerEvent(boolean bubbles, boolean cancelable, float averageConsumption, float tripConsumption, float averageSpeed, float tripSpeed, float tripDistance, float mileage, float range);
	};
	/**
	* \brief The interface defines a vehicle status event.
	*/
	interface VehicleStatusEvent : VehicleEvent{
		/**
		* \brief Attribute reflects the relevant component. The value must be within VehicleStatusComponents.
		*/		
		readonly attribute DOMString component;
		/**
		* \brief Attrubute reflects the status of the vehicle component.
		*/		
		readonly attribute DOMString status;
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param bubbles True if event bubbles.
		* \param cancelable True if event cancelable.
		* \param component defines the component, which has changed.
		* \param status status of the given component.
		*/
		void initVehicleStatusEvent(boolean bubbles, boolean cancelable, DOMString component, DOMString status);
	};
	
	/**
	* \brief The interface defines a tire pressure event.
	*/
	interface TirePressureEvent : VehicleEvent{
		/**
		* \brief Attribute reflects the pressure of the front left tire in bar.
		*/		
		readonly attribute unsigned short frontLeft;
		/**
		* \brief Attribute reflects the pressure of the front right tire in bar.
		*/		
		readonly attribute unsigned short frontRight;
		/**
		* \brief Attribute reflects the pressure of the rear left tire in bar.
		*/		
		readonly attribute unsigned short rearLeft;
		/**
		* \brief Attribute reflects the pressure of the rear left tire in bar.
		*/	
		readonly attribute unsigned short rearRight;
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param frontLeft defines the tire pressure of tire at the front left side of the vehicle.
		* \param frontRight defines the tire pressure of tire at the front right side of the vehicle.
		* \param rearLeft defines the tire pressure of tire at the rear left side of the vehicle.
		* \param rearRight defines the tire pressure of tire at the rear right side of the vehicle.

		*/
		void initTirePressureEvent(Short frontLeft, Short frontRight,Short rearRight,Short rearLeft);
	};
	/**
	* \brief Vehicle Status components
	*/
	enum VehicleStatusComponents {"wiperswitch", "oillevel"};
	
	/**
	* \brief Status of the wipers
	*/
	enum WiperStatus { "wiper-front-wash", "wiper-rear-wash", "wiper-automatic", "wiper-front-once", "wiper-rear-once", "wiper-front-level1", "wiper-front-level2" };

	/**
	* \brief Levels of engine oil
	*/
	enum EngineOilLevels { "OVER_MAX","MAX", "OK", "MIN", "UNDER_MIN", "MEASURING"};
	
	
	

