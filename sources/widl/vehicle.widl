/**<p>The webinos vehicle API provides access to specific vehicle data.</p>
 * It is derived from W3C's DOM Level 3 Events model and defines event types for retrieving information about the vehicle including trip computer data, gears or park sensors. Furthermore it offers methods for interacting with the on-board navigation system. The geolocation, speed and acceleration can be retrieved using the <a href="geolocation.html">geolocation</a> and <a href="deviceorientation.html">device orientation</a> API. The gps navigation related functions (see <a href='http://dev.webinos.org/specifications/draft/vehicle.html'>v0.7</a>) have been removed from the API. A new API about navigation has been defined.
 * \name Vehicle API.
 *
 * 
 *
 * The API gives access to vehicle data, which is available on the infotainment vehicle bus (e.g. <a href="http://en.wikipedia.org/wiki/MOST_Bus">MOST</a>). The infotainment bus is the only access point for the headunit to receveive vehicle data (<a href="http://dev.webinos.org/redmine/attachments/download/666/vehicle_bus_infrastructure.pdf" target="_blank">diagram on vehicle bus architecture</a>). Some data from other busses (high/low speed <a href="http://en.wikipedia.org/wiki/Controller_area_network" target="_blank">CAN</a>) are routed into the bus over the central gateway such as speed or gear (RPM is currently not provided on the MOST). 
 *
 * \def-api-feature http://webinos.org/api/vehicle
 * Identifies the static information about the vehicle 
 *
 * \def-api-feature http://webinos.org/api/vehicle.climate
 * Identifies vehicle data related to climate controls. 
 *
 * \def-api-feature http://webinos.org/api/vehicle.navigation
 * Identifies the navigation module of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle.parksensors
 * Identifies park sensor modules of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle.tripcomputer
 * Identifies the trip computer information of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle.controls
 * Identifies control data (e.g. wipers and lights) of a vehicle
 *
 * \def-api-feature http://webinos.org/api/vehicle.shift
 * Identifies gear data
 * 
 * \author Simon Isenberg (BMW Forschung \& Technik) &lt;Simon.Isenberg@bmw.de&gt;
 * \version 0.7
 */

	/**
	* \brief The interface defines a generic event for vehicle data specific events.
	*
	*/ 
	[NoInterfaceObject]
	interface VehicleEvent : Event{
	
	};


	/**
	* \brief callback for a failure from get Method
	* \param error a <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> containing information about the error (e.g. SecurityError if permission is denied).
	*
	*/
	callback VehicleErrorCallback = void (DOMError error);
	
	/**
	* \brief callback method to receive vehicle data in a non-recurring and asynchronous way.
	*/ 	
	callback VehicleDataHandler = void (VehicleEvent data);

	/**
	* \brief Possible values for vehicle fuel 
	*/
	enum Fuel { "unleaded", "premium", "diesel" };

	/**
	* \brief Possible values for transmission type 
	*/
	enum VehicleTransmission { "transmission-automatic", "transmission-manual" };
	
	/**
	* \brief The interface defines general information about the vehicle and is the object, where the event listener for vehicle related data can be registered. The interface is accessible through the webinos.vehicle object. 
	* 
	*/
	[NoInterfaceObject]
	interface VehicleInterface : EventTarget {
		/**
		* \brief Attribute denotes brand name of the vehicle.
		*/					
		readonly attribute DOMString brand;
		/**
		* \brief Attribute reflects model name of the vehicle.
		*/		
		readonly attribute DOMString model;
		/**
		* \brief Attribute denotes production year of the vehicle.
		*/		
		readonly attribute DOMString year;
		/**
		* \brief Attribute reflects fuel type of the vehicle.
		*/		
		readonly attribute Fuel fuel;
		/**
		* \brief Attribute denotes transmission type of the vehicle.
		*/		
		readonly attribute VehicleTransmission transmission;
		/**
		* \brief Method allows to request vehicle data in a non-recurring way and is independant from value changes (cf. events). The same identifiers  are used for vehicle data as well as for the different vehicle events (ClimateControlEvent, ControlEvent, NavigationEvent, ParkSensorsEvent, ShiftEvent). 
		* \code
		* webinos.vehicle.get("climate-all", dataHandler);
		* function dataHandler(data){
		*	if(data.acStatus){
		* 		console.log("Airconditioning is on");
		*		if(data.desiredTemperature \< 19){
		*			console.log("This is not so good for your health");
				}
		*	}
		* }
		* \endcode

		* \param vehicleDataId Parameter specifies the type of data, which shall be retrieved. The identifiers for the different data types are defined in the different vehicle event interfaces (ClimateControlEvent, ControlEvent, NavigationEvent, ParkSensorsEvent, ShiftEvent, StatusDataEvent). The identifiers are defined as values of the various enums: ClimateZone, VehicleLight, DestinationEventType, ParkSensorPosition, VehicleStatusComponents. 
		* \param handler Parameter specifies the function to handle the result.
		* \param errorCB Parameter specifies the callback function in case of an error.
		*/
		void get(VehicleEventType vehicleDataId, VehicleDataHandler handler, VehicleErrorCallback errorCB);
	};
	
	/**
	* \brief The Vehicle interface describes the part of the Vehicle API accessible through the webinos object. 
	*
	*/
	[NoInterfaceObject] interface Vehicle {
                readonly attribute VehicleInterface vehicle;
        };
	Webinos implements Vehicle;

	/**
	* \brief Climate zone names
	*/
	enum VehicleClimateZone { "climate-all", "climate-driver", "climate-passenger-front", "climate-passenger-rear-left", "climate-passenger-rear-right"};
	
	/**
	* \brief The interface defines a climate control event. 
	* The event provides information about changes to the climate control system inside the vehicle.
	* \code
	*
	* webinos.vehicle.addEventListener("climate", climateHandler, null);
	* function climateHandler(data){
	*		console.log(data.zone + " desired temperature is " + data.desiredTemperature + "Â° C"); 		
	*	}				
	* \endcode
	*/
	[NoInterfaceObject]
	interface ClimateControlEvent : VehicleEvent{
		/**
		* \brief Attribute defines the zone of the climate control event.
		*/	
		readonly attribute VehicleClimateZone zone;
		/**
		* \brief Attribute defines the desired temperature in degree celsius.
		*/	
		readonly attribute unsigned short desiredTemperature; 
		/**
		* \brief Attribute defines, if the AC switched on or not.	
		*/	
		readonly attribute boolean acStatus;
		/**
		* \brief Attribute defines the level of the vents. This value can be 1-9.  	
		*/	
		readonly attribute unsigned short ventLevel;
		/**
		* \brief Attribute defines if the vent is used in automatic mode or not. 	
		*/	
		readonly attribute boolean ventMode;
		/**
		* \brief Method is used to set initial values of a climate control event.
		* \param bubbles True if event bubbles.
		* \param cancelable True if event is cancelable.
		* \param zone zone where event climate settings have been changed.
		* \param desiredTemperature desired temperature in degree celsius.
		* \param acStatus true if the air conditioning is running.
		* \param ventLevel level of the vent.
		* \param ventMode true, if the vent is in automatic mode.
		*/
		void initClimateControlEvent(boolean bubbles, boolean cancelable, DOMString zone, short desiredTemperature, boolean acStatus, short ventLevel, short ventMode);
	};

	/**
	* \brief Type of vehicle light
	*/
	enum VehicleLight { "fog-front", "fog-rear", "signal-left", "signal-right", "signal-warn", "light-parking", "hibeam", "light-head" };

	
	/**
	* \brief The interface defines a control event. 
	* The event signals a change for a light unit inside the vehicle. The identifiers for the different light events are defined in the enum VehicleLight.
	* \code
	*	webinos.vehicle.addEventListener("hibeam", lightHandler, false);
	*      function lightHandler(cEvent){
	*		if(cEvent.controlId == "hibeam"){
	*			if(cEvent.active == true){
	*				console.log("Hibeam turned on");
	*			}else{
	*				console.log("Hibeam turned off");
	*			}
	*		}
	*	}
	* \endcode
	*/
	interface LightEvent : VehicleEvent{
		/**
		* \brief Attribute describes the source of the event.
		*/	
		readonly attribute VehicleLight lightId;
		/**
		* \brief Attribute describes the status of the light unit.	
		*/	
		readonly attribute boolean active;
		/**
		* \brief Method sets initial values of a control event.
		* \param lightId specifies the control unit.
		* \param active specifies if the unit is activated or not.
		*/
		void initLightEvent(VehicleLight lightId, boolean active);
	};

	/**
	*  \brief Position of parksensor event
	*/
	enum ParkSensorPosition { "parksensor-front", "parksensor-rear"};

	/**
	* \brief This interface defines an event related to the built-in park sensors. 
	* A listener can be registered by vehicle.addEventLister("parksensor-front",listener,false).
	* \code
	*	webinos.vehicle.addEventListener("parksensor-front", psHandler, false);
	*	webinos.vehicle.addEventListener("parksensor-rear", psHandler, false);
	*	function psHandler(psEvent){
	*		if(psEvent.left == 20){
	*			console.log("obstacle on the left in" + psEvent.position + " is close");
	*		}
	*	}
	* \endcode
	*/
	interface ParkSensorsEvent : VehicleEvent{
		/**
		* \brief Attribute defines the position of the sensor.
		*/
		readonly attribute ParkSensorPosition position;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the left side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/    		
		readonly attribute unsigned short left;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the middle left side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short midLeft;	
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the middle right side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short midRigth;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the rigth side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short rigth;
		/**
		* \brief Method sets initial values of a park sensors event.
		* \param position position of the sensors: front or rear.
		* \param left data from the outer left sensor.
		* \param left data from the left sensor.
		* \param midLeft data from the middle left sensor.
		* \param midRight data from the middle right sensor.
		* \param right data from the right sensor.
		* \param outRight data from the outer right sensor.
		*/
		void initParkSensorsEvent(ParkSensorPosition position, short outLeft ,short left, short midLeft, short midRight, short right, short outRight);
	};

	/**
	* \brief The interface defines a trip computer event. 
	* A listener can be registered by vehicle.addEventLister("tripcomputer",listener,false).
	*
	* \code
	*var latestConsumption = 0;
	*webinos.vehicle.addEventListener("tripcomputer", tripDataHandler, false);
	*      
	*function tripDataHandler(data){
	*	//Calculating, if the fuel efficiency increased, since the last update
	*	var gap = latestConsumption - data.averageConsumption;
	*	if(gap \< 0){
	*	    console.log("Thumbs down. You decreased your fuel efficiency");
	*	} else if (gap > 0){
	*	    console.log("Thumbs up. You increased your fuel efficiency");
	*	} else {
	*	    console.log("nothing changed");
	*	}
	*	latestConsumption = data.averageConsumption;
	*      
	*	if (data.range \< 20){
	*	    console.log("You really need " + webinos.vehicle.fuel + "soon.");	
	*	}
	*}
	* \endcode
	*/
	interface TripComputerEvent : VehicleEvent{
		/**
		* \brief Attrubute reflects the overall average consumption of the vehicle in l/100kilometers (resets on driver's demand).
		*/		
		readonly attribute float averageConsumption;
		/**
		* \brief Attrubute reflects the average consumption of the vehicle in l/100kilometers on the ongoing journey (resets automatically).
		*/		
		readonly attribute float tripConsumption;
		/**
		* \brief Attrubute reflects the overall average speed of the vehicle in kilometers per hour (resets on driver's demand).
		*/
		readonly attribute float averageSpeed;
		/**
		* \brief Attrubute reflects average speed of the vehicle in kilometers per hour on the current trip (resets automatically).
		*/		
		readonly attribute float tripSpeed;
		/**
		* \brief Attrubute reflects trip distance in kilometers.
		*/
		readonly attribute float tripDistance;
		/**
		* \brief Attrubute reflects mileage in kilometers.
		*/
		readonly attribute float mileage;
		/**
		* \brief Attrubute reflects the range of the vehicle in kilometers.
		*/
		readonly attribute float range;
		/**
		* \brief Method sets the initial values of a trip computer event.
		*
		* \param averageConsumption overall average consumption of the vehicle in l/100kilometers.
		* \param tripConsumption average consumption of the vehicle in l/100kilometers on the current trip.
		* \param averageSpeed average speed of the vehicle in kilometers per hour. 
		* \param tripSpeed average speed  of the vehicle in kilometers per hour on the current trup. 
		* \param tripDistance distance of the current trip in kilometers.
		* \param mileage overall driven distance in kilometers.
		* \param range range of the vehicle in kilometers. 
		*/
		void initTripComputerEvent(float averageConsumption, float tripConsumption, float averageSpeed, float tripSpeed, float tripDistance, float mileage, float range);
	};
	
	/**
	* \brief This interface defines a shift event. 
	* A listener can be registered by vehicle.addEventLister("gear",listener,false).
	* \code
	* // registering an Event for a Shift
	* webinos.vehicle.addEventListener("gear", shiftHandler);
	* function shiftHandler(e){
	*   document.getElementById("info").innerHTML = e.gear;
	*  webinos.vehicle.removeEventListener("shift", shiftHandler);
	* }				
	* \endcode
	*/
	interface GearEvent : VehicleEvent{
		/**
		* \brief Attribute reflects the current gear.
		*/
		attribute Gear gear;
		
		/**
		* \brief Method sets the value of the current gear.
		*
		* \param gear defines the value of the current gear. 
		*/
		void initGearEvent(Gear gear);		
	};
	

	/**
	* \brief Vehicle gears
	* 
	* supported gear values
	*/
	enum Gear {"R","P","N", "1", "2", "3", "4", "5", "6", "7", "8", "10"};
	
	/**
	* \brief Status of the wipers switch
	* defines the different positions of the wiper switch
	*/
	enum WiperStatus { "front-wash", "rear-wash", "automatic", "front-once", "rear-once", "front-level1", "front-level2" };
	
	interface WiperEvent : VehicleEvent{
		attribute WiperStatus position;
	};
	
	/**
	* \brief This interface defines a engine oil event. 
	*/
	interface EngineOilEvent : VehicleEvent{
		/**
		* \brief Attribute defines the level of the oil in the engine.
		*/
		attribute EngineOilLevel level;
		/**
		* \brief Method sets the initial values of a engine oil event.
		*
		* \param level defines the level of the oil in the engine.

		*/
		void initEngineOilEvent(EngineOilLevel level);	
	};
	
	/**
	* \brief Levels of engine oil
	* defines the different levels of engine oil.
	*/
	enum EngineOilStatus { "OVER_MAX","MAX", "OK", "MIN", "UNDER_MIN", "MEASURING"};


	/**
	* \brief The interface defines a tire pressure event.
	*/
	interface TirePressureEvent : VehicleEvent{
		/**
		* \brief Attribute reflects the pressure of the front left tire in bar.
		*/		
		readonly attribute unsigned short frontLeft;
		/**
		* \brief Attribute reflects the pressure of the front right tire in bar.
		*/		
		readonly attribute unsigned short frontRight;
		/**
		* \brief Attribute reflects the pressure of the rear left tire in bar.
		*/		
		readonly attribute unsigned short rearLeft;
		/**
		* \brief Attribute reflects the pressure of the rear left tire in bar.
		*/	
		readonly attribute unsigned short rearRight;
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param frontLeft defines the tire pressure of tire at the front left side of the vehicle.
		* \param frontRight defines the tire pressure of tire at the front right side of the vehicle.
		* \param rearLeft defines the tire pressure of tire at the rear left side of the vehicle.
		* \param rearRight defines the tire pressure of tire at the rear right side of the vehicle.

		*/
		void initTirePressureEvent(Short frontLeft, Short frontRight,Short rearRight,Short rearLeft);
	};
	
		/**
	* \brief The interface defines a tire pressure event.
	*/
	interface DoorEvent : VehicleEvent{
		/**
		* \brief Attribute reflects ...
		*/		
		readonly attribute boolean driver;
		/**
		* \brief  Attribute reflects ...
		*/		
		readonly attribute boolean? frontPassenger;
		/**
		* \brief  Attribute reflects ...
		*/		
		readonly attribute boolean? rearRight;
		/**
		* \brief  Attribute reflects ...
		*/		
		readonly attribute boolean? rearLeft;
		/**
		* \brief  Attribute reflects ...
		*/		
		readonly attribute boolean? trunkDeck;
		
		
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param driver defines TODO.
		* \param frontPassenger defines TODO.
		* \param rearLeft defines TODO.
		* \param rearRight defines TODO.
		* \param trunkDeck defines TODO.
		*/
		void initDoorEvent(boolean driver, boolean frontPassenger,boolean rearRight,boolean rearLeft,boolean trunkDeck);
	};
	
	/**
	* \brief Vehicle event types
	* defines the possible vehicle Events.
	*/
	enum VehicleEventType {"gear","tripcomputer","parksensors-front", "parksensors-rear", "engineoil","wipers","tirepressure","doors"};