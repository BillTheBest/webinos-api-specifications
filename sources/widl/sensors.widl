/**<p> The Webinos Generic Sensor API provides web applications with an API to access data from sensors in the device or in another device.</p> 
 * \name The Generic Sensor API 
 *
 * The API is agnostic to underlying low level methods for sensor discovery and communication with sensors. However, the sensor API should be used
 * in combination with the general Webinos service discovery methods findServices() and bind(). The sensors services can be located in the user's personal zone or be shared on the current network.
 *
 * The API consists of two interfaces: \n
 * - A sensor interface that provides attributes for the sensors and a method to configure a selected sensor.\n
 * - A DOM level 3 event that provides sensor data.\n
 *
 * Currently 5 different sensor types are defined but the API could easily be extended with additional sensor types.
 * 
 * This is an experimental API and security and privacy issues are not specifically addressed in the specification. If access to security or privacy
 * sensitive sensors are provided the user agent must either acquire access permission through a user interface or control access through a prearranged
 * trust relationship with users. 
 *
 *
 * \def-api-feature http://webinos.org/api/sensors
 * Identifies all the sensor types. 
 *
 * \def-api-feature http://webinos.org/api/sensors.light
 * Identifies the light sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.noise
 * Identifies the noise sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.temperature
 * Identifies the temperature sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.pressure
 * Identifies the pressure sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.proximity
 * Identifies the proximity sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.humidity
 * Identifies the relative humidity sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.heartratemonitor
 * Identifies a heart rate monitor sensor type. 
 *
 * \author Claes Nilsson &lt;claes1.nilsson@sonyericsson.com&gt;
 * \author Updated to new WIDL by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 0.98 
 */


  /**
   * 
   * \code

        // Handle that can be used to cancel the ongoing asynchronous discovery process.
        var findHandle = 0;

        // Handle from service.bind.
        var sensorHandle = 0;

        // Array of found temperature sensors object.
        var availableTempSensors = {};
                 
        // Callback method that display a list of found sensors in a selection list
        // The selection list is dynamically extended every time a new sensor is discovered.
        function sensorFoundCB(sensor) {

                var selectlist = document.getElementById('sensorlist');
                var option = document.createElement('option');
                option.value = sensor.id;
                option.appendChild(document.createTextNode(sensor.displayName));
                availableTempSensors [sensor.id] = sensor;
                selectlist.appendChild(option);

        }
                      
 
       // Callback when bind has been successfully executed on the service object. The Sensor is authorized and ready to use
        function bindCB(mySensor) {

                alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id + ' selected');
               

                // Configure the sensor.
                mySensor.configureSensor ( {timeout: 120, rate: SENSOR_DELAY_NORMAL, interrupt: False}, 
                                           successHandler () {alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id +
                                                                    ' is configured') },
                                           errorHandler (error) {alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id +
                                                                       ' configuration failed' + ' with error: ' + error.message)} );

               
                // Start listening to sensor events and log values. 
                mySensor.addEventListener('sensor', function (event) {
                          console.log(event.sensorValues[0]);

                          var temp = document.getElementById('temp');
                          temp.innerHTML = "Current temperature is: " + event.sensorValues[0];


                }, true); 

        }


       // Callback method that is invoked when user selects an option in the sensor selection list 
        function sensorSelected(sensor) {

                // Stops the findServices operation
                findHandle.cancel();

                // Binds to the sensor API to initiate an authorized objects used to
                // invoke services.  
                sensorHandle = sensor.bind({onBind:bindCB});                               
                
        }
        
        // Get list of temperature sensors registered in the device through the Service Discovery findServices() method
        findHandle  = window.webinos.discovery.findServices({api:'http://webinos.org/api/sensors.temperature'}, {onFound:sensorFoundCB});
 
       // Handle user selection of sensor
        var sensorlist = document.getElementById('sensorlist');
        sensorlist.addEventListener("change", function (e) {
                                var sensor = availableTempSensors[e.target.value];
                                if (sensor) {
                                    sensorSelected(sensor);
                                }
        }, false);


   * \endcode
   */  


   /**
    * \brief This interface defines sensor properties. It is a sensor specific extension to the interface Service in the ServiceDiscovery module.
    * The added attributes correspond to Android sensor API attributes.
    */ 
 
    [NoInterfaceObject] interface Sensor : Service {
 
       /**
        * \brief Max range of sensor in the sensors unit.
        */
        readonly attribute float?          maximumRange;

       /**
        * \brief Min delay of sensor allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
        */
        readonly attribute unsigned long?   minDelay;

       /**
        * \brief Power consumption of sensor in mA used by this sensor while in use. 
        */
        readonly attribute float?         power;

       /**
        * \brief Resolution of the sensor in the sensors unit.
        */
        readonly attribute float?         resolution;

       /**
        * \brief Vendor string of this sensor.
        */
        readonly attribute DOMString?      vendor;  

       /**
        * \brief Version of the sensors module.
        */ 
        readonly attribute unsigned long?  version; 


       /**
        * \brief Configures a sensor.
        *
        * Question: Do we need the ability to specify high and low thresholds? This is for example not supported by Android sensor API.
        *
        * \param options Sensor configuration options. 
        * \param successCB Callback issued when sensor configuration succeeded.
        * \param errorCB Callback issued if sensor configuration fails.  
        * \return A pending operation object making it possible to cancel the configureSensor operation     
        */
        PendingOp configureSensor (ConfigureSensorOptions options, ConfigureSensorCB successCB, optional SensorErrorCB errorCB);


     };


      /**
       * \brief onSuccess The onSuccess method is called when configuration of a sensor succeeded.  
       *
       */
       callback ConfigureSensorCB = void();          


      /**
       * \brief The SensorErrorCB method is called if an error occurs during the configureSensor() process.  
       *
       * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> object detailing what went wrong in an unsuccessful configureSensor() asynchronous operation.
       *
       */
       callback SensorErrorCB = void (DOMError error);

   /**
    * \brief Sensor event rate.\n
    * fastest = The sensor is reporting data as fast as possible.\n
    * game = The sensor is reporting data with a rate suitable for games.\n
    * ui = The sensor is reporting data with a rate suitable for user interface.\n
    * normal = The sensor is reporting data with a normal rate, e.g. suitable for screen orientation changes.
    * 
    */
    enum Rate { "fastest", "game", "ui", "normal"};
    
   /**
    * \brief Sensor event fire mode.\n
    * fixedinterval = events fired with a fixed time interval\n
    * valuechange = events fired when value changes
    */
    enum EventFireMode { "fixedinterval", "valuechange"};

  /**
    * \brief ConfigureSensorOptions interface definition
    */
    dictionary ConfigureSensorOptions {


      /**
       * \brief A timeout value for when configureSensor() is canceled in seconds between 0-65535. Default value is 120 seconds. 0 means infinite. 
       */
       unsigned short timeout;

      /**
       * \brief The requested rate of the sensor data.
       */
       Rate rate;
       
     /**
       * \brief The requested sensor event fire mode.
       */
       EventFireMode eventFireMode;
     };

    /**
     * \brief The PendingOp interface
     *
     * The PendingOp interface describes objects that are returned by asynchronous methods that are cancellable. It makes it possible to bring 
     * these operations to a stop if they haven't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.\n
     * TBD: Elaborate on cancel of ongoing configureSensor() operation...
     *
     */
     [NoInterfaceObject] interface PendingOp {

    /**
     * \brief Method Cancel
     *
     *  Cancel the pending asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return. No success or error callback for the pending operation will be invoked.
     */
        void cancel ();
     };


  /**
   * \brief This interface defines the "genericsensor" event type.
   *
   *  Registration for generic sensor events is achieved by calling addEventListener instantiated on the selected sensor object with event type set to "sensor" (see code example in the beginning of this specification)
   * 
   *
   * 
   */

   interface SensorEvent : Event {

 
  /**
   * \brief A constant describing that the sensor is reporting data with maximum accuracy.
   */
    const unsigned short SENSOR_STATUS_ACCURACY_HIGH = 4;

  /**
   * \brief A constant describing that the sensor is reporting data with an average level of accuracy, calibrating with the environment may improve the
   * reading.
   */
    const unsigned short SENSOR_STATUS_ACCURACY_MEDIUM = 3;

  /**
   * \brief A constant describing that the sensor is reporting with low accuracy, calibrating with the environment is needed.
   */
    const unsigned short SENSOR_STATUS_ACCURACY_LOW = 2;

  /**
   * \brief A constant describing that the sensor data cannot be trusted, calibrating is needed or the environment does not allow reading.
   */
    const unsigned short SENSOR_STATUS_UNRELIABLE = 1;

 /**
   * \brief A constant describing that the sensor is not available and no sensor data can be provided. This accuracy attribute will for example take 
   * this value when contact is lost with a sensor using Bluetooth communication.
   */
    const unsigned short SENSOR_STATUS_UNAVAILABLE = 0;


  /**
   *  \brief The type of sensor. This is a URI defining the sensor type according to the defined sensor "feature" URI strings. See section "Features". \n
   *\n
   * For the defined sensor types the sensorValues array contains the following data:\n
   *\n
   * http://webinos.org/api/sensors.light:\n
   * sensorValue[0] = the measured ambient light level around the device in SI lux units.\n
   *\n
   * http://webinos.org/api/sensors.noise:\n
   * sensorValue[0] = the measured ambient noise around the device, DB(SPL).\n
   *\n
   * http://webinos.org/api/sensors.temperature:\n
   * sensorValue[0] = the measured ambient temperature around the device, degrees Celsius.\n
   *\n
   * http://webinos.org/api/sensors.pressure:\n
   * sensorValue[0] = the measured atmospheric pressure around the device in hPa (millibar)\n
   *\n
   * http://webinos.org/api/sensors.proximity:\n
   * sensorValue[0] =  proximity sensor distance measured in centimeters. Some sensor can only state "near" (0) and "far" (1)\n
   *\n
   * http://webinos.org/api/sensors.humidity:\n
   * sensorValue[0] =  the measured relative humidity around the device in percent. \n
   *\n
   * http://webinos.org/api/sensors.heartratemonitor:\n
   * sensorValue[0] =  the measured heart rate as beats per minute (bpm). \n
   *   
   */
    readonly attribute DOMString sensorType;

  /**
   * \brief The unique identity of the of the specific sensor
   */
    readonly attribute DOMString sensorId;


  /**
   * \brief The accuracy of the sensor
   */
    readonly attribute unsigned short accuracy;

 
  /**
   * \brief The rate of the sensor data
   */
    readonly attribute unsigned short rate;

  /**
   *  \brief The event fire mode the sensor.
   *
   */
    readonly attribute EventFireMode eventFireMode;

  /**
   * \brief Array of sensor values
   */
    readonly attribute float[] sensorValues;

  /**
   * \brief Method to set initial values of sensor event.  
   *
   * The initSensorEvent() method must initialize the event in a manner analogous to the initEvent() method in http://www.w3.org/TR/2010/WD-DOM-Level-3-Events-20100907/.
   * The method can for example be used with document.createEvent() and EventTarget.dispatchEvent() to simulate a specific event.
   * The sensorType, sensorId, accuracy, rate, interrupt and sensorvalues arguments must initialize the attributes with the same names.
   *   
   * \param type Event type i.e. 'sensor'
   * \param bubbles True if event bubbles
   * \param cancelable True if event cancelable
   * \param sensorType Sensor type as a URI
   * \param sensorId The unique identity of the specific sensor
   * \param accuracy Accuracy of sensor data
   * \param rate Rate
   * \param interrupt Interrupt mode
   * \param sensorValues Array of sensor values
   */
    void initSensorEvent(DOMString type,
                         boolean bubbles,
                         boolean cancelable,
                         DOMString sensorType,
                         DOMString sensorId,
                         unsigned short accuracy,
                         unsigned short rate,
                         boolean interrupt, 
                         float[] sensorValues); 
    };


