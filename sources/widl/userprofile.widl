/**
 * \brief The webinos userprofile API to access user information. This API uses the Contact interface of the webinos Contacts API (http://dev.webinos.org/specifications/draft/contacts.html) and extend it with social network attributes from Portablecontacts from August 5, 2008 (http://portablecontacts.net/draft-spec.html). 
 *
 * This API offers access to information of the user. Therefore, the webinos Contact interface will be used as a basis to provide fundamental information about the user (e.g. name, nickname, gender, birthday, etc.) and extends it with social network attributes. These social network attributes are a simple pointer where the webinos user has non-webinos profiles. These information then could be used by the application to query the external API for additional information (e.g. query the Facebook Graph API for the buddylist).
 *
 * \author WIDL version for webinos created by Ronny Gr&auml;fe &lt;ronny.graefe@t-systems.com&gt;
 * \version 0.2 
 */
module userprofile {

	/**
	 * \brief The UserProfile Interface implements all attributes from the Contact interface to describe the user.
	 *
	 */
	userprofile::UserProfile implements Contacts::Contact;
	
	/**
	 * \brief The UserProfileError Interface implements all attributes from the ContactError interface.
	 *
	 */
	userProfile::UserProfileError implements Contacts::ContactError;
	
	/**
	 * \brief The UserProfileManager interface provides methods to create, replace and delete a userprofile. There could be several userprofiles assigned to one sepcific webinos user.
	 *
	 */
	interface UserProfileManager {
			
		/**
		 * \brief createuserProfile() method - Creates a new user profile in the webinos system.
		 *
		 * 
		 * \param userProfile A new UserProfile object.
		 * \param successCallBack Callback issued when the creating of the user is correctly finished.
		 * \param errorCallback Callback issued if an error occurs during the processing time.
		 *
		 * \code
		 * //create a new userProfile
		 * var userProfile = new Object();
		 *
		 * //add attributes
		 * userProfile.displayName = 'John Smith';
		 * userProfile.nickname = 'johnny2011';
		 * ...
		 * userProfile.timezone = 'CET';
		 * 
		 * //creates a new userprofile in the webinos system
		 * webinos.userprofile.createuserProfile(userProfile, successCB, errorCB);
		 *
		 * \endcode
		 */
		void createUserProfile(in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
		
		/**
		 * \brief The replaceUserProfile() method - Replaces a userprofile
		 *
		 * \param id The id of the existing object
		 * \param userProfile The UserProfile object which should be replaced in the webinos system.
		 * \param successCallBack Callback issued when the creating of the user is correctly finished.
		 * \param errorCallback Callback issued if an error occurs during the opening. E.g. the userprofile id does not exist.
		 *
		 * \code
		 * // Obtain a single existing UserProfile object resulting from webinos.userprofile.find()
		 * var existingUserProfileObj = ...;
		 *
		 * // Modify some parameters as required. e.g. add a new phone number
		 * existingUserProfileObj.phoneNumbers.push({
		 * type: 'home', 
		 * value: '654321'
		 * });
		 *
		 * //update the userprofile
		 * webinos.userprofile.replaceUserProfile(existingUserProfileObj.id, existingUserProfileObj, successCB, errorCB);
		 * \endcode
		 *
		 */
		void replaceUserProfile(in DOMString id, in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
		
		/**
		 * \brief The deleteUserProfile() method - Deletes an existing userprofile from the user in the webinos system.
		 *
		 * \param id The id of the existing object
		 * \param successCallBack Callback issued when the creating of the user is correctly finished.
		 * \param errorCallback Callback issued if an error occurs during the opening. E.g. the userprofile id does not exist.
		 *
		 * \code
		 * //delete the userprofile
		 * webinos.userprofile.deleteUserProfile('xxx', successCB, errorCB);
		 * \endcode
		 */
		void deleteUserProfile(in DOMString id, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
	};
	
	/**
     * \brief Contacts specific errors.
     */
    [NoInterfaceObject]
	interface UserProfileError {
		
		/**
         * \brief The userprofile does not exist in the webinos system.
         */
        const unsigned short USERPROFILE_NOT_EXIST = 101;
    };
        
    /**
     * \brief This is the wrapper interface for callbacks indicating failure of the createUserProfile(), updateUserProfile() and deleteUserProfile() operation. 
     *
     */         
    [Callback=FunctionOnly, NoInterfaceObject]
    interface UserProfileErrorCB  {  
	
        /**
         * \brief Callback on failure of a find() operation
         * \param error The UserProfileError object capturing the type of the error.
         * \return void                 
         */
        void onerror(UserProfileError error);
    };
	
	/**
	 * \brief The UserProfile interface
	 *
	 * 
	 */
	interface UserProfile {
	
		/**
		 * \brief preferredUsername of type DOMString
		 *
		 * The preferred username of this user on sites that ask for a username (e.g. jsmarr or daveman692). This field may be useful for describing the owner (i.e. the value when /@me/@self is requested), e.g. Consumers MAY wish to use this value to pre-populate a username for this user when signing up for a new service. See [[PORT] section 7.2.1].
		 */
		attribute DOMString? preferredUsername;
		
		/**
		 * \brief socialProfiles of type array of SocialNetworkProfile
		 *
		 * The User profile on a social network provider.
		 */
		attribute SocialNetworkProfile[] socialProfiles;	
	};
	
	/**
	 * \brief The SocialNetworkProfile interface
	 *
	 * 
	 */
	[NoInterfaceObject]
	interface SocialNetworkProfile {
	
		/**
		 * \brief pref of type boolean
		 *
		 * This attribute indicates whether this instance of the SocialNetworkProfile is the preferred, or primary, value for the user. By default, the value is false. 
		 */
		attribute boolean pref;
		
		/**
		 * \brief socialNetworkProvider of type DOMString
		 *
		 * The identifier of the social network provider, for the purposes of sorting and filtering.
		 */
		attribute DOMString? socialNetworkProvider;
		
		/**
		 * \brief userId of type DOMString
		 *
		 * 	The user's IDs in the social network, that is one or more elements that can be used to uniquely identify the user (i.e. userName, social network ID number, email). Usually chosen automatically, and usually numeric but sometimes alphanumeric, e.g. "12345" or "1Z425A". 
		 */
		attribute DOMString? userId;
	};
};
