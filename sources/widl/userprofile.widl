/**
 * \brief The webinos userprofile API to access user information. This API uses the Contact interface of the webinos Contacts API (http://dev.webinos.org/specifications/draft/contacts.html) and extend it with social network attributes.
 *
 * This API offers access to information of the user. Therefore, the webinos Contact interface will be used as a basis to provide fundamental information about the user (e.g. name, nickname, gender, birthday, etc.) and extends it with social network attributes. These social network attributes are a simple pointer where the webinos user has non-webinos profiles. These information then could be used by the application to query the external API for additional information (e.g. query the Facebook Graph API for the buddylist).
 *
 * \author WIDL version for webinos created by Ronny Gr&auml;fe &lt;ronny.graefe@t-systems.com&gt;
 * \version 0.2 
 */
module Userprofile {

	/**
	 * \brief The UserProfile Interface implements all attributes from the Contact interface to describe the user.
	 *
	 */
	Userprofile::UserProfile implements Contacts::Contact;
	
	/**
	 * \brief The UserProfileError Interface implements all attributes from the ContactError interface.
	 *
	 */
	UserProfile::UserProfileError implements Contacts::ContactError;
	
	/**
	 * \brief The UserProfileManager interface provides methods to create, update and delete a userprofile. There could be several userprofiles assigned to one sepcific webinos user.
	 *
	 */
	interface UserProfileManager {
			
		/**
		 * \brief createuserProfile() method - Creates a new user profile in the webinos system.
		 *
		 * 
		 * \param userProfile A new UserProfile object.
		 * \param successCallBack Callback issued when the creating of the user is correctly finished.
		 * \param errorCallback Callback issued if an error occurs during the opening. E.g. the id already exist.
		 *
		 * \code
		 * //create a new user
		 * var user = new Object();
		 *
		 * //add attributes
		 * user.displayName = 'John Smith';
		 * user.nickname = 'johnny2011';
		 * ...
		 * user.timezone = 'CET';
		 * 
		 * //creates a new user profile in the webinos system
		 * webinos.user.createuserProfile(user, successCB, errorCB);
		 *
		 * \endcode
		 */
		void createUserProfile(in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
		
		/**
		 * \brief The updateUserProfile() method - Updates a userprofile
		 *
		 * \param id The id of the existing object
		 * \param user The updated user object.
		 * \param successCallBack Callback issued when the creating of the user is correctly finished.
		 * \param errorCallback Callback issued if an error occurs during the opening. E.g. the id is wrong.
		 *
		 * \code
		 * // Obtain a single existing Contact object resulting from webinos.userprofile.find()
		 * var existingContactObj = ...;
		 *
		 * // Modify some parameters as required. e.g. add a new phone number
		 * existingContactObj.phoneNumbers.push({
		 * type: 'home', 
		 * value: '654321'
		 * });
		 *
		 * //update the userprofile
		 * webinos.userprofile.updateUserProfile(existingContactObj.id, existingContactObj, successCB, errorCB);
		 * \endcode
		 *
		 */
		void updateUserProfile(in DOMString id, in UserProfile user, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
		
		/**
		 * \brief The deleteUserProfile() method - Deletes an existing userprofile from the user in the PZH/PZP.
		 *
		 * \param id The id of the existing object
		 * \param successCallBack Callback issued when the creating of the user is correctly finished.
		 * \param errorCallback Callback issued if an error occurs during the opening. E.g. the id does not exist.
		 *
		 * \code
		 * //delete the userprofile
		 * webinos.userprofile.deleteUserProfile('xxx', successCB, errorCB);
		 * \endcode
		 */
		void deleteUserProfile(in DOMString id, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
	};
	
	/**
     * \brief Contacts specific errors.
     */
    [NoInterfaceObject]
	interface UserProfileError {
		
		/**
         * \brief Access to the requested information was denied by the implementation or by the user.
         */
        const unsigned short USER_NOT_EXIST = 101;
		
		/**
         * \brief Access to the requested information was denied by the implementation or by the user.
         */
        const unsigned short USER_ID_ALREADY_EXIST = 102;
        
		/**
         * \brief An error code assigned by an implementation when an error has occurred in Contacts API processing.
         * No exceptions.
         */
        readonly attribute unsigned short code;
    };
        
    /**
     * \brief This is the wrapper interface for callbacks indicating failure of the createUserProfile(), updateUserProfile() and deleteUserProfile() operation. 
     *
     */         
    [Callback=FunctionOnly, NoInterfaceObject]
    interface UserProfileErrorCB  {        
        /**
         * \brief Callback on failure of a find() operation
         * \param error The UserProfileError object capturing the type of the error.
         * \return void                 
         */
        void onerror(UserProfileError error);
    };
	
	/**
	 * \brief The UserProfile interface
	 *
	 * 
	 */
	interface UserProfile {
	
		/**
		 * \brief preferredUsername of type DOMString
		 *
		 * The preferred username of this user on sites that ask for a username (e.g. jsmarr or daveman692). This field may be useful for describing the owner (i.e. the value when /@me/@self is requested), e.g. Consumers MAY wish to use this value to pre-populate a username for this user when signing up for a new service. See [[PORT] section 7.2.1].
		 */
		attribute DOMString? preferredUsername;
		
		/**
		 * \brief socialProfiles of type array of SocialNetworkProfile
		 *
		 * The User profile on a social network provider.
		 */
		attribute SocialNetworkProfile[] socialProfiles;	
	};
	
	/**
	 * \brief The SocialNetworkProfile interface
	 *
	 * 
	 */
	[NoInterfaceObject]
	interface SocialNetworkProfile {
	
		/**
		 * \brief pref of type boolean
		 *
		 * This attribute indicates whether this instance of the SocialNetworkProfile is the preferred, or primary, value for the user. By default, the value is false. 
		 */
		attribute boolean pref;
		
		/**
		 * \brief socialNetworkProvider of type DOMString
		 *
		 * The identifier of the social network provider 
		 */
		attribute DOMString? socialNetworkProvider;
		
		/**
		 * \brief socialId of type DOMString
		 *
		 * 	The user's IDs in the social network, that is one or more elements that can be used to uniquely identify the user (i.e. userName, social network ID number, email.
		 */
		attribute DOMString? socialId;
	};
};
